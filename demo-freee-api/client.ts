// 
// Generated by @himenon/openapi-typescript-code-generator v0.10.0
// 
// OpenApi : 3.0.1
// 
// 


export namespace Schemas {
    export interface accountItemParams {
        account_item: {
            /** 勘定科目カテゴリーID Selectablesフォーム用選択項目情報エンドポイント(account_groups.account_category_id)で取得可能です */
            account_category_id: number;
            /** 減価償却累計額勘定科目ID（法人のみ利用可能） */
            accumulated_dep_account_item_id?: number;
            /** 支出取引相手勘定科目ID */
            corresponding_expense_id: number;
            /** 収入取引相手勘定科目ID */
            corresponding_income_id: number;
            /** 決算書表示名（小カテゴリー） Selectablesフォーム用選択項目情報エンドポイント(account_groups.name)で取得可能です */
            group_name: string;
            /** 品目 */
            items?: {
                id?: number;
            }[];
            /** 勘定科目名 (30文字以内) */
            name: string;
            /** 取引先 */
            partners?: {
                id?: number;
            }[];
            /** 検索可能:2, 検索不可：3(登録時未指定の場合は2で登録されます。更新時未指定の場合はsearchableは変更されません。) */
            searchable?: number;
            /** ショートカット1 (20文字以内) */
            shortcut?: string;
            /** ショートカット2(勘定科目コード)(20文字以内) */
            shortcut_num?: string;
            /** 税区分コード */
            tax_code: number;
        };
        /** 事業所ID */
        company_id: number;
    }
    export interface accountItemResponse {
        account_item: {
            /** 勘定科目カテゴリー */
            account_category: string;
            /** 勘定科目のカテゴリーID */
            account_category_id: number;
            /** 減価償却累計額勘定科目ID（法人のみ利用可能） */
            accumulated_dep_account_item_id?: number | null;
            /** 減価償却累計額勘定科目（法人のみ利用可能） */
            accumulated_dep_account_item_name?: string;
            /** 勘定科目の使用設定（true: 使用する、false: 使用しない） */
            available: boolean;
            /** 事業所ID */
            company_id: number;
            /** 支出取引相手勘定科目ID */
            corresponding_expense_id?: number | null;
            /** 支出取引相手勘定科目名 */
            corresponding_expense_name?: string | null;
            /** 収入取引相手勘定科目ID */
            corresponding_income_id?: number | null;
            /** 収入取引相手勘定科目名 */
            corresponding_income_name?: string | null;
            /** 決算書表示名（小カテゴリー） */
            group_name?: string | null;
            /** 勘定科目ID */
            id: number;
            items?: {
                /** 品目ID */
                id: number;
                /** 品目 */
                name: string;
            }[];
            /** 勘定科目名 (30文字以内) */
            name: string;
            partners?: {
                /** 取引先ID */
                id: number;
                /** 取引先 */
                name: string;
            }[];
            /** 検索可能:2, 検索不可：3 */
            searchable: number;
            /** ショートカット1 (20文字以内) */
            shortcut?: string;
            /** ショートカット2(勘定科目コード) (20文字以内) */
            shortcut_num?: string;
            /** 税区分コード */
            tax_code: number;
            /** 口座ID */
            walletable_id: number | null;
        };
    }
    export interface accountItemsResponse {
        account_items: {
            /** 勘定科目カテゴリー */
            account_category: string;
            /** 勘定科目のカテゴリーID */
            account_category_id: number;
            /** 勘定科目の使用設定（true: 使用する、false: 使用しない） */
            available: boolean;
            categories: string[];
            /** 支出取引相手勘定科目ID */
            corresponding_expense_id?: number | null;
            /** 支出取引相手勘定科目名 */
            corresponding_expense_name?: string | null;
            /** 収入取引相手勘定科目ID */
            corresponding_income_id?: number | null;
            /** 収入取引相手勘定科目名 */
            corresponding_income_name?: string | null;
            /** デフォルト設定がされている税区分コード */
            default_tax_code: number;
            /** デフォルト設定がされている税区分ID */
            default_tax_id?: number;
            /** 決算書表示名（小カテゴリー） */
            group_name?: string | null;
            /** 勘定科目ID */
            id: number;
            /** 勘定科目名 (30文字以内) */
            name: string;
            /** ショートカット1 (20文字以内) */
            shortcut?: string | null;
            /** ショートカット2(勘定科目コード) (20文字以内) */
            shortcut_num?: string | null;
            /** 税区分コード */
            tax_code: number;
            /** 口座ID */
            walletable_id: number | null;
        }[];
    }
    export interface approvalFlowRouteResponse {
        approval_flow_route: {
            /** システム作成の申請経路かどうか */
            definition_system?: boolean;
            /** 申請経路の説明 */
            description?: string;
            /** 最初の承認ステップのID */
            first_step_id?: number;
            /** 申請経路ID */
            id: number;
            /** 申請経路名 */
            name?: string;
            /** 申請経路で利用できる申請フォームID配列 */
            request_form_ids: number[];
            /** 承認ステップ（配列） */
            steps?: {
                /** 承認ステップID */
                id: number;
                /** 次の承認ステップID */
                next_step_id: number | null;
                /** 承認方法( predefined_user: メンバー指定 (1人), selected_user: 申請時にメンバー指定,unspecified: 指定なし, and_resource: メンバー指定 (複数、全員の承認), or_resource: メンバー指定 (複数、1人の承認), and_position: 役職指定 (複数、全員の承認), or_position: 役職指定 (複数、1人の承認) )  */
                resource_type: "predefined_user" | "selected_user" | "unspecified" | "and_resource" | "or_resource" | "and_position" | "or_position";
                /** 承認者のユーザーID (配列) */
                user_ids?: number[];
            }[];
            /**
             * 申請種別（申請経路を使用できる申請種別を示します。例えば、ApprovalRequest の場合は、各種申請で使用できる申請経路です。）
             * * `TxnApproval` - 仕訳承認
             * * `ExpenseApplication` - 経費精算
             * * `PaymentRequest` - 支払依頼
             * * `ApprovalRequest` - 各種申請
             * * `DocApproval` - 請求書等 (見積書・納品書・請求書・発注書)
             */
            usages?: ("TxnApproval" | "ExpenseApplication" | "PaymentRequest" | "ApprovalRequest" | "DocApproval")[];
            /** 更新したユーザーのユーザーID */
            user_id?: number | null;
        };
    }
    export interface approvalFlowRoutesIndexResponse {
        approval_flow_routes: {
            /**
             * 基本経路として設定されているかどうか<br><br>
             * リクエストパラメータusageに下記のいずれかが指定され、かつ、基本経路の場合はtrueになります。
             * * `TxnApproval` - 仕訳承認
             * * `ExpenseApplication` - 経費精算
             * * `PaymentRequest` - 支払依頼
             * * `ApprovalRequest`(リクエストパラメータrequest_form_idを同時に指定) - 各種申請
             * * `DocApproval` - 請求書等 (見積書・納品書・請求書・発注書)
             *
             * <a href="https://support.freee.co.jp/hc/ja/articles/900000507963" target="_blank">申請フォームの基本経路設定</a>
             */
            default_route: boolean;
            /** システム作成の申請経路かどうか */
            definition_system?: boolean;
            /** 申請経路の説明 */
            description?: string;
            /** 最初の承認ステップのID */
            first_step_id?: number;
            /** 申請経路ID */
            id: number;
            /** 申請経路名 */
            name?: string;
            /** 申請経路で利用できる申請フォームID配列 */
            request_form_ids?: number[];
            /**
             * 申請種別（申請経路を使用できる申請種別を示します。例えば、ApprovalRequest の場合は、各種申請で使用できる申請経路です。）
             * * `TxnApproval` - 仕訳承認
             * * `ExpenseApplication` - 経費精算
             * * `PaymentRequest` - 支払依頼
             * * `ApprovalRequest` - 各種申請
             * * `DocApproval` - 請求書等 (見積書・納品書・請求書・発注書)
             */
            usages?: ("TxnApproval" | "ExpenseApplication" | "PaymentRequest" | "ApprovalRequest" | "DocApproval")[];
            /** 更新したユーザーのユーザーID */
            user_id?: number | null;
        }[];
    }
    export interface approvalRequestActionCreateParams {
        /** 操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す) */
        approval_action: "approve" | "force_approve" | "cancel" | "reject" | "feedback" | "force_feedback";
        /** 事業所ID */
        company_id: number;
        /** 次ステップの承認者のユーザーID */
        next_approver_id?: number | null;
        /** 対象round。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。各種申請の取得APIレスポンス.current_roundを送信してください。 */
        target_round: number;
        /** 対象承認ステップID 各種申請の取得APIレスポンス.current_step_idを送信してください。 */
        target_step_id: number;
    }
    export interface approvalRequestCreateParams {
        /** 申請日 (yyyy-mm-dd) */
        application_date: string;
        /** 申請経路ID */
        approval_flow_route_id: number;
        /** 承認者のユーザーID */
        approver_id?: number;
        /** 事業所ID */
        company_id: number;
        /** falseの時、in_progress:申請中で作成する。それ以外の時はdraft:下書きで作成する */
        draft: boolean;
        /** 申請フォームID */
        form_id: number;
        /** 親申請ID(既存各種申請IDのみ指定可能です。) */
        parent_id?: number;
        request_items: {
            /** 項目ID */
            id?: number;
            /** 項目タイプ(title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID) */
            type?: "title" | "single_line" | "multi_line" | "select" | "date" | "amount" | "receipt" | "section" | "partner";
            /** 項目の値 */
            value?: string;
        }[];
    }
    export interface approvalRequestFormIndexResponse {
        approval_request_forms: {
            /** 事業所ID */
            company_id: number;
            /** 作成日時 */
            created_date: string;
            /** 申請フォームの説明 */
            description: string;
            /** 表示順（申請者が選択する申請フォームの表示順を設定できます。小さい数ほど上位に表示されます。（0を除く整数のみ。マイナス不可）未入力の場合、表示順が後ろになります。同じ数字が入力された場合、登録順で表示されます。） */
            form_order: number | null;
            /** 申請フォームID */
            id: number;
            /** 申請フォームの名前 */
            name: string;
            /** 適用された経路数 */
            route_setting_count: number;
            /** ステータス(draft: 申請で使用しない、active: 申請で使用する、deleted: 削除済み) */
            status: "draft" | "active" | "deleted";
        }[];
    }
    export interface approvalRequestFormResponse {
        approval_request_form: {
            /** 事業所ID */
            company_id: number;
            /** 作成日時 */
            created_date: string;
            /** 申請フォームの説明 */
            description: string;
            /** 表示順（申請者が選択する申請フォームの表示順を設定できます。小さい数ほど上位に表示されます。（0を除く整数のみ。マイナス不可）未入力の場合、表示順が後ろになります。同じ数字が入力された場合、登録順で表示されます。） */
            form_order: number | null;
            /** 申請フォームID */
            id: number;
            /** 申請フォームの名前 */
            name: string;
            /** 申請フォームの項目 */
            parts?: {
                /** 追加説明 */
                annotation?: string | null;
                /** 項目ID */
                id: number;
                /** 項目名 */
                label?: string;
                /** 上限金額 */
                max_amount?: number | null;
                /** 下限金額 */
                min_amount?: number | null;
                /** 順序 */
                order?: number;
                /** 必須かどうか */
                required?: boolean | null;
                /** 項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID) */
                type?: "title" | "single_line" | "multi_line" | "select" | "date" | "amount" | "receipt" | "section" | "partner";
                /** 選択項目 */
                values?: {
                    /** 選択項目名 */
                    name: string;
                    /** 順序 */
                    order: number;
                }[] | null;
            }[];
            /** 適用された経路数 */
            route_setting_count: number;
            /** ステータス(draft: 申請で使用しない、active: 申請で使用する、deleted: 削除済み) */
            status: "draft" | "active" | "deleted";
        };
    }
    export interface approvalRequestResponse {
        approval_request: {
            /** 申請者のユーザーID */
            applicant_id: number;
            /** 申請日 (yyyy-mm-dd) */
            application_date: string;
            /** 申請No. */
            application_number: string;
            /** 各種申請の承認履歴（配列） */
            approval_flow_logs: {
                /** 操作(apply: 申請, approve: 承認, force_approve: 代理承認, cancel: 取消, reject: 却下, feedback: 差戻し) */
                action: "apply" | "approve" | "force_approve" | "cancel" | "reject" | "feedback";
                /** 更新日時(ISO8601形式) */
                updated_at: string;
                /** ユーザーID */
                user_id: number;
            }[];
            /** 申請経路ID */
            approval_flow_route_id: number;
            approval_request_form: {
                /** 申請フォームの項目 */
                parts: {
                    /** 追加説明 */
                    annotation?: string | null;
                    /** 項目ID */
                    id: number;
                    /** 項目名 */
                    label?: string;
                    /** 上限金額 */
                    max_amount?: number | null;
                    /** 下限金額 */
                    min_amount?: number | null;
                    /** 順序 */
                    order?: number;
                    /** 必須かどうか */
                    required?: boolean | null;
                    /** 項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID) */
                    type?: "title" | "single_line" | "multi_line" | "select" | "date" | "amount" | "receipt" | "section" | "partner";
                    /** 選択項目 */
                    values?: {
                        /** 選択項目名 */
                        name: string;
                        /** 順序 */
                        order: number;
                    }[] | null;
                }[];
            };
            /**
             * 承認者（配列）
             *   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。
             *   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、
             *   approversはレスポンスに含まれるようになります。
             *   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。
             */
            approvers: {
                /** 代理承認済みかどうか */
                is_force_action: boolean;
                /**
                 * 承認ステップの承認方法
                 * * ` predefined_user` - メンバー指定 (1人),
                 * * ` selected_user` - 申請時にメンバー指定
                 * * ` unspecified` - 指定なし
                 * * ` and_resource` - メンバー指定 (複数、全員の承認),
                 * * ` or_resource` - メンバー指定 (複数、1人の承認)
                 * * ` and_position` - 役職指定 (複数、全員の承認)
                 * * ` or_position` - 役職指定 (複数、1人の承認)
                 */
                resource_type: "predefined_user" | "selected_user" | "unspecified" | "and_resource" | "or_resource" | "and_position" | "or_position";
                /**
                 * 承認者の承認状態
                 * * `initial` - 初期状態
                 * * `approved` - 承認済
                 * * `rejected` - 却下
                 * * `feedback` - 差戻し
                 */
                status: "initial" | "approved" | "rejected" | "feedback";
                /** 承認ステップID */
                step_id: number;
                /**
                 * 承認者のユーザーID
                 * 下記の場合はnullになります。
                 * <ul>
                 *   <li>resource_type:selected_userの場合で承認者未指定時</li>
                 *   <li>resource_type:or_positionで前stepで部門未指定の場合</li>
                 * </ul>
                 */
                user_id: number | null;
            }[];
            /** 各種申請のコメント一覧（配列） */
            comments: {
                /** コメント内容 */
                comment: string;
                /** コメント日時(ISO8601形式) */
                posted_at: string;
                /** ユーザーID */
                user_id: number;
            }[];
            /** 事業所ID */
            company_id: number;
            /** 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 */
            current_round: number;
            /** 現在承認ステップID */
            current_step_id: number | null;
            /** 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) */
            deal_id: number | null;
            /** 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済) */
            deal_status: ("settled" | "unsettled") | null;
            /** 申請フォームID */
            form_id: number;
            /** 各種申請ID */
            id: number;
            /**
             * 振替伝票のID (申請ステータス:statusがapprovedで、関連する振替伝票が存在する時のみmanual_journal_idが表示されます)
             *
             * <a href="https://support.freee.co.jp/hc/ja/articles/115003827683-#5" target="_blank">承認された各種申請から支払依頼等を作成する</a>
             */
            manual_journal_id: number | null;
            /** 各種申請の項目一覧（配列） */
            request_items: {
                /** 項目ID */
                id: number;
                /** 項目タイプ(title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID) */
                type: "title" | "single_line" | "multi_line" | "select" | "date" | "amount" | "receipt" | "section" | "partner";
                /** 項目の値 */
                value: string;
            }[];
            /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
            status: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
            /** 申請タイトル */
            title: string;
        };
    }
    export interface approvalRequestUpdateParams {
        /** 申請日 (yyyy-mm-dd) */
        application_date: string;
        /** 申請経路ID */
        approval_flow_route_id: number;
        /** 承認者のユーザーID */
        approver_id?: number;
        /** 事業所ID */
        company_id: number;
        /** falseの時、in_progress:申請中で更新する。それ以外の時はdraft:下書きで更新する */
        draft: boolean;
        request_items: {
            /** 項目ID */
            id?: number;
            /** 項目タイプ(title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID) */
            type?: "title" | "single_line" | "multi_line" | "select" | "date" | "amount" | "receipt" | "section" | "partner";
            /** 項目の値 */
            value?: string;
        }[];
    }
    export interface approvalRequestsIndexResponse {
        approval_requests: {
            /** 申請者のユーザーID */
            applicant_id: number;
            /** 申請日 (yyyy-mm-dd) */
            application_date: string;
            /** 申請No. */
            application_number: string;
            /** 事業所ID */
            company_id: number;
            /** 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 */
            current_round: number;
            /** 現在承認ステップID */
            current_step_id: number | null;
            /** 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) */
            deal_id: number | null;
            /** 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:決済済み, unsettled:未決済) */
            deal_status: ("settled" | "unsettled") | null;
            /** 申請フォームID */
            form_id: number;
            /** 各種申請ID */
            id: number;
            /**
             * 振替伝票のID (申請ステータス:statusがapprovedで、関連する振替伝票が存在する時のみmanual_journal_idが表示されます)
             *
             * <a href="https://support.freee.co.jp/hc/ja/articles/115003827683-#5" target="_blank">承認された各種申請から支払依頼等を作成する</a>
             */
            manual_journal_id: number | null;
            /** 各種申請の項目一覧（配列） */
            request_items: {
                /** 項目ID */
                id: number;
                /** 項目タイプ(title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID) */
                type: "title" | "single_line" | "multi_line" | "select" | "date" | "amount" | "receipt" | "section" | "partner";
                /** 項目の値 */
                value: string;
            }[];
            /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
            status: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
            /** 申請タイトル */
            title: string;
        }[];
    }
    export interface badRequestError {
        errors?: {
            messages: string[];
            type: "status" | "validation" | "error";
        }[];
        status_code?: number;
    }
    export interface badRequestNotFoundError {
        errors?: {
            messages: string[];
            type: "status" | "validation" | "error";
        }[];
        status_code?: number;
    }
    export interface bankResponse {
        bank: {
            /** 連携サービスID */
            id: number;
            /** 連携サービス名 */
            name?: string;
            /** 連携サービス名(カナ) */
            name_kana?: string | null;
            /** 連携サービス種別: (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type?: "bank_account" | "credit_card" | "wallet";
        };
    }
    export interface companiesPlanResponse {
        /** 事業所ID */
        id: number;
        /** 事業形態（個人事業主: personal、法人: corporate） */
        org_code: "personal" | "corporate";
        /** 会計プラン 個人用(non_charged: 無料プラン、starter: スターター、standard: スタンダード、premium: プレミアム) 法人用(non_charged: 無料プラン、minimum: ミニマム、basic: ベーシック、professional: プロフェッショナル、enterprise: エンタープライズ) */
        plan: "non_charged" | "starter" | "standard" | "premium" | "minimum" | "basic" | "professional" | "enterprise";
    }
    export interface companyIndexResponse {
        companies: {
            /** 事業所名 */
            display_name: string | null;
            /** 事業所ID */
            id: number;
            /** 事業所名 */
            name: string | null;
            /** 事業所名（カナ） */
            name_kana: string | null;
            /** ユーザーの権限 */
            role: "admin" | "simple_accounting" | "self_only" | "read_only";
        }[];
    }
    export interface companyResponse {
        company: {
            /** 金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入） */
            amount_fraction: number;
            /** 担当者名 (50文字以内) */
            contact_name: string | null;
            /** 法人番号 (半角数字13桁、法人のみ) */
            corporate_number: string;
            /** 決済口座のデフォルト */
            default_wallet_account_id?: number;
            /** 事業所名 */
            display_name: string;
            /** FAX */
            fax: string | null;
            fiscal_years: Schemas.fiscal_years[];
            /** 従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上 */
            head_count: number | null;
            /** 事業所ID */
            id: number;
            /** 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他） */
            industry_class: "agriculture_forestry_fisheries_ore" | "construction" | "manufacturing_processing" | "it" | "transportation_logistics" | "retail_wholesale" | "finance_insurance" | "real_estate_rental" | "profession" | "design_production" | "food" | "leisure_entertainment" | "lifestyle" | "education" | "medical_welfare" | "other_services" | "other";
            /** 業種（agriculture: 農業, forestry: 林業, fishing_industry: 漁業、水産養殖業, mining: 鉱業、採石業、砂利採取業, civil_contractors: 土木工事業, pavement: 舗装工事業, carpenter: とび、大工、左官等の建設工事業, renovation: リフォーム工事業, electrical_plumbing: 電気、管工事等の設備工事業, grocery: 食料品の製造加工業, machinery_manufacturing: 機械器具の製造加工業, printing: 印刷業, other_manufacturing: その他の製造加工業, software_development: 受託：ソフトウェア、アプリ開発業, system_development: 受託：システム開発業, survey_analysis: 受託：調査、分析等の情報処理業, server_management: 受託：サーバー運営管理, website_production: 受託：ウェブサイト制作, online_service_management: オンラインサービス運営業, online_advertising_agency: オンライン広告代理店業, online_advertising_planning_production: オンライン広告企画・制作業, online_media_management: オンラインメディア運営業, portal_site_management: ポータルサイト運営業, other_it_services: その他、IT サービス業, transport_delivery: 輸送業、配送業, delivery: バイク便等の配達業, other_transportation_logistics: その他の運輸業、物流業, other_wholesale: 卸売業：その他, clothing_wholesale_fiber: 卸売業：衣類卸売／繊維, food_wholesale: 卸売業：飲食料品, entrusted_development_wholesale: 卸売業：機械器具, online_shop: 小売業：無店舗　オンラインショップ, fashion_grocery_store: 小売業：店舗あり　ファッション、雑貨, food_store: 小売業：店舗あり　生鮮食品、飲食料品, entrusted_store: 小売業：店舗あり　機械、器具, other_store: 小売業：店舗あり　その他, financial_instruments_exchange: 金融業：金融商品取引, commodity_futures_investment_advisor: 金融業：商品先物取引、商品投資顧問, other_financial: 金融業：その他, brokerage_insurance: 保険業：仲介、代理, other_insurance: 保険業：その他, real_estate_developer: 不動産業：ディベロッパー, real_estate_brokerage: 不動産業：売買、仲介, rent_coin_parking_management: 不動産業：賃貸、コインパーキング、管理, rental_office_co_working_space: 不動産業：レンタルオフィス、コワーキングスペース, rental_lease: レンタル業、リース業, cpa_tax_accountant: 士業：公認会計士事務所、税理士事務所, law_office: 士業：法律事務所, judicial_and_administrative_scrivener: 士業：司法書士事務所／行政書士事務所, labor_consultant: 士業：社会保険労務士事務所, other_profession: 士業：その他, business_consultant: 経営コンサルタント, academic_research_development: 学術・開発研究機関, advertising_agency: 広告代理店, advertising_planning_production: 広告企画／制作, design_development: ソフトウェア、アプリ開発業（受託）, apparel_industry_design: 服飾デザイン業、工業デザイン業, website_design: ウェブサイト制作（受託）, advertising_planning_design: 広告企画／制作業, other_design: その他、デザイン／制作, restaurants_coffee_shops: レストラン、喫茶店等の飲食店業, sale_of_lunch: 弁当の販売業, bread_confectionery_manufacture_sale: パン、菓子等の製造販売業, delivery_catering_mobile_catering: デリバリー業、ケータリング業、移動販売業, hotel_inn: 宿泊業：ホテル、旅館, homestay: 宿泊業：民泊, travel_agency: 旅行代理店業, leisure_sports_facility_management: レジャー、スポーツ等の施設運営業, show_event_management: ショー、イベント等の興行、イベント運営業, barber: ビューティ、ヘルスケア業：床屋、理容室, beauty_salon: ビューティ、ヘルスケア業：美容室, spa_sand_bath_sauna: ビューティ、ヘルスケア業：スパ、砂風呂、サウナ等, este_ail_salon: ビューティ、ヘルスケア業：その他、エステサロン、ネイルサロン等, bridal_planning_introduce_wedding: 冠婚葬祭業：ブライダルプランニング、結婚式場紹介等, memorial_ceremony_funeral: 冠婚葬祭業：メモリアルセレモニー、葬儀等, moving: 引っ越し業, courier_industry: 宅配業, house_maid_cleaning_agency: 家事代行サービス業：無店舗　ハウスメイド、掃除代行等, re_tailoring_clothes: 家事代行サービス業：店舗あり　衣類修理、衣類仕立て直し等, training_institute_management: 研修所等の施設運営業, tutoring_school: 学習塾、進学塾等の教育・学習支援業, music_calligraphy_abacus_classroom: 音楽教室、書道教室、そろばん教室等のの教育・学習支援業, english_school: 英会話スクール等の語学学習支援業, tennis_yoga_judo_school: テニススクール、ヨガ教室、柔道場等のスポーツ指導、支援業, culture_school: その他、カルチャースクール等の教育・学習支援業, seminar_planning_management: セミナー等の企画、運営業, hospital_clinic: 医療業：病院、一般診療所、クリニック等, dental_clinic: 医療業：歯科診療所, other_medical_services: 医療業：その他、医療サービス等, nursery: 福祉業：保育所等、児童向け施設型サービス, nursing_home: 福祉業：老人ホーム等、老人向け施設型サービス, rehabilitation_support_services: 福祉業：療育支援サービス等、障害者等向け施設型サービス, other_welfare: 福祉業：その他、施設型福祉サービス, visit_welfare_service: 福祉業：訪問型福祉サービス, recruitment_temporary_staffing: 人材紹介業、人材派遣業, life_related_recruitment_temporary_staffing: 生活関連サービスの人材紹介業、人材派遣業, car_maintenance_car_repair: 自動車整備業、自動車修理業, machinery_equipment_maintenance_repair: 機械機器類の整備業、修理業, cleaning_maintenance_building_management: 清掃業、メンテナンス業、建物管理業, security: 警備業, other_services: その他のサービス業, npo: NPO, general_incorporated_association: 一般社団法人, general_incorporated_foundation: 一般財団法人, other_association: その他組織) */
            industry_code: "agriculture" | "forestry" | "fishing_industry" | "mining" | "civil_contractors" | "pavement" | "carpenter" | "renovation" | "electrical_plumbing" | "grocery" | "machinery_manufacturing" | "printing" | "other_manufacturing" | "software_development" | "system_development" | "survey_analysis" | "server_management" | "website_production" | "online_service_management" | "online_advertising_agency" | "online_advertising_planning_production" | "online_media_management" | "portal_site_management" | "other_it_services" | "transport_delivery" | "delivery" | "other_transportation_logistics" | "other_wholesale" | "clothing_wholesale_fiber" | "food_wholesale" | "entrusted_development_wholesale" | "online_shop" | "fashion_grocery_store" | "food_store" | "entrusted_store" | "other_store" | "financial_instruments_exchange" | "commodity_futures_investment_advisor" | "other_financial" | "brokerage_insurance" | "other_insurance" | "real_estate_developer" | "real_estate_brokerage" | "rent_coin_parking_management" | "rental_office_co_working_space" | "rental_lease" | "cpa_tax_accountant" | "law_office" | "judicial_and_administrative_scrivener" | "labor_consultant" | "other_profession" | "business_consultant" | "academic_research_development" | "advertising_agency" | "advertising_planning_production" | "design_development" | "apparel_industry_design" | "website_design" | "advertising_planning_design" | "other_design" | "restaurants_coffee_shops" | "sale_of_lunch" | "bread_confectionery_manufacture_sale" | "delivery_catering_mobile_catering" | "hotel_inn" | "homestay" | "travel_agency" | "leisure_sports_facility_management" | "show_event_management" | "barber" | "beauty_salon" | "spa_sand_bath_sauna" | "este_ail_salon" | "bridal_planning_introduce_wedding" | "memorial_ceremony_funeral" | "moving" | "courier_industry" | "house_maid_cleaning_agency" | "re_tailoring_clothes" | "training_institute_management" | "tutoring_school" | "music_calligraphy_abacus_classroom" | "english_school" | "tennis_yoga_judo_school" | "culture_school" | "seminar_planning_management" | "hospital_clinic" | "dental_clinic" | "other_medical_services" | "nursery" | "nursing_home" | "rehabilitation_support_services" | "other_welfare" | "visit_welfare_service" | "recruitment_temporary_staffing" | "life_related_recruitment_temporary_staffing" | "car_maintenance_car_repair" | "machinery_equipment_maintenance_repair" | "cleaning_maintenance_building_management" | "security" | "other_services" | "npo" | "general_incorporated_association" | "general_incorporated_foundation" | "other_association";
            /**
             * 請求書レイアウト
             * * `default_classic` - レイアウト１/クラシック (デフォルト)
             *
             * * `standard_classic` - レイアウト２/クラシック
             *
             * * `envelope_classic` - 封筒１/クラシック
             *
             * * `carried_forward_standard_classic` - レイアウト３（繰越金額欄あり）/クラシック
             *
             * * `carried_forward_envelope_classic` - 封筒２（繰越金額欄あり）/クラシック
             *
             * * `default_modern` - レイアウト１/モダン
             *
             * * `standard_modern` - レイアウト２/モダン
             *
             * * `envelope_modern` - 封筒/モダン
             */
            invoice_layout: "default_classic" | "standard_classic" | "envelope_classic" | "carried_forward_standard_classic" | "carried_forward_envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
            /** マイナスの表示方法（0: -、 1: △） */
            minus_format: number;
            /** 事業所の正式名称 (100文字以内) */
            name: string | null;
            /** 正式名称フリガナ (100文字以内) */
            name_kana: string | null;
            /** 電話番号１ */
            phone1: string;
            /** 電話番号２ */
            phone2: string | null;
            /** 都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            prefecture_code: number | null;
            /** プライベート資金/役員資金（false: 使用しない、true: 使用する） */
            private_settlement: boolean;
            /** ユーザーの権限 */
            role: "admin" | "simple_accounting" | "self_only" | "read_only";
            /** 市区町村・番地 */
            street_name1: string;
            /** 建物名・部屋番号など */
            street_name2: string;
            /** 源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない） */
            tax_at_source_calc_type: number;
            /** 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P）） */
            txn_number_format: "not_used" | "digits" | "alnum";
            /** 取引先コードの利用設定（true: 有効、 false: 無効） */
            use_partner_code: boolean;
            /** 仕訳承認フロー（enable: 有効、 disable: 無効） */
            workflow_setting: "enable" | "disable";
            /** 郵便番号 */
            zipcode: string;
        };
    }
    export interface dealCreateParams {
        /** 事業所ID */
        company_id: number;
        details: {
            /** 勘定科目ID */
            account_item_id: number;
            /** 取引金額（税込で指定してください） */
            amount: number;
            /** 備考 */
            description?: string;
            /** 品目ID */
            item_id?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /** 税区分コード */
            tax_code: number;
            /** 消費税額（指定しない場合は自動で計算されます） */
            vat?: number;
        }[];
        /** 支払期日(yyyy-mm-dd) */
        due_date?: string;
        /** 発生日 (yyyy-mm-dd) */
        issue_date: string;
        /** 取引先コード */
        partner_code?: string;
        /** 取引先ID */
        partner_id?: number;
        /** 支払行一覧（配列）：未指定の場合、未決済の取引を作成します。 */
        payments?: {
            /** 支払金額：payments指定時は必須 */
            amount: number;
            /** 支払日：payments指定時は必須 */
            date: string;
            /** 口座ID（from_walletable_typeがprivate_account_itemの場合は勘定科目ID）：payments指定時は必須 */
            from_walletable_id: number;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet, プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）: private_account_item)：payments指定時は必須 */
            from_walletable_type: "bank_account" | "credit_card" | "wallet" | "private_account_item";
        }[];
        /** 証憑ファイルID（ファイルボックスのファイルID）（配列） */
        receipt_ids?: number[];
        /** 管理番号 */
        ref_number?: string;
        /** 収支区分 (収入: income, 支出: expense) */
        type: "income" | "expense";
    }
    export interface dealCreateResponse {
        deal: {
            /** 金額 */
            amount: number;
            /** 事業所ID */
            company_id: number;
            /** 取引の明細行 */
            details?: {
                /** 勘定科目ID */
                account_item_id: number;
                /** 取引金額 */
                amount: number;
                /** 備考 */
                description?: string;
                /** 貸借（貸方: credit, 借方: debit） */
                entry_side: "credit" | "debit";
                /** 取引行ID */
                id: number;
                /** 品目ID */
                item_id?: number | null;
                /** 部門ID */
                section_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** メモタグID */
                tag_ids?: number[];
                /** 税区分コード */
                tax_code: number;
                /** 消費税額 */
                vat: number;
            }[];
            /** 支払金額 */
            due_amount?: number;
            /** 支払期日 (yyyy-mm-dd) */
            due_date?: string;
            /** 取引ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先ID */
            partner_id: number;
            /** 取引の支払行 */
            payments?: {
                /** 支払金額 */
                amount: number;
                /** 支払日 */
                date: string;
                /** 口座ID（from_walletable_typeがprivate_account_itemの場合は勘定科目ID） */
                from_walletable_id?: number;
                /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet, プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）: private_account_item) */
                from_walletable_type?: "bank_account" | "credit_card" | "wallet" | "private_account_item";
                /** 取引行ID */
                id: number;
            }[];
            /** 管理番号 */
            ref_number?: string;
            /** 決済状況 (未決済: unsettled, 完了: settled) */
            status: "unsettled" | "settled";
            /** 収支区分 (収入: income, 支出: expense) */
            type?: "income" | "expense";
        };
    }
    export interface dealResponse {
        deal: {
            /** 金額 */
            amount: number;
            /** 事業所ID */
            company_id: number;
            /** 取引の明細行 */
            details?: {
                /** 勘定科目ID */
                account_item_id: number;
                /** 取引金額 */
                amount: number;
                /** 備考 */
                description?: string;
                /** 貸借（貸方: credit, 借方: debit） */
                entry_side: "credit" | "debit";
                /** 取引行ID */
                id: number;
                /** 品目ID */
                item_id?: number | null;
                /** 部門ID */
                section_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** メモタグID */
                tag_ids?: number[];
                /** 税区分コード */
                tax_code: number;
                /** 消費税額 */
                vat: number;
            }[];
            /** 支払金額 */
            due_amount?: number;
            /** 支払期日 (yyyy-mm-dd) */
            due_date?: string;
            /** 取引ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先ID */
            partner_id: number;
            /** 取引の支払行 */
            payments?: {
                /** 支払金額 */
                amount: number;
                /** 支払日 */
                date: string;
                /** 口座ID（from_walletable_typeがprivate_account_itemの場合は勘定科目ID） */
                from_walletable_id?: number;
                /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet, プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）: private_account_item) */
                from_walletable_type?: "bank_account" | "credit_card" | "wallet" | "private_account_item";
                /** 取引行ID */
                id: number;
            }[];
            /** 証憑ファイル（ファイルボックスのファイル） */
            receipts?: {
                /** 作成日時（ISO8601形式） */
                created_at: string;
                /** メモ */
                description?: string;
                /**
                 * ファイルのダウンロードURL（freeeにログインした状態でのみ閲覧可能です。）
                 * <br>
                 * <br>
                 * file_srcは廃止予定の属性になります。<br>
                 * file_srcに替わり、証憑ファイル（ファイルボックスのファイル）のダウンロード APIをご利用ください。<br>
                 * 証憑ファイル（ファイルボックスのファイル）のダウンロードAPIを利用することで、以下のようになります。
                 * <ul>
                 *   <li>アプリケーション利用者はfreee APIアプリケーションにログインしていれば、証憑ダウンロード毎にfreeeに改めてログインすることなくファイルが参照できるようになります。</li>
                 * </ul>
                 */
                file_src: string;
                /** 証憑ファイルID（ファイルボックスのファイルID） */
                id: number;
                /** 発生日 */
                issue_date?: string;
                /** MIMEタイプ */
                mime_type: string;
                /** アップロード元種別 */
                origin: "unknown" | "web" | "mobile_camera" | "mobile_album" | "scansnap" | "scannable" | "dropbox" | "mail" | "safety_contact_file" | "public_api";
                /** ステータス(unconfirmed:確認待ち、confirmed:確認済み、deleted:削除済み、ignored:無視) */
                status: "unconfirmed" | "confirmed" | "deleted" | "ignored";
                user: {
                    /** 表示名 */
                    display_name?: string | null;
                    /** メールアドレス */
                    email: string;
                    /** ユーザーID */
                    id: number;
                };
            }[];
            /** 管理番号 */
            ref_number?: string;
            /** 取引の+更新行 */
            renews?: {
                /** +更新の明細行一覧（配列） */
                details: {
                    /** 勘定科目ID */
                    account_item_id: number;
                    /** 金額（税込で指定してください） */
                    amount: number;
                    /** 備考 */
                    description?: string | null;
                    /** 貸借(貸方: credit, 借方: debit) */
                    entry_side: "credit" | "debit";
                    /** +更新の明細行ID */
                    id: number;
                    /** 品目ID */
                    item_id?: number | null;
                    /** 部門ID */
                    section_id?: number | null;
                    /** セグメント１ID */
                    segment_1_tag_id?: number | null;
                    /** セグメント２ID */
                    segment_2_tag_id?: number | null;
                    /** セグメント３ID */
                    segment_3_tag_id?: number | null;
                    tag_ids: number[];
                    /** 税区分コード */
                    tax_code: number;
                    /** 消費税額（指定しない場合は自動で計算されます） */
                    vat: number;
                }[];
                /** +更新行ID */
                id: number;
                /** +更新の対象行ID */
                renew_target_id: number;
                /** +更新の対象行タイプ */
                renew_target_type: "detail" | "accrual" | "renew";
                /** 更新日 (yyyy-mm-dd) */
                update_date: string;
            }[];
            /** 決済状況 (未決済: unsettled, 完了: settled) */
            status: "unsettled" | "settled";
            /** 収支区分 (収入: income, 支出: expense) */
            type?: "income" | "expense";
        };
    }
    export interface dealUpdateParams {
        /** 事業所ID */
        company_id: number;
        details: {
            /** 勘定科目ID */
            account_item_id: number;
            /** 取引金額（税込で指定してください） */
            amount: number;
            /** 備考 */
            description?: string;
            /** 取引行ID: 既存取引行を更新する場合に指定します。IDを指定しない取引行は、新規行として扱われ追加されます。また、detailsに含まれない既存の取引行は削除されます。更新後も残したい行は、必ず取引行IDを指定してdetailsに含めてください。 */
            id?: number;
            /** 品目ID */
            item_id?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /** 税区分コード */
            tax_code: number;
            /** 消費税額（指定しない場合は自動で計算されます） */
            vat?: number;
        }[];
        /** 支払期日(yyyy-mm-dd) */
        due_date?: string;
        /** 発生日 (yyyy-mm-dd) */
        issue_date: string;
        /** 取引先コード */
        partner_code?: string;
        /** 取引先ID */
        partner_id?: number;
        /** 証憑ファイルID（ファイルボックスのファイルID）（配列） */
        receipt_ids?: number[] | null;
        /** 管理番号 */
        ref_number?: string;
        /** 収支区分 (収入: income, 支出: expense) */
        type: "income" | "expense";
    }
    export interface expenseApplicationActionCreateParams {
        /** 操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す) */
        approval_action: "approve" | "force_approve" | "cancel" | "reject" | "feedback" | "force_feedback";
        /** 事業所ID */
        company_id: number;
        /** 次ステップの承認者のユーザーID */
        next_approver_id?: number | null;
        /** 対象round。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。経費申請の取得APIレスポンス.current_roundを送信してください。 */
        target_round: number;
        /** 対象承認ステップID 経費申請の取得APIレスポンス.current_step_idを送信してください。 */
        target_step_id: number;
    }
    export interface expenseApplicationCreateParams {
        /**
         * 申請経路ID<br>
         * <ul>
         *     <li>経費申請のステータスを申請中として作成する場合は、必ず指定してください。</li>
         *     <li>指定する申請経路IDは、申請経路APIを利用して取得してください。</li>
         *     <li>
         *         未指定の場合は、基本経路を設定している事業所では基本経路が、基本経路を設定していない事業所では利用可能な申請経路の中から最初の申請経路が自動的に使用されます。
         *         <ul>
         *            <li>意図しない申請経路を持った経費申請の作成を防ぐために、使用する申請経路IDを指定することを推奨します。</li>
         *         </ul>
         *     </li>
         *     <li>
         *         ベーシックプランの事業所では以下のデフォルトで用意された申請経路のみ指定できます
         *         <ul>
         *         <li>指定なし</li>
         *         <li>承認者を指定</li>
         *         </ul>
         *     </li>
         * </ul>
         */
        approval_flow_route_id?: number;
        /**
         * 承認者のユーザーID<br>
         * 「承認者を指定」の経路を申請経路として使用する場合に指定してください。<br>
         * 指定する承認者のユーザーIDは、申請経路APIを利用して取得してください。
         */
        approver_id?: number;
        /** 事業所ID */
        company_id: number;
        /** 備考 (10000文字以内) */
        description?: string;
        /**
         * 経費申請のステータス<br>
         * falseを指定した時は申請中（in_progress）で経費申請を作成します。<br>
         * trueを指定した時は下書き（draft）で経費申請を作成します。<br>
         * 未指定の時は下書きとみなして経費申請を作成します。
         */
        draft?: boolean;
        expense_application_lines: {
            /** 金額 */
            amount?: number;
            /** 内容 (250文字以内) */
            description?: string;
            /** 経費科目ID */
            expense_application_line_template_id?: number;
            /** 証憑ファイルID（ファイルボックスのファイルID） */
            receipt_id?: number;
            /** 日付 (yyyy-mm-dd) */
            transaction_date?: string;
        }[];
        /** 申請日 (yyyy-mm-dd) */
        issue_date: string;
        /**
         * 親申請ID(法人向けプロフェッショナル, 法人向け エンタープライズプラン)<br>
         * <ul>
         *   <li>承認済みの既存各種申請IDのみ指定可能です。</li>
         *   <li>各種申請一覧APIを利用して取得してください。</li>
         * </ul>
         */
        parent_id?: number;
        /** 部門ID */
        section_id?: number;
        /**
         * セグメント１ID(法人向けプロフェッショナル, 法人向けエンタープライズプラン)<br>
         * セグメントタグ一覧APIを利用して取得してください。<br>
         * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
         */
        segment_1_tag_id?: number;
        /**
         * セグメント２ID(法人向け エンタープライズプラン)<br>
         * セグメントタグ一覧APIを利用して取得してください。<br>
         * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
         */
        segment_2_tag_id?: number;
        /**
         * セグメント３ID(法人向け エンタープライズプラン)<br>
         * セグメントタグ一覧APIを利用して取得してください。<br>
         * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
         */
        segment_3_tag_id?: number;
        /** メモタグID */
        tag_ids?: number[];
        /** 申請タイトル (250文字以内) */
        title: string;
    }
    export interface expenseApplicationLineTemplateParams {
        /** 勘定科目ID */
        account_item_id: number;
        /** 事業所ID */
        company_id: number;
        /** 経費科目の説明 (1000文字以内) */
        description?: string;
        /** 品目ID */
        item_id?: number;
        /** 内容の補足 (1000文字以内) */
        line_description?: string;
        /** 経費科目名 (100文字以内) */
        name: string;
        /** 添付ファイルの必須/任意 */
        required_receipt?: boolean;
        /** 税区分コード（税区分のdisplay_categoryがtax_5: 5%表示の税区分, tax_r8: 軽減税率8%表示の税区分に該当するtax_codeのみ利用可能です。税区分のdisplay_categoryは /taxes/companies/{:company_id}のAPIから取得可能です。） */
        tax_code: number;
    }
    export interface expenseApplicationLineTemplateResponse {
        expense_application_line_template: {
            /** 勘定科目ID */
            account_item_id?: number;
            /** 勘定科目名 */
            account_item_name: string;
            /** 経費科目の説明 */
            description?: string;
            /** 経費科目ID */
            id: number;
            /** 内容の補足 */
            line_description?: string;
            /** 経費科目名 */
            name: string;
            /** 添付ファイルの必須/任意 */
            required_receipt?: boolean;
            /** 税区分コード */
            tax_code?: number;
            /** 税区分名 */
            tax_name: string;
        };
    }
    export interface expenseApplicationResponse {
        expense_application: {
            /** 申請者のユーザーID */
            applicant_id: number;
            /** 申請No. */
            application_number: string;
            /** 経費申請の承認履歴（配列） */
            approval_flow_logs: {
                /** 操作(apply: 申請, approve: 承認, force_approve: 代理承認, cancel: 取消, reject: 却下, feedback: 差戻し) */
                action: "apply" | "approve" | "force_approve" | "cancel" | "reject" | "feedback";
                /** 更新日時(ISO8601形式) */
                updated_at: string;
                /** ユーザーID */
                user_id: number;
            }[];
            /** 申請経路ID */
            approval_flow_route_id: number;
            /**
             * 承認者（配列）
             *   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。
             *   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、
             *   approversはレスポンスに含まれるようになります。
             *   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。
             */
            approvers: {
                /** 代理承認済みかどうか */
                is_force_action: boolean;
                /**
                 * 承認ステップの承認方法
                 * * ` predefined_user` - メンバー指定 (1人),
                 * * ` selected_user` - 申請時にメンバー指定
                 * * ` unspecified` - 指定なし
                 * * ` and_resource` - メンバー指定 (複数、全員の承認),
                 * * ` or_resource` - メンバー指定 (複数、1人の承認)
                 * * ` and_position` - 役職指定 (複数、全員の承認)
                 * * ` or_position` - 役職指定 (複数、1人の承認)
                 */
                resource_type: "predefined_user" | "selected_user" | "unspecified" | "and_resource" | "or_resource" | "and_position" | "or_position";
                /**
                 * 承認者の承認状態
                 * * `initial` - 初期状態
                 * * `approved` - 承認済
                 * * `rejected` - 却下
                 * * `feedback` - 差戻し
                 */
                status: "initial" | "approved" | "rejected" | "feedback";
                /** 承認ステップID */
                step_id: number;
                /**
                 * 承認者のユーザーID
                 * 下記の場合はnullになります。
                 * <ul>
                 *   <li>resource_type:selected_userの場合で承認者未指定時</li>
                 *   <li>resource_type:or_positionで前stepで部門未指定の場合</li>
                 * </ul>
                 */
                user_id: number | null;
            }[];
            /** 経費申請のコメント一覧（配列） */
            comments: {
                /** コメント内容 */
                comment: string;
                /** コメント日時(ISO8601形式) */
                posted_at: string;
                /** ユーザーID */
                user_id: number;
            }[];
            /** 事業所ID */
            company_id: number;
            /** 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 */
            current_round: number;
            /** 現在承認ステップID */
            current_step_id: number | null;
            /** 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) */
            deal_id: number | null;
            /** 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち) */
            deal_status: ("settled" | "unsettled") | null;
            /** 備考 */
            description?: string | null;
            /** 経費申請の項目行一覧（配列） */
            expense_application_lines: {
                /** 金額 */
                amount?: number;
                /** 内容 */
                description?: string | null;
                /** 経費科目ID */
                expense_application_line_template_id?: number | null;
                /** 経費申請の項目行ID */
                id: number;
                /** 証憑ファイルID（ファイルボックスのファイルID） */
                receipt_id?: number | null;
                /** 日付 (yyyy-mm-dd) */
                transaction_date?: string | null;
            }[];
            /** 経費申請ID */
            id: number;
            /** 申請日 (yyyy-mm-dd) */
            issue_date: string;
            /** 部門ID */
            section_id?: number | null;
            /** セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。 */
            segment_1_tag_id?: number | null;
            /** セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。 */
            segment_2_tag_id?: number | null;
            /** セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。 */
            segment_3_tag_id?: number | null;
            /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
            status: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
            /** メモタグID */
            tag_ids?: number[];
            /** 申請タイトル */
            title: string;
            /** 合計金額 */
            total_amount?: number;
        };
    }
    export interface expenseApplicationUpdateParams {
        /**
         * 申請経路ID<br>
         * <ul>
         *     <li>経費申請のステータスを申請中として作成する場合は、必ず指定してください。</li>
         *     <li>指定する申請経路IDは、申請経路APIを利用して取得してください。</li>
         *     <li>
         *         未指定の場合は、基本経路を設定している事業所では基本経路が、基本経路を設定していない事業所では利用可能な申請経路の中から最初の申請経路が自動的に使用されます。
         *         <ul>
         *           <li>意図しない申請経路を持った経費申請の作成を防ぐために、使用する申請経路IDを指定することを推奨します。</li>
         *         </ul>
         *     </li>
         *     <li>
         *         ベーシックプランの事業所では以下のデフォルトで用意された申請経路のみ指定できます
         *         <ul>
         *         <li>指定なし</li>
         *         <li>承認者を指定</li>
         *         </ul>
         *     </li>
         * </ul>
         */
        approval_flow_route_id?: number;
        /**
         * 承認者のユーザーID<br>
         * 指定する承認者のユーザーIDは、申請経路APIを利用して取得してください。
         */
        approver_id?: number;
        /** 事業所ID */
        company_id: number;
        /** 備考 (10000文字以内) */
        description?: string;
        /**
         * 経費申請のステータス<br>
         * falseを指定した時は申請中（in_progress）で経費申請を更新します。<br>
         * trueを指定した時は下書き（draft）で経費申請を更新します。<br>
         * 未指定の時は下書きとみなして経費申請を更新します。
         */
        draft?: boolean;
        expense_application_lines: {
            /** 金額 */
            amount?: number;
            /** 内容 (250文字以内) */
            description?: string;
            /** 経費科目ID */
            expense_application_line_template_id?: number;
            /** 経費申請の項目行ID: 既存項目行を更新する場合に指定します。IDを指定しない項目行は、新規行として扱われ追加されます。また、expense_application_linesに含まれない既存の項目行は削除されます。更新後も残したい行は、必ず経費申請の項目行IDを指定してexpense_application_linesに含めてください。 */
            id?: number;
            /** 証憑ファイルID（ファイルボックスのファイルID） */
            receipt_id?: number;
            /** 日付 (yyyy-mm-dd) */
            transaction_date?: string;
        }[];
        /** 申請日 (yyyy-mm-dd) */
        issue_date: string;
        /** 部門ID */
        section_id?: number;
        /**
         * セグメント１ID(法人向けプロフェッショナル, 法人向けエンタープライズプラン)<br>
         * セグメントタグ一覧APIを利用して取得してください。<br>
         * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
         */
        segment_1_tag_id?: number;
        /**
         * セグメント２ID(法人向け エンタープライズプラン)<br>
         * セグメントタグ一覧APIを利用して取得してください。<br>
         * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
         */
        segment_2_tag_id?: number;
        /**
         * セグメント３ID(法人向け エンタープライズプラン)<br>
         * セグメントタグ一覧APIを利用して取得してください。<br>
         * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
         */
        segment_3_tag_id?: number;
        /** メモタグID */
        tag_ids?: number[];
        /** 申請タイトル (250文字以内) */
        title: string;
    }
    export interface expenseApplicationsIndexResponse {
        expense_applications: {
            /** 申請者のユーザーID */
            applicant_id: number;
            /** 申請No. */
            application_number: string;
            /** 事業所ID */
            company_id: number;
            /** 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 */
            current_round?: number;
            /** 現在承認ステップID */
            current_step_id?: number | null;
            /** 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) */
            deal_id: number | null;
            /** 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:精算済み, unsettled:清算待ち) */
            deal_status: ("settled" | "unsettled") | null;
            /** 備考 */
            description?: string;
            /** 経費申請の項目行一覧（配列） */
            expense_application_lines: {
                /** 金額 */
                amount?: number;
                /** 内容 */
                description?: string;
                /** 経費科目ID */
                expense_application_line_template_id?: number;
                /** 経費申請の項目行ID */
                id: number;
                /** 証憑ファイルID（ファイルボックスのファイルID） */
                receipt_id?: number;
                /** 日付 (yyyy-mm-dd) */
                transaction_date?: string;
            }[];
            /** 経費申請ID */
            id: number;
            /** 申請日 (yyyy-mm-dd) */
            issue_date: string;
            /** 部門ID */
            section_id?: number | null;
            /** セグメント１ID */
            segment_1_tag_id?: number | null;
            /** セグメント２ID */
            segment_2_tag_id?: number | null;
            /** セグメント３ID */
            segment_3_tag_id?: number | null;
            /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
            status: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
            /** メモタグID */
            tag_ids?: number[];
            /** 申請タイトル */
            title: string;
            /** 合計金額 */
            total_amount?: number;
        }[];
    }
    export interface fiscal_years {
        /** 月次償却（0: しない、1: する） */
        depreciation_record_method: number;
        /** 期末日 */
        end_date?: string;
        /** 固定資産の控除法（true: 間接控除法、false: 直接控除法） */
        indirect_write_off_method: boolean;
        /** 不動産所得使用区分（0: 一般、3: 一般/不動産） ※個人事業主のみ設定可能 */
        return_code: number;
        /** 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など */
        sales_tax_business_code: number;
        /** 期首日 */
        start_date?: string;
        /** 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理） */
        tax_account_method: number;
        /** 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入） */
        tax_fraction: number;
        /** 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除）） */
        tax_method: number;
        /** 製造業向け機能（true: 使用する、false: 使用しない） */
        use_industry_template: boolean;
    }
    export interface forbiddenError {
        message?: string;
        messages?: string;
    }
    export interface internalServerError {
        errors?: {
            messages: string[];
            type: "status" | "validation" | "error";
        }[];
        status_code?: number;
    }
    export interface invoiceCreateParams {
        /** 売上計上日 */
        booking_date?: string;
        /** 市区町村・番地 (デフォルトは事業所設定情報が補完されます) */
        company_address1?: string;
        /** 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます) */
        company_address2?: string;
        /** 事業所担当者名 (デフォルトは請求書テンプレート情報が補完されます) */
        company_contact_info?: string;
        /** 事業所ID */
        company_id: number;
        /** 事業所名 (デフォルトは事業所設定情報が補完されます) */
        company_name?: string;
        /** 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトは事業所設定情報が補完されます) */
        company_prefecture_code?: number;
        /** 郵便番号 (デフォルトは事業所設定情報が補完されます) */
        company_zipcode?: string;
        /** 概要 */
        description?: string;
        /** 期日 (yyyy-mm-dd) */
        due_date?: string;
        /** 請求内容 */
        invoice_contents?: {
            /** 勘定科目ID */
            account_item_id?: number;
            /** 備考 */
            description?: string;
            /** 品目ID */
            item_id?: number;
            /** 順序 */
            order: number;
            /** 数量 */
            qty?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            tag_ids?: number[];
            /** 税区分コード */
            tax_code?: number;
            /**
             * 行の種類
             * <ul>
             * <li>normal、discountを指定する場合、account_item_id,tax_codeとunit_priceが必須となります。</li>
             * <li>normalを指定した場合、qtyが必須となります。</li>
             * </ul>
             */
            type: "normal" | "discount" | "text";
            /** 単位 */
            unit?: string;
            /** 単価 (tax_entry_method: inclusiveの場合は税込価格、tax_entry_method: exclusiveの場合は税抜価格となります) */
            unit_price?: number;
            /** 消費税額 */
            vat?: number | null;
        }[];
        /**
         * 請求書レイアウト
         * * `default_classic` - レイアウト１/クラシック (デフォルト)
         *
         * * `standard_classic` - レイアウト２/クラシック
         *
         * * `envelope_classic` - 封筒１/クラシック
         *
         * * `carried_forward_standard_classic` - レイアウト３（繰越金額欄あり）/クラシック
         *
         * * `carried_forward_envelope_classic` - 封筒２（繰越金額欄あり）/クラシック
         *
         * * `default_modern` - レイアウト１/モダン
         *
         * * `standard_modern` - レイアウト２/モダン
         *
         * * `envelope_modern` - 封筒/モダン
         */
        invoice_layout?: "default_classic" | "standard_classic" | "envelope_classic" | "carried_forward_standard_classic" | "carried_forward_envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
        /** 請求書番号 (デフォルト: 自動採番されます) */
        invoice_number?: string;
        /**
         * 請求書ステータス<br>
         * <ul>
         *   <li>draft: 下書き (デフォルト)</li>
         *   <li>(廃止予定) issue: 発行 (送付待ち (unsubmitted) と同じです。)</li>
         *   <li>unsubmitted: 送付待ち</li>
         *   <li>submitted: 送付済み</li>
         * </ul>
         * issue, unsubmitted, submitted は請求書承認ワークフローを利用している場合は指定できません。
         */
        invoice_status?: "draft" | "issue" | "unsubmitted" | "submitted";
        /** 請求日 (yyyy-mm-dd) */
        issue_date?: string;
        /** メッセージ (デフォルト: 下記の通りご請求申し上げます。) */
        message?: string;
        /** 備考 */
        notes?: string;
        /** 取引先市区町村・番地 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address1?: string | null;
        /** 取引先建物名・部屋番号など (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address2?: string | null;
        /** 取引先コード */
        partner_code?: string | null;
        /** 取引先担当者名 */
        partner_contact_info?: string | null;
        /** 請求書に表示する取引先名 */
        partner_display_name: string;
        /** 取引先ID */
        partner_id?: number | null;
        /** 取引先都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_prefecture_code?: number | null;
        /** 敬称（御中、様、(空白)の3つから選択） */
        partner_title: string | null;
        /** 取引先郵便番号 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_zipcode?: string | null;
        /** 支払口座 */
        payment_bank_info?: string;
        /** 支払方法 (振込: transfer, 引き落とし: direct_debit) */
        payment_type?: "transfer" | "direct_debit";
        /** 請求書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)) */
        tax_entry_method?: "inclusive" | "exclusive";
        /** タイトル (デフォルト: 請求書) */
        title?: string;
        /** 振込専用口座の利用(利用しない: not_use(デフォルト), 利用する: use) */
        use_virtual_transfer_account?: "not_use" | "use";
    }
    export interface invoiceIndexResponse {
        invoices: {
            /** 売上計上日 */
            booking_date?: string | null;
            /** 市区町村・番地 */
            company_address1?: string | null;
            /** 建物名・部屋番号など */
            company_address2?: string | null;
            /** 事業所担当者名 */
            company_contact_info?: string | null;
            /** 事業所ID */
            company_id: number;
            /** 事業所名 */
            company_name: string;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            company_prefecture_code?: number | null;
            /** 都道府県 */
            company_prefecture_name?: string | null;
            /** 郵便番号 */
            company_zipcode?: string | null;
            /** 取引ID (invoice_statusがsubmitted, unsubmittedの時IDが表示されます) */
            deal_id?: number | null;
            /** 概要 */
            description?: string | null;
            /** 期日 (yyyy-mm-dd) */
            due_date?: string | null;
            /** 請求書ID */
            id: number;
            /** 請求内容 */
            invoice_contents?: {
                /** 勘定科目ID */
                account_item_id: number | null;
                /** 勘定科目名 */
                account_item_name: string | null;
                /** 金額 */
                amount: number;
                /** 備考 */
                description: string | null;
                /** 請求内容ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 品目 */
                item_name: string | null;
                /** 順序 */
                order: number;
                /** 数量 */
                qty: number;
                /** 軽減税率税区分（true: 対象、false: 対象外） */
                reduced_vat: boolean;
                /** 部門ID */
                section_id: number | null;
                /** 部門 */
                section_name: string | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_name?: string | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント２ */
                segment_2_tag_name?: string | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** セグメント３ */
                segment_3_tag_name?: string | null;
                tag_ids: number[];
                tag_names: string[];
                /** 税区分コード */
                tax_code: number | null;
                /** 行の種類 */
                type: "normal" | "discount" | "text";
                /** 単位 */
                unit: string | null;
                /** 単価 */
                unit_price: number;
                /** 消費税額 */
                vat: number;
            }[];
            /**
             * 請求書レイアウト
             * * `default_classic` - レイアウト１/クラシック (デフォルト)
             *
             * * `standard_classic` - レイアウト２/クラシック
             *
             * * `envelope_classic` - 封筒１/クラシック
             *
             * * `carried_forward_standard_classic` - レイアウト３（繰越金額欄あり）/クラシック
             *
             * * `carried_forward_envelope_classic` - 封筒２（繰越金額欄あり）/クラシック
             *
             * * `default_modern` - レイアウト１/モダン
             *
             * * `standard_modern` - レイアウト２/モダン
             *
             * * `envelope_modern` - 封筒/モダン
             */
            invoice_layout: "default_classic" | "standard_classic" | "envelope_classic" | "carried_forward_standard_classic" | "carried_forward_envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
            /** 請求書番号 */
            invoice_number: string;
            /** 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, submitted: 送付済み, unsubmitted: 請求書の承認フローが無効の場合のみ、unsubmitted（送付待ち）の値をとります) */
            invoice_status: "draft" | "applying" | "remanded" | "rejected" | "approved" | "submitted" | "unsubmitted";
            /** 請求日 (yyyy-mm-dd) */
            issue_date: string;
            /** メール送信日時(最新) */
            mail_sent_at?: string | null;
            /** メッセージ */
            message?: string | null;
            /** 備考 */
            notes?: string | null;
            /** 市区町村・番地 */
            partner_address1?: string | null;
            /** 建物名・部屋番号など */
            partner_address2?: string | null;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先担当者名 */
            partner_contact_info?: string | null;
            /** 請求書に表示する取引先名 */
            partner_display_name?: string | null;
            /** 取引先ID */
            partner_id: number | null;
            /** 取引先名 */
            partner_name?: string | null;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            partner_prefecture_code?: number | null;
            /** 都道府県 */
            partner_prefecture_name?: string | null;
            /** 敬称（御中、様、(空白)の3つから選択） */
            partner_title?: string | null;
            /** 郵便番号 */
            partner_zipcode?: string | null;
            /** 支払口座 */
            payment_bank_info?: string | null;
            /** 入金日 */
            payment_date?: string | null;
            /** 入金ステータス  (unsettled: 入金待ち, settled: 入金済み) */
            payment_status?: "" | "unsettled" | "settled";
            /** 支払方法 (振込: transfer, 引き落とし: direct_debit) */
            payment_type: "" | "transfer" | "direct_debit";
            /** 郵送ステータス(unrequested: リクエスト前, preview_registered: プレビュー登録, preview_failed: プレビュー登録失敗, ordered: 注文中, order_failed: 注文失敗, printing: 印刷中, canceled: キャンセル, posted: 投函済み) */
            posting_status: "" | "unrequested" | "preview_registered" | "preview_failed" | "ordered" | "order_failed" | "printing" | "canceled" | "posted";
            /** 小計 */
            sub_total?: number;
            /** 請求書の消費税計算方法(inclusive: 内税, exclusive: 外税) */
            tax_entry_method: "" | "inclusive" | "exclusive";
            /** タイトル */
            title?: string | null;
            /** 合計金額 */
            total_amount: number;
            total_amount_per_vat_rate: {
                /** 軽減税率8%の税込み金額合計 */
                reduced_vat_8: number;
                /** 税率10%の税込み金額合計 */
                vat_10: number;
                /** 税率5%の税込み金額合計 */
                vat_5: number;
                /** 税率8%の税込み金額合計 */
                vat_8: number;
            };
            /** 合計金額 */
            total_vat?: number;
            /** Web共有取引先確認日時(最新) */
            web_confirmed_at?: string | null;
            /** Web共有ダウンロード日時(最新) */
            web_downloaded_at?: string | null;
            /** Web共有日時(最新) */
            web_published_at?: string | null;
        }[];
    }
    export interface invoiceResponse {
        invoice: {
            /** 売上計上日 */
            booking_date?: string | null;
            /** 市区町村・番地 */
            company_address1?: string | null;
            /** 建物名・部屋番号など */
            company_address2?: string | null;
            /** 事業所担当者名 */
            company_contact_info?: string | null;
            /** 事業所ID */
            company_id: number;
            /** 事業所名 */
            company_name: string;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            company_prefecture_code?: number | null;
            /** 都道府県 */
            company_prefecture_name?: string | null;
            /** 郵便番号 */
            company_zipcode?: string | null;
            /** 取引ID (invoice_statusがsubmitted, unsubmittedの時IDが表示されます) */
            deal_id?: number | null;
            /** 概要 */
            description?: string | null;
            /** 期日 (yyyy-mm-dd) */
            due_date?: string | null;
            /** 請求書ID */
            id: number;
            /** 請求内容 */
            invoice_contents?: {
                /** 勘定科目ID */
                account_item_id: number | null;
                /** 勘定科目名 */
                account_item_name: string | null;
                /** 金額 */
                amount: number;
                /** 備考 */
                description: string | null;
                /** 請求内容ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 品目 */
                item_name: string | null;
                /** 順序 */
                order: number;
                /** 数量 */
                qty: number;
                /** 軽減税率税区分（true: 対象、false: 対象外） */
                reduced_vat: boolean;
                /** 部門ID */
                section_id: number | null;
                /** 部門 */
                section_name: string | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_name?: string | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント２ */
                segment_2_tag_name?: string | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** セグメント３ */
                segment_3_tag_name?: string | null;
                tag_ids: number[];
                tag_names: string[];
                /** 税区分コード */
                tax_code: number | null;
                /** 行の種類 */
                type: "normal" | "discount" | "text";
                /** 単位 */
                unit: string | null;
                /** 単価 */
                unit_price: number;
                /** 消費税額 */
                vat: number;
            }[];
            /**
             * 請求書レイアウト
             * * `default_classic` - レイアウト１/クラシック (デフォルト)
             *
             * * `standard_classic` - レイアウト２/クラシック
             *
             * * `envelope_classic` - 封筒１/クラシック
             *
             * * `carried_forward_standard_classic` - レイアウト３（繰越金額欄あり）/クラシック
             *
             * * `carried_forward_envelope_classic` - 封筒２（繰越金額欄あり）/クラシック
             *
             * * `default_modern` - レイアウト１/モダン
             *
             * * `standard_modern` - レイアウト２/モダン
             *
             * * `envelope_modern` - 封筒/モダン
             */
            invoice_layout: "default_classic" | "standard_classic" | "envelope_classic" | "carried_forward_standard_classic" | "carried_forward_envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
            /** 請求書番号 */
            invoice_number: string;
            /** 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, submitted: 送付済み, unsubmitted: 請求書の承認フローが無効の場合のみ、unsubmitted（送付待ち）の値をとります) */
            invoice_status: "draft" | "applying" | "remanded" | "rejected" | "approved" | "submitted" | "unsubmitted";
            /** 請求日 (yyyy-mm-dd) */
            issue_date: string;
            /** メール送信日時(最新) */
            mail_sent_at?: string | null;
            /** メッセージ */
            message?: string | null;
            /** 備考 */
            notes?: string | null;
            /** 市区町村・番地 */
            partner_address1?: string | null;
            /** 建物名・部屋番号など */
            partner_address2?: string | null;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先担当者名 */
            partner_contact_info?: string | null;
            /** 請求書に表示する取引先名 */
            partner_display_name?: string | null;
            /** 取引先ID */
            partner_id: number | null;
            /** 取引先名 */
            partner_name?: string | null;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            partner_prefecture_code?: number | null;
            /** 都道府県 */
            partner_prefecture_name?: string | null;
            /** 敬称（御中、様、(空白)の3つから選択） */
            partner_title?: string | null;
            /** 郵便番号 */
            partner_zipcode?: string | null;
            /** 支払口座 */
            payment_bank_info?: string | null;
            /** 入金日 */
            payment_date?: string | null;
            /** 入金ステータス  (unsettled: 入金待ち, settled: 入金済み) */
            payment_status?: "" | "unsettled" | "settled";
            /** 支払方法 (振込: transfer, 引き落とし: direct_debit) */
            payment_type: "" | "transfer" | "direct_debit";
            /** 郵送ステータス(unrequested: リクエスト前, preview_registered: プレビュー登録, preview_failed: プレビュー登録失敗, ordered: 注文中, order_failed: 注文失敗, printing: 印刷中, canceled: キャンセル, posted: 投函済み) */
            posting_status: "" | "unrequested" | "preview_registered" | "preview_failed" | "ordered" | "order_failed" | "printing" | "canceled" | "posted";
            /**
             * 関連する見積書ID(配列)<br>
             * 下記で作成したものが該当します。
             *
             * <a href="https://support.freee.co.jp/hc/ja/articles/203318410#1-2" target="_blank">見積書・納品書を納品書・請求書に変換する</a><br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/209076226" target="_blank">複数の見積書・納品書から合算請求書を作成する</a><br>
             */
            related_quotation_ids?: number[];
            /** 小計 */
            sub_total?: number;
            /** 請求書の消費税計算方法(inclusive: 内税, exclusive: 外税) */
            tax_entry_method: "" | "inclusive" | "exclusive";
            /** タイトル */
            title?: string | null;
            /** 合計金額 */
            total_amount: number;
            total_amount_per_vat_rate: {
                /** 軽減税率8%の税込み金額合計 */
                reduced_vat_8: number;
                /** 税率10%の税込み金額合計 */
                vat_10: number;
                /** 税率5%の税込み金額合計 */
                vat_5: number;
                /** 税率8%の税込み金額合計 */
                vat_8: number;
            };
            /** 合計金額 */
            total_vat?: number;
            /** Web共有取引先確認日時(最新) */
            web_confirmed_at?: string | null;
            /** Web共有ダウンロード日時(最新) */
            web_downloaded_at?: string | null;
            /** Web共有日時(最新) */
            web_published_at?: string | null;
        };
    }
    export interface invoiceUpdateParams {
        /** 売上計上日 */
        booking_date?: string;
        /** 市区町村・番地 (デフォルトは事業所設定情報が補完されます) */
        company_address1?: string;
        /** 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます) */
        company_address2?: string;
        /** 事業所担当者名 (デフォルトは請求書テンプレート情報が補完されます) */
        company_contact_info?: string;
        /** 事業所ID */
        company_id: number;
        /** 事業所名 (デフォルトは事業所設定情報が補完されます) */
        company_name?: string;
        /** 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトは事業所設定情報が補完されます) */
        company_prefecture_code?: number;
        /** 郵便番号 (デフォルトは事業所設定情報が補完されます) */
        company_zipcode?: string;
        /** 概要 */
        description?: string;
        /** 期日 (yyyy-mm-dd) */
        due_date?: string;
        /** 請求内容 */
        invoice_contents?: {
            /** 勘定科目ID */
            account_item_id?: number;
            /** 備考 */
            description?: string;
            /** 請求内容ID */
            id?: number;
            /** 品目ID */
            item_id?: number;
            /** 順序 */
            order: number;
            /** 数量 */
            qty?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            tag_ids?: number[];
            /** 税区分コード */
            tax_code?: number;
            /**
             * 行の種類
             * <ul>
             * <li>normal、discountを指定する場合、account_item_id,tax_codeとunit_priceが必須となります。</li>
             * <li>normalを指定した場合、qtyが必須となります。</li>
             * </ul>
             */
            type: "normal" | "discount" | "text";
            /** 単位 */
            unit?: string;
            /** 単価 (tax_entry_method: inclusiveの場合は税込価格、tax_entry_method: exclusiveの場合は税抜価格となります) */
            unit_price?: number;
            /** 消費税額 */
            vat?: number | null;
        }[];
        /**
         * 請求書レイアウト
         * * `default_classic` - レイアウト１/クラシック (デフォルト)
         *
         * * `standard_classic` - レイアウト２/クラシック
         *
         * * `envelope_classic` - 封筒１/クラシック
         *
         * * `carried_forward_standard_classic` - レイアウト３（繰越金額欄あり）/クラシック
         *
         * * `carried_forward_envelope_classic` - 封筒２（繰越金額欄あり）/クラシック
         *
         * * `default_modern` - レイアウト１/モダン
         *
         * * `standard_modern` - レイアウト２/モダン
         *
         * * `envelope_modern` - 封筒/モダン
         */
        invoice_layout?: "default_classic" | "standard_classic" | "envelope_classic" | "carried_forward_standard_classic" | "carried_forward_envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
        /** 請求書番号 (デフォルト: 自動採番されます) */
        invoice_number?: string;
        /**
         * 請求書ステータス<br>
         * <ul>
         *   <li>draft: 下書き (デフォルト)</li>
         *   <li>(廃止予定) issue: 発行 (送付待ち (unsubmitted) と同じです。)</li>
         *   <li>unsubmitted: 送付待ち</li>
         *   <li>submitted: 送付済み</li>
         * </ul>
         * issue, unsubmitted は請求書承認ワークフローを利用している場合は、承認済みの請求書にのみ指定できます。<br>
         * submitted は請求書承認ワークフローを利用している場合は、送付待ちの請求書にのみ指定できます。
         */
        invoice_status?: "draft" | "issue" | "unsubmitted" | "submitted";
        /** 請求日 (yyyy-mm-dd) */
        issue_date?: string;
        /** メッセージ (デフォルト: 下記の通りご請求申し上げます。) */
        message?: string;
        /** 備考 */
        notes?: string;
        /** 取引先市区町村・番地 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address1?: string | null;
        /** 取引先建物名・部屋番号など (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address2?: string | null;
        /** 取引先コード */
        partner_code?: string | null;
        /** 取引先担当者名 */
        partner_contact_info?: string | null;
        /** 請求書に表示する取引先名 */
        partner_display_name: string;
        /** 取引先ID */
        partner_id?: number | null;
        /** 取引先都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_prefecture_code?: number | null;
        /** 敬称（御中、様、(空白)の3つから選択） */
        partner_title: string | null;
        /** 取引先郵便番号 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_zipcode?: string | null;
        /** 支払口座 */
        payment_bank_info?: string;
        /** 支払方法 (振込: transfer, 引き落とし: direct_debit) */
        payment_type?: "transfer" | "direct_debit";
        /** 請求書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)) */
        tax_entry_method?: "inclusive" | "exclusive";
        /** タイトル (デフォルト: 請求書) */
        title?: string;
        /** 振込専用口座の利用(利用しない: not_use(デフォルト), 利用する: use) */
        use_virtual_transfer_account?: "not_use" | "use";
    }
    export interface itemParams {
        /** 事業所ID */
        company_id: number;
        /** 品目名 (30文字以内) */
        name: string;
        /** ショートカット１ (20文字以内) */
        shortcut1?: string;
        /** ショートカット２ (20文字以内) */
        shortcut2?: string;
    }
    export interface itemResponse {
        item: {
            /**
             * 品目の使用設定（true: 使用する、false: 使用しない）
             * <br>
             * <ul>
             *   <li>
             *     本APIでitemを作成した場合はtrueになります。
             *   </li>
             *   <li>
             *     falseにする場合はWeb画面から変更できます。
             *   </li>
             *   <li>
             *     trueの場合、Web画面での取引登録時などに入力候補として表示されます。
             *   </li>
             *   <li>
             *     falseの場合、品目自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの品目をパラメータに指定すれば、取引などにfalseの品目を設定できます。
             *   </li>
             * </ul>
             */
            available: boolean;
            /** 事業所ID */
            company_id: number;
            /** 品目ID */
            id: number;
            /** 品目名 (30文字以内) */
            name: string;
            /** ショートカット１ (20文字以内) */
            shortcut1?: string | null;
            /** ショートカット２ (20文字以内) */
            shortcut2?: string | null;
            /** 更新日(yyyy-mm-dd) */
            update_date: string;
        };
    }
    export interface journalStatusResponse {
        journals: {
            /** 事業所ID */
            company_id: number;
            /** ダウンロード形式 */
            download_type: "csv" | "generic" | "pdf";
            /** ダウンロードURL */
            download_url?: string;
            /** 取得終了日 (yyyy-mm-dd) */
            end_date: string;
            /** 受け付けID */
            id: number;
            /** 取得開始日 (yyyy-mm-dd) */
            start_date: string;
            /** ダウンロードリクエストのステータス */
            status: "enqueued" | "working" | "uploaded" | "failed";
            visible_ids?: ("deal_id" | "transfer_id" | "manual_journal_id")[];
            visible_tags?: ("partner" | "item" | "tag" | "section" | "description" | "wallet_txn_description" | "all" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag")[];
        };
    }
    export interface journalsResponse {
        journals: {
            /** 事業所ID */
            company_id: number;
            /** ダウンロード形式 */
            download_type?: "csv" | "generic" | "pdf";
            /** 取得終了日 (yyyy-mm-dd) */
            end_date?: string;
            /** 受け付けID */
            id: number;
            messages?: string[];
            /** 取得開始日 (yyyy-mm-dd) */
            start_date?: string;
            /** ステータス確認用URL */
            status_url?: string;
            /** 集計結果が最新かどうか */
            up_to_date?: boolean;
            /** 集計が最新でない場合の要因情報 */
            up_to_date_reasons?: {
                /** コード */
                code: "depreciation_creating" | "depreciation_create_error";
                /** 集計が最新でない理由 */
                message: string;
            }[];
            visible_ids?: ("deal_id" | "transfer_id" | "manual_journal_id")[];
            visible_tags?: ("partner" | "item" | "tag" | "section" | "description" | "wallet_txn_description" | "all" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag")[];
        };
    }
    export interface manualJournalCreateParams {
        /** 決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳） */
        adjustment?: boolean;
        /** 事業所ID */
        company_id: number;
        details: {
            /** 勘定科目ID */
            account_item_id: number;
            /** 取引金額（税込で指定してください） */
            amount: number;
            /** 備考 */
            description?: string;
            /** 貸借（貸方: credit, 借方: debit） */
            entry_side: "debit" | "credit";
            /** 品目ID */
            item_id?: number;
            /** 取引先コード */
            partner_code?: string;
            /** 取引先ID */
            partner_id?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /** 税区分コード */
            tax_code: number;
            /** 消費税額（指定しない場合は自動で計算されます） */
            vat?: number;
        }[];
        /** 発生日 (yyyy-mm-dd) */
        issue_date: string;
    }
    export interface manualJournalResponse {
        manual_journal: {
            /** 決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳） */
            adjustment: boolean;
            /** 事業所ID */
            company_id: number;
            /** 貸借行一覧（配列）: 貸借合わせて100行まで登録できます。 */
            details: {
                /** 勘定科目ID */
                account_item_id: number;
                /** 金額（税込で指定してください） */
                amount: number;
                /** 備考 */
                description: string;
                /** 貸借(貸方: credit, 借方: debit) */
                entry_side: "credit" | "debit";
                /** 貸借行ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 品目 */
                item_name: string | null;
                /** 取引先コード */
                partner_code?: string | null;
                /** 取引先ID */
                partner_id: number | null;
                /** 正式名称（255文字以内） */
                partner_long_name: string | null;
                /** 取引先名 */
                partner_name: string | null;
                /** 部門ID */
                section_id: number | null;
                /** 部門 */
                section_name: string | null;
                /** セグメント１ID */
                segment_1_tag_id?: number;
                /** セグメント１ID */
                segment_1_tag_name?: number;
                /** セグメント２ID */
                segment_2_tag_id?: number;
                /** セグメント２ */
                segment_2_tag_name?: number;
                /** セグメント３ID */
                segment_3_tag_id?: number;
                /** セグメント３ */
                segment_3_tag_name?: number;
                tag_ids: number[];
                tag_names: string[];
                /** 税区分コード */
                tax_code: number;
                /** 消費税額（指定しない場合は自動で計算されます） */
                vat: number;
            }[];
            /** 振替伝票ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 仕訳番号 */
            txn_number: string | null;
        };
    }
    export interface manualJournalUpdateParams {
        /** 決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳） */
        adjustment?: boolean;
        /** 事業所ID */
        company_id: number;
        details: {
            /** 勘定科目ID */
            account_item_id: number;
            /** 取引金額（税込で指定してください） */
            amount: number;
            /** 備考 */
            description?: string;
            /** 貸借（貸方: credit, 借方: debit） */
            entry_side: "debit" | "credit";
            /** 貸借行ID: 既存貸借行を更新または削除する場合に指定します。IDを指定しない貸借行は、新規行として扱われ追加されます。 */
            id?: number;
            /** 品目ID */
            item_id?: number;
            /** 取引先コード */
            partner_code?: string;
            /** 取引先ID */
            partner_id?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /** 税区分コード */
            tax_code: number;
            /** 消費税額（指定しない場合は自動で計算されます） */
            vat?: number;
        }[];
        /** 発生日 (yyyy-mm-dd) */
        issue_date: string;
    }
    export interface meResponse {
        user: {
            companies?: {
                /** アドバイザープロファイルID（アドバイザー事業所で無い場合にnullになります） */
                advisor_id?: number | null;
                /** 表示名 */
                display_name: string;
                /** 事業所ID */
                id: number;
                /** ユーザーの権限 */
                role: "admin" | "simple_accounting" | "self_only" | "read_only";
                /** カスタム権限（true: 使用する、false: 使用しない） */
                use_custom_role: boolean;
            }[];
            /** 表示ユーザー名 */
            display_name?: string | null;
            /** メールアドレス */
            email: string;
            /** 名 */
            first_name?: string | null;
            /** 名（カナ） */
            first_name_kana?: string | null;
            /** ユーザーID */
            id: number;
            /** 姓 */
            last_name?: string | null;
            /** 姓（カナ） */
            last_name_kana?: string | null;
        };
    }
    export interface partnerCreateParams {
        address_attributes?: {
            /** 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            prefecture_code?: number;
            /** 市区町村・番地（255文字以内） */
            street_name1?: string;
            /** 建物名・部屋番号など（255文字以内） */
            street_name2?: string;
            /** 郵便番号（8文字以内） */
            zipcode?: string;
        };
        /** 取引先コード（取引先コードの利用を有効にしている場合は、codeの指定は必須です。） */
        code?: string;
        /** 事業所ID */
        company_id: number;
        /** 担当者 氏名 (255文字以内) */
        contact_name?: string;
        /** 地域（JP: 国内、ZZ:国外） */
        country_code?: "JP" | "ZZ";
        /** 敬称（御中、様、(空白)の3つから選択） */
        default_title?: string;
        /** 担当者 メールアドレス (255文字以内) */
        email?: string;
        invoice_payment_term_attributes?: {
            /** 支払月 */
            additional_months?: number;
            /** 締め日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            cutoff_day?: number;
            /** 支払日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            fixed_day?: number;
        };
        /** 正式名称（255文字以内） */
        long_name?: string;
        /** 取引先名 (255文字以内) */
        name: string;
        /** カナ名称（255文字以内） */
        name_kana?: string;
        /** 事業所種別（null: 未設定、1: 法人、2: 個人） */
        org_code?: (1 | 2) | null;
        partner_bank_account_attributes?: {
            /** 受取人名（カナ） */
            account_name?: string;
            /** 口座番号 */
            account_number?: string;
            /** 口座種別(ordinary:普通、checking：当座、earmarked：納税準備預金、savings：貯蓄、other:その他) */
            account_type?: string;
            /** 銀行コード */
            bank_code?: string;
            /** 銀行名 */
            bank_name?: string;
            /** 銀行名（カナ） */
            bank_name_kana?: string;
            /** 支店番号 */
            branch_code?: string;
            /** 支店名（カナ） */
            branch_kana?: string;
            /** 支店名 */
            branch_name?: string;
            /** 受取人名 */
            long_account_name?: string;
        };
        partner_doc_setting_attributes?: {
            /** 請求書送付方法(email:メール、posting:郵送、email_and_posting:メールと郵送) */
            sending_method?: "email" | "posting" | "email_and_posting";
        };
        /** 振込元口座ID（一括振込ファイル用）:（walletableのtypeが'bank_account'のidのみ指定できます。また、未設定にする場合は、nullを指定してください。） */
        payer_walletable_id?: number | null;
        payment_term_attributes?: {
            /** 支払月 */
            additional_months?: number;
            /** 締め日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            cutoff_day?: number;
            /** 支払日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            fixed_day?: number;
        };
        /** 電話番号 */
        phone?: string;
        /** ショートカット１ (255文字以内) */
        shortcut1?: string;
        /** ショートカット２ (255文字以内) */
        shortcut2?: string;
        /** 振込手数料負担（一括振込ファイル用）: (振込元(当方): payer, 振込先(先方): payee) */
        transfer_fee_handling_side?: "payer" | "payee";
    }
    export interface partnerResponse {
        partner: {
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            "address_attributes[prefecture_code]"?: number | null;
            /** 市区町村・番地 */
            "address_attributes[street_name1]"?: string | null;
            /** 建物名・部屋番号など */
            "address_attributes[street_name2]"?: string | null;
            /** 郵便番号 */
            "address_attributes[zipcode]"?: string | null;
            /**
             * 取引先の使用設定（true: 使用する、false: 使用しない）
             * <br>
             * <ul>
             *   <li>
             *     本APIでpartnerを作成した場合はtrueになります。
             *   </li>
             *   <li>
             *     falseにする場合はWeb画面から変更できます。
             *   </li>
             *   <li>
             *     trueの場合、Web画面での取引登録時などに入力候補として表示されます。
             *   </li>
             *   <li>
             *     falseの場合、取引先自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの取引先をパラメータに指定すれば、取引などにfalseの取引先を設定できます。
             *   </li>
             * </ul>
             */
            available: boolean;
            /** 取引先コード */
            code: string | null;
            /** 事業所ID */
            company_id: number;
            /** 担当者 氏名 */
            contact_name?: string | null;
            /** 地域（JP: 国内、ZZ:国外） */
            country_code?: string;
            /** 敬称（御中、様、(空白)の3つから選択） */
            default_title?: string | null;
            /** 担当者 メールアドレス */
            email?: string | null;
            /** 取引先ID */
            id: number;
            /** 支払月 */
            "invoice_payment_term_attributes[additional_months]"?: number | null;
            /** 締め日（29, 30, 31日の末日を指定する場合は、32。） */
            "invoice_payment_term_attributes[cutoff_day]"?: number | null;
            /** 支払日（29, 30, 31日の末日を指定する場合は、32。） */
            "invoice_payment_term_attributes[fixed_day]"?: number | null;
            /** 正式名称（255文字以内） */
            long_name?: string | null;
            /** 取引先名 */
            name: string;
            /** カナ名称（255文字以内） */
            name_kana?: string | null;
            /** 事業所種別（null: 未設定、1: 法人、2: 個人） */
            org_code?: number | null;
            /** 受取人名（カナ） */
            "partner_bank_account_attributes[account_name]"?: string | null;
            /** 口座番号 */
            "partner_bank_account_attributes[account_number]"?: string | null;
            /** 口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他) */
            "partner_bank_account_attributes[account_type]"?: ("ordinary" | "checking" | "earmarked" | "savings" | "other") | null;
            /** 銀行コード */
            "partner_bank_account_attributes[bank_code]"?: string | null;
            /** 銀行名 */
            "partner_bank_account_attributes[bank_name]"?: string | null;
            /** 銀行名（カナ） */
            "partner_bank_account_attributes[bank_name_kana]"?: string | null;
            /** 支店番号 */
            "partner_bank_account_attributes[branch_code]"?: string | null;
            /** 支店名（カナ） */
            "partner_bank_account_attributes[branch_kana]"?: string | null;
            /** 支店名 */
            "partner_bank_account_attributes[branch_name]"?: string | null;
            /** 受取人名 */
            "partner_bank_account_attributes[long_account_name]"?: string | null;
            /** 請求書送付方法(email:メール、posting:郵送、email_and_posting:メールと郵送) */
            "partner_doc_setting_attributes[sending_method]"?: ("email" | "posting" | "email_and_posting") | null;
            /** 振込元口座ID（一括振込ファイル用）:（未設定の場合は、nullです。） */
            payer_walletable_id?: number | null;
            /** 支払月 */
            "payment_term_attributes[additional_months]"?: number | null;
            /** 締め日（29, 30, 31日の末日を指定する場合は、32。） */
            "payment_term_attributes[cutoff_day]"?: number | null;
            /** 支払日（29, 30, 31日の末日を指定する場合は、32。） */
            "payment_term_attributes[fixed_day]"?: number | null;
            /** 電話番号 */
            phone?: string | null;
            /** ショートカット1 (20文字以内) */
            shortcut1?: string | null;
            /** ショートカット2 (20文字以内) */
            shortcut2?: string | null;
            /** 振込手数料負担（一括振込ファイル用）: (振込元(当方): payer, 振込先(先方): payee) */
            transfer_fee_handling_side?: "payer" | "payee";
            /** 更新日 (yyyy-mm-dd) */
            update_date: string;
        };
    }
    export interface partnerUpdateParams {
        address_attributes?: {
            /** 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            prefecture_code?: number;
            /** 市区町村・番地（255文字以内） */
            street_name1?: string;
            /** 建物名・部屋番号など（255文字以内） */
            street_name2?: string;
            /** 郵便番号（8文字以内） */
            zipcode?: string;
        };
        /** 事業所ID */
        company_id: number;
        /** 担当者 氏名 (255文字以内) */
        contact_name?: string;
        /** 地域（JP: 国内、ZZ:国外） */
        country_code?: "JP" | "ZZ";
        /** 敬称（御中、様、(空白)の3つから選択） */
        default_title?: string;
        /** 担当者 メールアドレス (255文字以内) */
        email?: string;
        invoice_payment_term_attributes?: {
            /** 支払月 */
            additional_months?: number;
            /** 締め日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            cutoff_day?: number;
            /** 支払日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            fixed_day?: number;
        };
        /** 正式名称（255文字以内） */
        long_name?: string;
        /** 取引先名 (255文字以内) */
        name: string;
        /** カナ名称（255文字以内） */
        name_kana?: string;
        /** 事業所種別（null: 未設定、1: 法人、2: 個人） */
        org_code?: (1 | 2) | null;
        partner_bank_account_attributes?: {
            /** 受取人名（カナ） */
            account_name?: string;
            /** 口座番号 */
            account_number?: string;
            /** 口座種別(ordinary:普通、checking：当座、earmarked：納税準備預金、savings：貯蓄、other:その他) */
            account_type?: string;
            /** 銀行コード */
            bank_code?: string;
            /** 銀行名 */
            bank_name?: string;
            /** 銀行名（カナ） */
            bank_name_kana?: string;
            /** 支店番号 */
            branch_code?: string;
            /** 支店名（カナ） */
            branch_kana?: string;
            /** 支店名 */
            branch_name?: string;
            /** 受取人名 */
            long_account_name?: string;
        };
        partner_doc_setting_attributes?: {
            /** 請求書送付方法(email:メール、posting:郵送、email_and_posting:メールと郵送) */
            sending_method?: "email" | "posting" | "email_and_posting";
        };
        /** 振込元口座ID（一括振込ファイル用）:（walletableのtypeが'bank_account'のidのみ指定できます。また、未設定にする場合は、nullを指定してください。） */
        payer_walletable_id?: number | null;
        payment_term_attributes?: {
            /** 支払月 */
            additional_months?: number;
            /** 締め日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            cutoff_day?: number;
            /** 支払日（29, 30, 31日の末日を指定する場合は、32を指定してください。） */
            fixed_day?: number;
        };
        /** 電話番号 */
        phone?: string;
        /** ショートカット１ (255文字以内) */
        shortcut1?: string;
        /** ショートカット２ (255文字以内) */
        shortcut2?: string;
        /** 振込手数料負担（一括振込ファイル用）: (振込元(当方): payer, 振込先(先方): payee) */
        transfer_fee_handling_side?: "payer" | "payee";
    }
    export interface partnersResponse {
        partners: {
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            "address_attributes[prefecture_code]"?: number | null;
            /** 市区町村・番地 */
            "address_attributes[street_name1]"?: string | null;
            /** 建物名・部屋番号など */
            "address_attributes[street_name2]"?: string | null;
            /** 郵便番号 */
            "address_attributes[zipcode]"?: string | null;
            /**
             * 取引先の使用設定（true: 使用する、false: 使用しない）
             * <br>
             * <ul>
             *   <li>
             *     本APIでpartnerを作成した場合はtrueになります。
             *   </li>
             *   <li>
             *     falseにする場合はWeb画面から変更できます。
             *   </li>
             *   <li>
             *     trueの場合、Web画面での取引登録時などに入力候補として表示されます。
             *   </li>
             *   <li>
             *     falseの場合、取引先自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの取引先をパラメータに指定すれば、取引などにfalseの取引先を設定できます。
             *   </li>
             * </ul>
             */
            available: boolean;
            /** 取引先コード */
            code: string | null;
            /** 事業所ID */
            company_id: number;
            /** 担当者 氏名 */
            contact_name?: string | null;
            /** 地域（JP: 国内、ZZ:国外） */
            country_code?: string;
            /** 敬称（御中、様、(空白)の3つから選択） */
            default_title?: string | null;
            /** 担当者 メールアドレス */
            email?: string | null;
            /** 取引先ID */
            id: number;
            /** 正式名称（255文字以内） */
            long_name?: string | null;
            /** 取引先名 */
            name: string;
            /** カナ名称（255文字以内） */
            name_kana?: string | null;
            /** 事業所種別（null: 未設定、1: 法人、2: 個人） */
            org_code?: number | null;
            /** 受取人名（カナ） */
            "partner_bank_account_attributes[account_name]"?: string | null;
            /** 口座番号 */
            "partner_bank_account_attributes[account_number]"?: string | null;
            /** 口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他) */
            "partner_bank_account_attributes[account_type]"?: ("ordinary" | "checking" | "earmarked" | "savings" | "other") | null;
            /** 銀行コード */
            "partner_bank_account_attributes[bank_code]"?: string | null;
            /** 銀行名 */
            "partner_bank_account_attributes[bank_name]"?: string | null;
            /** 銀行名（カナ） */
            "partner_bank_account_attributes[bank_name_kana]"?: string | null;
            /** 支店番号 */
            "partner_bank_account_attributes[branch_code]"?: string | null;
            /** 支店名（カナ） */
            "partner_bank_account_attributes[branch_kana]"?: string | null;
            /** 支店名 */
            "partner_bank_account_attributes[branch_name]"?: string | null;
            /** 受取人名 */
            "partner_bank_account_attributes[long_account_name]"?: string | null;
            /** 請求書送付方法(mail:メール、posting:郵送、mail_and_posting:メールと郵送) */
            "partner_doc_setting_attributes[sending_method]"?: ("mail" | "posting" | "main_and_posting") | null;
            /** 振込元口座ID（一括振込ファイル用）:（未設定の場合は、nullです。） */
            payer_walletable_id?: number | null;
            /** 電話番号 */
            phone?: string | null;
            /** ショートカット1 (20文字以内) */
            shortcut1?: string | null;
            /** ショートカット2 (20文字以内) */
            shortcut2?: string | null;
            /** 振込手数料負担（一括振込ファイル用）: (振込元(当方): payer, 振込先(先方): payee) */
            transfer_fee_handling_side?: "payer" | "payee";
            /** 更新日 (yyyy-mm-dd) */
            update_date: string;
        }[];
    }
    export interface paymentParams {
        /** 金額 */
        amount: number;
        /** 事業所ID */
        company_id: number;
        /** 支払日 */
        date: string;
        /** 口座ID（from_walletable_typeがprivate_account_itemの場合は勘定科目ID）：payments指定時は必須 */
        from_walletable_id: number;
        /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet, プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）: private_account_item)：payments指定時は必須 */
        from_walletable_type: "bank_account" | "credit_card" | "wallet" | "private_account_item";
    }
    export interface paymentRequestActionCreateParams {
        /** 操作(approve: 承認する、force_approve: 代理承認する、cancel: 申請を取り消す、reject: 却下する、feedback: 申請者へ差し戻す、force_feedback: 承認済み・却下済みを取り消す) */
        approval_action: "approve" | "force_approve" | "cancel" | "reject" | "feedback" | "force_feedback";
        /** 事業所ID */
        company_id: number;
        /** 次ステップの承認者のユーザーID */
        next_approver_id?: number | null;
        /** 対象round。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。支払依頼の取得APIレスポンス.current_roundを送信してください。 */
        target_round: number;
        /** 対象承認ステップID 支払依頼の取得APIレスポンス.current_step_idを送信してください。 */
        target_step_id: number;
    }
    export interface paymentRequestCreateParams {
        /**
         * 受取人名（カナ）（48文字以内）<br>
         * 支払先指定時には無効
         */
        account_name?: string;
        /**
         * 口座番号（半角数字1桁〜7桁）<br>
         * 支払先指定時には無効
         */
        account_number?: string;
        /**
         * '口座種別(ordinary: 普通、checking: 当座、earmarked: 納税準備預金、savings: 貯蓄、other: その他)'<br>
         * '支払先指定時には無効'<br>
         * 'デフォルトは ordinary: 普通 です'
         */
        account_type?: "ordinary" | "checking" | "earmarked" | "savings" | "other";
        /** 申請日 (yyyy-mm-dd) */
        application_date: string;
        /**
         * 申請経路ID<br>
         * 指定する申請経路IDは、申請経路APIを利用して取得してください。
         */
        approval_flow_route_id: number;
        /**
         * 承認者のユーザーID<br>
         * 「承認者を指定」の経路を申請経路として使用する場合に指定してください。<br>
         * 指定する承認者のユーザーIDは、申請経路APIを利用して取得してください。
         */
        approver_id?: number;
        /**
         * 銀行コード（半角数字1桁〜4桁）<br>
         * 支払先指定時には無効
         */
        bank_code?: string;
        /**
         * 銀行名（255文字以内）<br>
         * 支払先指定時には無効
         */
        bank_name?: string;
        /**
         * 銀行名（カナ）（15文字以内）<br>
         * 支払先指定時には無効
         */
        bank_name_kana?: string;
        /**
         * 支店番号（半角数字1桁〜3桁）<br>
         * 支払先指定時には無効
         */
        branch_code?: string;
        /**
         * 支店名（カナ）（15文字以内）<br>
         * 指定可能な文字は、英数・カナ・丸括弧・ハイフン・スペースのみです。<br>
         * 支払先指定時には無効
         */
        branch_kana?: string;
        /**
         * 支店名（255文字以内）<br>
         * 支払先指定時には無効
         */
        branch_name?: string;
        /** 事業所ID */
        company_id: number;
        /** 備考 */
        description?: string;
        /** 請求書番号（255文字以内） */
        document_code?: string;
        /**
         * 支払依頼のステータス<br>
         * falseを指定した時は申請中（in_progress）で支払依頼を作成します。<br>
         * trueを指定した時は下書き（draft）で支払依頼を作成します。<br>
         * 未指定の時は下書きとみなして支払依頼を作成します。
         */
        draft: boolean;
        /** 発生日 (yyyy-mm-dd) */
        issue_date: string;
        /**
         * 親申請ID(法人向け エンタープライズプラン、プロフェッショナルプラン)<br>
         * <ul>
         *   <li>承認済みの既存各種申請IDのみ指定可能です。</li>
         *   <li>各種申請一覧APIを利用して取得してください。</li>
         * </ul>
         */
        parent_id?: number | null;
        /**
         * 支払先の取引先コード<br>
         * 支払先の取引先ID指定時には無効
         */
        partner_code?: string | null;
        /** 支払先の取引先ID */
        partner_id?: number | null;
        /** 支払期限 (yyyy-mm-dd) */
        payment_date?: string | null;
        /**
         * '支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード)'<br>
         * 'デフォルトは none: 指定なし です。'
         */
        payment_method?: "none" | "domestic_bank_transfer" | "abroad_bank_transfer" | "account_transfer" | "credit_card";
        /** 支払依頼の項目行一覧（配列） */
        payment_request_lines: {
            /** 勘定科目ID */
            account_item_id?: number | null;
            /** 金額 */
            amount: number;
            /** 内容 */
            description?: string;
            /** 品目ID */
            item_id?: number;
            /**
             * '行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税)'<br>
             * 'デフォルトは deal_line: 支払依頼 です'
             */
            line_type?: "deal_line" | "withholding_tax";
            /** 部門ID */
            section_id?: number;
            /**
             * セグメント１ID<br>
             * セグメントタグ一覧APIを利用して取得してください。<br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
             */
            segment_1_tag_id?: number;
            /**
             * セグメント２ID(法人向けエンタープライズプラン)<br>
             * セグメントタグ一覧APIを利用して取得してください。<br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
             */
            segment_2_tag_id?: number;
            /**
             * セグメント３ID(法人向けエンタープライズプラン)<br>
             * セグメントタグ一覧APIを利用して取得してください。<br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
             */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /**
             * 税区分コード<br>
             * 勘定科目IDを指定する場合は必須です。
             */
            tax_code?: number;
        }[];
        /** 証憑ファイルID（ファイルボックスのファイルID）（配列） */
        receipt_ids?: number[];
        /** 申請タイトル */
        title: string;
    }
    export interface paymentRequestResponse {
        payment_request: {
            /** 受取人名（カナ） */
            account_name: string;
            /** 口座番号 */
            account_number: string;
            /** 口座種別(ordinary:普通、checking:当座、earmarked:納税準備預金、savings:貯蓄、other:その他) */
            account_type: "ordinary" | "checking" | "earmarked" | "savings" | "other";
            /** 申請者のユーザーID */
            applicant_id: number;
            /** 申請日 (yyyy-mm-dd) */
            application_date: string;
            /** 申請No. */
            application_number: string;
            /** 支払依頼の承認履歴（配列） */
            approval_flow_logs: {
                /** 操作(apply: 申請, approve: 承認, force_approve: 代理承認, cancel: 取消, reject: 却下, feedback: 差戻し) */
                action: "apply" | "approve" | "force_approve" | "cancel" | "reject" | "feedback";
                /** 更新日時(ISO8601形式) */
                updated_at: string;
                /** ユーザーID */
                user_id: number;
            }[];
            /** 申請経路ID */
            approval_flow_route_id: number;
            /**
             * 承認者（配列）
             *   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。
             *   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、
             *   approversはレスポンスに含まれるようになります。
             *   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。
             */
            approvers: {
                /** 代理承認済みかどうか */
                is_force_action: boolean;
                /**
                 * 承認ステップの承認方法
                 * * ` predefined_user` - メンバー指定 (1人),
                 * * ` selected_user` - 申請時にメンバー指定
                 * * ` unspecified` - 指定なし
                 * * ` and_resource` - メンバー指定 (複数、全員の承認),
                 * * ` or_resource` - メンバー指定 (複数、1人の承認)
                 * * ` and_position` - 役職指定 (複数、全員の承認)
                 * * ` or_position` - 役職指定 (複数、1人の承認)
                 */
                resource_type: "predefined_user" | "selected_user" | "unspecified" | "and_resource" | "or_resource" | "and_position" | "or_position";
                /**
                 * 承認者の承認状態
                 * * `initial` - 初期状態
                 * * `approved` - 承認済
                 * * `rejected` - 却下
                 * * `feedback` - 差戻し
                 */
                status: "initial" | "approved" | "rejected" | "feedback";
                /** 承認ステップID */
                step_id: number;
                /**
                 * 承認者のユーザーID
                 * 下記の場合はnullになります。
                 * <ul>
                 *   <li>resource_type:selected_userの場合で承認者未指定時</li>
                 *   <li>resource_type:or_positionで前stepで部門未指定の場合</li>
                 * </ul>
                 */
                user_id: number | null;
            }[];
            /** 銀行コード */
            bank_code: string;
            /** 銀行名 */
            bank_name: string;
            /** 銀行名（カナ） */
            bank_name_kana: string;
            /** 支店番号 */
            branch_code: string;
            /** 支店名（カナ） */
            branch_kana: string;
            /** 支店名 */
            branch_name: string;
            /** 支払依頼のコメント一覧（配列） */
            comments: {
                /** コメント内容 */
                comment: string;
                /** コメント日時(ISO8601形式) */
                posted_at: string;
                /** ユーザーID */
                user_id: number;
            }[];
            /** 事業所ID */
            company_id: number;
            /** 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 */
            current_round: number;
            /** 現在承認ステップID */
            current_step_id: number | null;
            /** 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) */
            deal_id: number | null;
            /** 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち) */
            deal_status: ("settled" | "unsettled") | null;
            /** 備考 */
            description: string;
            /** 請求書番号 */
            document_code: string;
            /** 支払依頼ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先ID */
            partner_id: number | null;
            /** 取引先名 */
            partner_name: string | null;
            /** 支払期限 (yyyy-mm-dd) */
            payment_date: string | null;
            /** 支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード) */
            payment_method: "none" | "domestic_bank_transfer" | "abroad_bank_transfer" | "account_transfer" | "credit_card";
            /** 支払依頼の項目行一覧（配列） */
            payment_request_lines: {
                /** 勘定科目ID */
                account_item_id: number | null;
                /** 金額 */
                amount: number;
                /** 内容 */
                description: string;
                /** 支払依頼の項目行ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税) */
                line_type: "deal_line" | "withholding_tax";
                /** 部門ID */
                section_id: number | null;
                /** セグメント１ID。セグメント１が使用可能なプランの時のみレスポンスに含まれます。 */
                segment_1_tag_id?: number | null;
                /** セグメント２ID。セグメント２が使用可能なプランの時のみレスポンスに含まれます。 */
                segment_2_tag_id?: number | null;
                /** セグメント３ID。セグメント３が使用可能なプランの時のみレスポンスに含まれます。 */
                segment_3_tag_id?: number | null;
                /** メモタグID */
                tag_ids: number[];
                /** 税区分コード */
                tax_code: number | null;
            }[];
            /** 証憑ファイルID（ファイルボックスのファイルID） */
            receipt_ids: number[];
            /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
            status: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
            /** 申請タイトル */
            title: string;
            /** 合計金額 */
            total_amount: number;
        };
    }
    export interface paymentRequestUpdateParams {
        /**
         * 受取人名（カナ）（48文字以内）<br>
         * 支払先指定時には無効
         */
        account_name?: string;
        /**
         * 口座番号（半角数字1桁〜7桁）<br>
         * 支払先指定時には無効
         */
        account_number?: string;
        /**
         * '口座種別(ordinary: 普通、checking: 当座、earmarked: 納税準備預金、savings: 貯蓄、other: その他)'<br>
         * '支払先指定時には無効'<br>
         * 'デフォルトは ordinary: 普通 です'
         */
        account_type?: "ordinary" | "checking" | "earmarked" | "savings" | "other";
        /**
         * 申請日 (yyyy-mm-dd)<br>
         * 申請者が、下書き状態もしくは差戻し状態の支払依頼に対して指定する場合のみ有効
         */
        application_date: string;
        /**
         * 申請経路ID<br>
         * 指定する申請経路IDは、申請経路APIを利用して取得してください。
         */
        approval_flow_route_id: number;
        /**
         * 承認者のユーザーID<br>
         * 「承認者を指定」の経路を申請経路として使用する場合に指定してください。<br>
         * 指定する承認者のユーザーIDは、申請経路APIを利用して取得してください。
         */
        approver_id?: number;
        /**
         * 銀行コード（半角数字1桁〜4桁）<br>
         * 支払先指定時には無効
         */
        bank_code?: string;
        /**
         * 銀行名（255文字以内）<br>
         * 支払先指定時には無効
         */
        bank_name?: string;
        /**
         * 銀行名（カナ）（15文字以内）<br>
         * 支払先指定時には無効
         */
        bank_name_kana?: string;
        /**
         * 支店番号（半角数字1桁〜3桁）<br>
         * 支払先指定時には無効
         */
        branch_code?: string;
        /**
         * 支店名（カナ）（15文字以内）<br>
         * 指定可能な文字は、英数・カナ・丸括弧・ハイフン・スペースのみです。<br>
         * 支払先指定時には無効
         */
        branch_kana?: string;
        /**
         * 支店名（255文字以内）<br>
         * 支払先指定時には無効
         */
        branch_name?: string;
        /** 事業所ID */
        company_id: number;
        /** 備考 */
        description?: string;
        /** 請求書番号（255文字以内） */
        document_code?: string;
        /**
         * 支払依頼のステータス<br>
         * falseを指定した時は申請中（in_progress）で支払依頼を更新します。<br>
         * trueを指定した時は下書き（draft）で支払依頼を更新します。<br>
         * 未指定の時は下書きとみなして支払依頼を更新します。
         */
        draft: boolean;
        /** 発生日 (yyyy-mm-dd) */
        issue_date: string;
        /**
         * 支払先の取引先コード<br>
         * 支払先の取引先ID指定時には無効
         */
        partner_code?: string | null;
        /** 支払先の取引先ID */
        partner_id?: number | null;
        /** 支払期限 (yyyy-mm-dd) */
        payment_date?: string | null;
        /**
         * '支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード)'<br>
         * 'デフォルトは none: 指定なし です。'
         */
        payment_method?: "none" | "domestic_bank_transfer" | "abroad_bank_transfer" | "account_transfer" | "credit_card";
        /** 支払依頼の項目行一覧（配列） */
        payment_request_lines: {
            /** 勘定科目ID */
            account_item_id?: number | null;
            /** 金額 */
            amount: number;
            /** 内容 */
            description?: string;
            /** 支払依頼の項目行ID: 既存項目行を更新する場合に指定します。IDを指定しない項目行は、新規行として扱われ追加されます。また、payment_request_linesに含まれない既存の項目行は削除されます。更新後も残したい行は、必ず支払依頼の項目行IDを指定してpayment_request_linesに含めてください。 */
            id?: number;
            /** 品目ID */
            item_id?: number;
            /**
             * '行の種類 (deal_line: 支払依頼, withholding_tax: 源泉徴収税)'<br>
             * 'デフォルトは deal_line: 支払依頼 です'
             */
            line_type?: "deal_line" | "withholding_tax";
            /** 部門ID */
            section_id?: number;
            /**
             * セグメント１ID<br>
             * セグメントタグ一覧APIを利用して取得してください。<br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
             */
            segment_1_tag_id?: number;
            /**
             * セグメント２ID(法人向けエンタープライズプラン)<br>
             * セグメントタグ一覧APIを利用して取得してください。<br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
             */
            segment_2_tag_id?: number;
            /**
             * セグメント３ID(法人向けエンタープライズプラン)<br>
             * セグメントタグ一覧APIを利用して取得してください。<br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
             */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /**
             * 税区分コード<br>
             * 勘定科目IDを指定する場合は必須です。
             */
            tax_code?: number;
        }[];
        /** 証憑ファイルID（ファイルボックスのファイルID）（配列） */
        receipt_ids?: number[];
        /**
         * 申請タイトル<br>
         * 申請者が、下書き状態もしくは差戻し状態の支払依頼に対して指定する場合のみ有効
         */
        title: string;
    }
    export interface paymentRequestsIndexResponse {
        payment_requests: {
            /** 申請者のユーザーID */
            applicant_id: number;
            /** 申請日 (yyyy-mm-dd) */
            application_date: string;
            /** 申請No. */
            application_number: string;
            /**
             * 承認者（配列）
             *   承認ステップのresource_typeがunspecified (指定なし)の場合はapproversはレスポンスに含まれません。
             *   しかし、resource_typeがunspecifiedの承認ステップにおいて誰かが承認・却下・差し戻しのいずれかのアクションを取った後は、
             *   approversはレスポンスに含まれるようになります。
             *   その場合approversにはアクションを行ったステップのIDとアクションを行ったユーザーのIDが含まれます。
             */
            approvers: {
                /** 代理承認済みかどうか */
                is_force_action: boolean;
                /**
                 * 承認ステップの承認方法
                 * * ` predefined_user` - メンバー指定 (1人),
                 * * ` selected_user` - 申請時にメンバー指定
                 * * ` unspecified` - 指定なし
                 * * ` and_resource` - メンバー指定 (複数、全員の承認),
                 * * ` or_resource` - メンバー指定 (複数、1人の承認)
                 * * ` and_position` - 役職指定 (複数、全員の承認)
                 * * ` or_position` - 役職指定 (複数、1人の承認)
                 */
                resource_type: "predefined_user" | "selected_user" | "unspecified" | "and_resource" | "or_resource" | "and_position" | "or_position";
                /**
                 * 承認者の承認状態
                 * * `initial` - 初期状態
                 * * `approved` - 承認済
                 * * `rejected` - 却下
                 * * `feedback` - 差戻し
                 */
                status: "initial" | "approved" | "rejected" | "feedback";
                /** 承認ステップID */
                step_id: number;
                /**
                 * 承認者のユーザーID
                 * 下記の場合はnullになります。
                 * <ul>
                 *   <li>resource_type:selected_userの場合で承認者未指定時</li>
                 *   <li>resource_type:or_positionで前stepで部門未指定の場合</li>
                 * </ul>
                 */
                user_id: number | null;
            }[];
            /** 事業所ID */
            company_id: number;
            /** 現在のround。差し戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。 */
            current_round: number;
            /** 現在承認ステップID */
            current_step_id: number | null;
            /** 取引ID (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_idが表示されます) */
            deal_id?: number | null;
            /** 取引ステータス (申請ステータス:statusがapprovedで、取引が存在する時のみdeal_statusが表示されます settled:支払済み, unsettled:支払待ち) */
            deal_status?: ("settled" | "unsettled") | null;
            /** 請求書番号 */
            document_code: string;
            /** 支払依頼ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 取引先コード */
            partner_code: string | null;
            /** 取引先ID */
            partner_id: number | null;
            /** 取引先名 */
            partner_name: string | null;
            /** 支払期限 (yyyy-mm-dd) */
            payment_date: string | null;
            /** 支払方法(none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード) */
            payment_method: "none" | "domestic_bank_transfer" | "abroad_bank_transfer" | "account_transfer" | "credit_card";
            /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
            status: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
            /** 申請タイトル */
            title: string;
            /** 合計金額 */
            total_amount: number;
        }[];
    }
    export interface quotationCreateParams {
        /** 市区町村・番地 (デフォルトは事業所設定情報が補完されます) */
        company_address1?: string;
        /** 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます) */
        company_address2?: string;
        /** 事業所担当者名 (デフォルトは見積書テンプレート情報が補完されます) */
        company_contact_info?: string;
        /** 事業所ID */
        company_id: number;
        /** 事業所名 (デフォルトは事業所設定情報が補完されます) */
        company_name?: string;
        /** 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトは事業所設定情報が補完されます) */
        company_prefecture_code?: number;
        /** 郵便番号 (デフォルトは事業所設定情報が補完されます) */
        company_zipcode?: string;
        /** 概要 */
        description?: string;
        /** 見積日 (yyyy-mm-dd) */
        issue_date?: string;
        /** メッセージ (デフォルト: 下記の通り御見積申し上げます。) */
        message?: string;
        /** 備考 */
        notes?: string;
        /** 取引先市区町村・番地 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address1?: string | null;
        /** 取引先建物名・部屋番号など (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address2?: string | null;
        /** 取引先コード */
        partner_code?: string | null;
        /** 取引先担当者名 */
        partner_contact_info?: string | null;
        /** 見積書に表示する取引先名 */
        partner_display_name: string;
        /** 取引先ID */
        partner_id?: number | null;
        /** 取引先都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_prefecture_code?: number | null;
        /** 敬称（御中、様、(空白)の3つから選択） */
        partner_title: string;
        /** 取引先郵便番号 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_zipcode?: string | null;
        /** 見積内容 */
        quotation_contents?: {
            /** 勘定科目ID */
            account_item_id?: number;
            /** 備考 */
            description?: string;
            /** 品目ID */
            item_id?: number;
            /** 順序 */
            order: number;
            /** 数量 */
            qty?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            tag_ids?: number[];
            /** 税区分コード */
            tax_code?: number;
            /**
             * 行の種類
             * <ul>
             * <li>normal、discountを指定する場合、account_item_id,tax_codeとunit_priceが必須となります。</li>
             * <li>normalを指定した場合、qtyが必須となります。</li>
             * </ul>
             */
            type: "normal" | "discount" | "text";
            /** 単位 */
            unit?: string;
            /** 単価 (tax_entry_method: inclusiveの場合は税込価格、tax_entry_method: exclusiveの場合は税抜価格となります) */
            unit_price?: number;
            /** 消費税額 */
            vat?: number | null;
        }[];
        /**
         * 見積書レイアウト
         * * `default_classic` - レイアウト１/クラシック (デフォルト)
         *
         * * `standard_classic` - レイアウト２/クラシック
         *
         * * `envelope_classic` - 封筒１/クラシック
         *
         * * `default_modern` - レイアウト１/モダン
         *
         * * `standard_modern` - レイアウト２/モダン
         *
         * * `envelope_modern` - 封筒/モダン
         */
        quotation_layout?: "default_classic" | "standard_classic" | "envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
        /** 見積書番号 (デフォルト: 自動採番されます) */
        quotation_number?: string;
        /** 見積書ステータス  (unsubmitted: 送付待ち, submitted: 送付済み) */
        quotation_status?: "unsubmitted" | "submitted";
        /** 見積書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)) */
        tax_entry_method?: "inclusive" | "exclusive";
        /** タイトル (デフォルト: 見積書) */
        title?: string;
    }
    export interface quotationIndexResponse {
        quotations: {
            /** 市区町村・番地 */
            company_address1?: string | null;
            /** 建物名・部屋番号など */
            company_address2?: string | null;
            /** 事業所担当者名 */
            company_contact_info?: string | null;
            /** 事業所ID */
            company_id: number;
            /** 事業所名 */
            company_name: string;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            company_prefecture_code?: number | null;
            /** 都道府県 */
            company_prefecture_name?: string | null;
            /** 郵便番号 */
            company_zipcode?: string | null;
            /** 概要 */
            description?: string | null;
            /** 見積書ID */
            id: number;
            /** 見積日 (yyyy-mm-dd) */
            issue_date: string;
            /** メール送信日時(最新) */
            mail_sent_at?: string | null;
            /** メッセージ */
            message?: string | null;
            /** 備考 */
            notes?: string | null;
            /** 市区町村・番地 */
            partner_address1?: string | null;
            /** 建物名・部屋番号など */
            partner_address2?: string | null;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先担当者名 */
            partner_contact_info?: string | null;
            /** 見積書に表示する取引先名 */
            partner_display_name?: string | null;
            /** 取引先ID */
            partner_id: number | null;
            /** 取引先名 */
            partner_name?: string | null;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            partner_prefecture_code?: number | null;
            /** 都道府県 */
            partner_prefecture_name?: string | null;
            /** 敬称（御中、様、(空白)の3つから選択） */
            partner_title: string | null;
            /** 郵便番号 */
            partner_zipcode?: string | null;
            /** 見積内容 */
            quotation_contents?: {
                /** 勘定科目ID */
                account_item_id: number | null;
                /** 勘定科目名 */
                account_item_name: string | null;
                /** 金額 */
                amount: number;
                /** 備考 */
                description: string | null;
                /** 見積内容ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 品目 */
                item_name: string | null;
                /** 順序 */
                order: number;
                /** 数量 */
                qty: number;
                /** 軽減税率税区分（true: 対象、false: 対象外） */
                reduced_vat: boolean;
                /** 部門ID */
                section_id: number | null;
                /** 部門 */
                section_name: string | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_name?: string | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント２ */
                segment_2_tag_name?: string | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** セグメント３ */
                segment_3_tag_name?: string | null;
                tag_ids: number[];
                tag_names: string[];
                /** 税区分コード */
                tax_code: number | null;
                /** 行の種類 */
                type: "normal" | "discount" | "text";
                /** 単位 */
                unit: string | null;
                /** 単価 */
                unit_price: number;
                /** 消費税額 */
                vat: number;
            }[];
            /**
             * 見積書レイアウト
             * * `default_classic` - レイアウト１/クラシック (デフォルト)
             *
             * * `standard_classic` - レイアウト２/クラシック
             *
             * * `envelope_classic` - 封筒１/クラシック
             *
             * * `default_modern` - レイアウト１/モダン
             *
             * * `standard_modern` - レイアウト２/モダン
             *
             * * `envelope_modern` - 封筒/モダン
             */
            quotation_layout: "default_classic" | "standard_classic" | "envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
            /** 見積書番号 */
            quotation_number: string;
            /** 見積書ステータス  (unsubmitted: 送付待ち, submitted: 送付済み, all: 全て) */
            quotation_status: "unsubmitted" | "submitted" | "all";
            /** 小計 */
            sub_total?: number;
            /** 見積書の消費税計算方法(inclusive: 内税, exclusive: 外税) */
            tax_entry_method: "" | "inclusive" | "exclusive";
            /** タイトル */
            title?: string | null;
            /** 合計金額 */
            total_amount: number;
            total_amount_per_vat_rate: {
                /** 軽減税率8%の税込み金額合計 */
                reduced_vat_8: number;
                /** 税率10%の税込み金額合計 */
                vat_10: number;
                /** 税率5%の税込み金額合計 */
                vat_5: number;
                /** 税率8%の税込み金額合計 */
                vat_8: number;
            };
            /** 消費税 */
            total_vat?: number;
            /** Web共有取引先確認日時(最新) */
            web_confirmed_at?: string | null;
            /** Web共有ダウンロード日時(最新) */
            web_downloaded_at?: string | null;
            /** Web共有日時(最新) */
            web_published_at?: string | null;
        }[];
    }
    export interface quotationResponse {
        quotation: {
            /** 市区町村・番地 */
            company_address1?: string | null;
            /** 建物名・部屋番号など */
            company_address2?: string | null;
            /** 事業所担当者名 */
            company_contact_info?: string | null;
            /** 事業所ID */
            company_id: number;
            /** 事業所名 */
            company_name: string;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            company_prefecture_code?: number | null;
            /** 都道府県 */
            company_prefecture_name?: string | null;
            /** 郵便番号 */
            company_zipcode?: string | null;
            /** 概要 */
            description?: string | null;
            /** 見積書ID */
            id: number;
            /** 見積日 (yyyy-mm-dd) */
            issue_date: string;
            /** メール送信日時(最新) */
            mail_sent_at?: string | null;
            /** メッセージ */
            message?: string | null;
            /** 備考 */
            notes?: string | null;
            /** 市区町村・番地 */
            partner_address1?: string | null;
            /** 建物名・部屋番号など */
            partner_address2?: string | null;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先担当者名 */
            partner_contact_info?: string | null;
            /** 見積書に表示する取引先名 */
            partner_display_name?: string | null;
            /** 取引先ID */
            partner_id: number | null;
            /** 取引先名 */
            partner_name?: string | null;
            /** 都道府県コード（-1: 設定しない、0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄 */
            partner_prefecture_code?: number | null;
            /** 都道府県 */
            partner_prefecture_name?: string | null;
            /** 敬称（御中、様、(空白)の3つから選択） */
            partner_title: string | null;
            /** 郵便番号 */
            partner_zipcode?: string | null;
            /** 見積内容 */
            quotation_contents?: {
                /** 勘定科目ID */
                account_item_id: number | null;
                /** 勘定科目名 */
                account_item_name: string | null;
                /** 金額 */
                amount: number;
                /** 備考 */
                description: string | null;
                /** 見積内容ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 品目 */
                item_name: string | null;
                /** 順序 */
                order: number;
                /** 数量 */
                qty: number;
                /** 軽減税率税区分（true: 対象、false: 対象外） */
                reduced_vat: boolean;
                /** 部門ID */
                section_id: number | null;
                /** 部門 */
                section_name: string | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_name?: string | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント２ */
                segment_2_tag_name?: string | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** セグメント３ */
                segment_3_tag_name?: string | null;
                tag_ids: number[];
                tag_names: string[];
                /** 税区分コード */
                tax_code: number | null;
                /** 行の種類 */
                type: "normal" | "discount" | "text";
                /** 単位 */
                unit: string | null;
                /** 単価 */
                unit_price: number;
                /** 消費税額 */
                vat: number;
            }[];
            /**
             * 見積書レイアウト
             * * `default_classic` - レイアウト１/クラシック (デフォルト)
             *
             * * `standard_classic` - レイアウト２/クラシック
             *
             * * `envelope_classic` - 封筒１/クラシック
             *
             * * `default_modern` - レイアウト１/モダン
             *
             * * `standard_modern` - レイアウト２/モダン
             *
             * * `envelope_modern` - 封筒/モダン
             */
            quotation_layout: "default_classic" | "standard_classic" | "envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
            /** 見積書番号 */
            quotation_number: string;
            /** 見積書ステータス  (unsubmitted: 送付待ち, submitted: 送付済み, all: 全て) */
            quotation_status: "unsubmitted" | "submitted" | "all";
            /**
             * 関連する請求書ID<br>
             * 下記で作成したものが該当します。
             *
             * <a href="https://support.freee.co.jp/hc/ja/articles/203318410#1-2" target="_blank">見積書・納品書を納品書・請求書に変換する</a><br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/209076226" target="_blank">複数の見積書・納品書から合算請求書を作成する</a><br>
             */
            related_invoice_id?: number | null;
            /**
             * 関連する見積書ID(配列)<br>
             * 下記で作成したものが該当します。
             *
             * <a href="https://support.freee.co.jp/hc/ja/articles/203318410#1-2" target="_blank">見積書・納品書を納品書・請求書に変換する</a><br>
             * <a href="https://support.freee.co.jp/hc/ja/articles/209076226" target="_blank">複数の見積書・納品書から合算請求書を作成する</a><br>
             */
            related_quotation_ids?: number[];
            /** 小計 */
            sub_total?: number;
            /** 見積書の消費税計算方法(inclusive: 内税, exclusive: 外税) */
            tax_entry_method: "" | "inclusive" | "exclusive";
            /** タイトル */
            title?: string | null;
            /** 合計金額 */
            total_amount: number;
            total_amount_per_vat_rate: {
                /** 軽減税率8%の税込み金額合計 */
                reduced_vat_8: number;
                /** 税率10%の税込み金額合計 */
                vat_10: number;
                /** 税率5%の税込み金額合計 */
                vat_5: number;
                /** 税率8%の税込み金額合計 */
                vat_8: number;
            };
            /** 消費税 */
            total_vat?: number;
            /** Web共有取引先確認日時(最新) */
            web_confirmed_at?: string | null;
            /** Web共有ダウンロード日時(最新) */
            web_downloaded_at?: string | null;
            /** Web共有日時(最新) */
            web_published_at?: string | null;
        };
    }
    export interface quotationUpdateParams {
        /** 市区町村・番地 (デフォルトは事業所設定情報が補完されます) */
        company_address1?: string;
        /** 建物名・部屋番号など (デフォルトは事業所設定情報が補完されます) */
        company_address2?: string;
        /** 事業所担当者名 (デフォルトは見積書テンプレート情報が補完されます) */
        company_contact_info?: string;
        /** 事業所ID */
        company_id: number;
        /** 事業所名 (デフォルトは事業所設定情報が補完されます) */
        company_name?: string;
        /** 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトは事業所設定情報が補完されます) */
        company_prefecture_code?: number;
        /** 郵便番号 (デフォルトは事業所設定情報が補完されます) */
        company_zipcode?: string;
        /** 概要 */
        description?: string;
        /** 見積日 (yyyy-mm-dd) */
        issue_date?: string;
        /** メッセージ (デフォルト: 下記の通り御見積申し上げます。) */
        message?: string;
        /** 備考 */
        notes?: string;
        /** 取引先市区町村・番地 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address1?: string | null;
        /** 取引先建物名・部屋番号など (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_address2?: string | null;
        /** 取引先コード */
        partner_code?: string | null;
        /** 取引先担当者名 */
        partner_contact_info?: string | null;
        /** 見積書に表示する取引先名 */
        partner_display_name: string;
        /** 取引先ID */
        partner_id?: number | null;
        /** 取引先都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄) (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_prefecture_code?: number | null;
        /** 敬称（御中、様、(空白)の3つから選択） */
        partner_title: string;
        /** 取引先郵便番号 (デフォルトはpartner_idもしくはpartner_codeで指定された取引先設定情報が補完されます) */
        partner_zipcode?: string | null;
        /** 見積内容 */
        quotation_contents?: {
            /** 勘定科目ID */
            account_item_id?: number;
            /** 備考 */
            description?: string;
            /** 見積内容ID */
            id?: number;
            /** 品目ID */
            item_id?: number;
            /** 順序 */
            order: number;
            /** 数量 */
            qty?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            tag_ids?: number[];
            /** 税区分コード */
            tax_code?: number;
            /**
             * 行の種類
             * <ul>
             * <li>normal、discountを指定する場合、account_item_id,tax_codeとunit_priceが必須となります。</li>
             * <li>normalを指定した場合、qtyが必須となります。</li>
             * </ul>
             */
            type: "normal" | "discount" | "text";
            /** 単位 */
            unit?: string;
            /** 単価 (tax_entry_method: inclusiveの場合は税込価格、tax_entry_method: exclusiveの場合は税抜価格となります) */
            unit_price?: number;
            /** 消費税額 */
            vat?: number | null;
        }[];
        /**
         * 見積書レイアウト
         * * `default_classic` - レイアウト１/クラシック (デフォルト)
         *
         * * `standard_classic` - レイアウト２/クラシック
         *
         * * `envelope_classic` - 封筒１/クラシック
         *
         * * `default_modern` - レイアウト１/モダン
         *
         * * `standard_modern` - レイアウト２/モダン
         *
         * * `envelope_modern` - 封筒/モダン
         */
        quotation_layout?: "default_classic" | "standard_classic" | "envelope_classic" | "default_modern" | "standard_modern" | "envelope_modern";
        /** 見積書番号 (デフォルト: 自動採番されます) */
        quotation_number?: string;
        /** 見積書ステータス  (unsubmitted: 送付待ち, submitted: 送付済み) */
        quotation_status?: "unsubmitted" | "submitted";
        /** 見積書の消費税計算方法(inclusive: 内税表示, exclusive: 外税表示 (デフォルト)) */
        tax_entry_method?: "inclusive" | "exclusive";
        /** タイトル (デフォルト: 見積書) */
        title?: string;
    }
    export interface receiptCreateParams {
        /** 事業所ID */
        company_id: number;
        /** メモ (255文字以内) */
        description?: string;
        /** 取引日 (yyyy-mm-dd) */
        issue_date?: string;
        /** 証憑ファイル */
        receipt: string;
    }
    export interface receiptResponse {
        receipt: {
            /** 作成日時（ISO8601形式） */
            created_at: string;
            /** メモ */
            description?: string;
            /**
             * ファイルのダウンロードURL（freeeにログインした状態でのみ閲覧可能です。）
             * <br>
             * <br>
             * file_srcは廃止予定の属性になります。<br>
             * file_srcに替わり、証憑ファイルのダウンロード APIをご利用ください。<br>
             * 証憑ファイルのダウンロードAPIを利用することで、以下のようになります。
             * <ul>
             *   <li>アプリケーション利用者はfreee APIアプリケーションにログインしていれば、証憑ダウンロード毎にfreeeに改めてログインすることなくファイルが参照できるようになります。</li>
             * </ul>
             */
            file_src: string;
            /** 証憑ファイルID */
            id: number;
            /** 発生日 */
            issue_date?: string;
            /** MIMEタイプ */
            mime_type: string;
            /** アップロード元種別 */
            origin: "unknown" | "web" | "mobile_camera" | "mobile_album" | "scansnap" | "scannable" | "dropbox" | "mail" | "safety_contact_file" | "public_api";
            /** ステータス(unconfirmed:確認待ち、confirmed:確認済み、deleted:削除済み、ignored:無視) */
            status: "unconfirmed" | "confirmed" | "deleted" | "ignored";
            user: {
                /** 表示名 */
                display_name?: string | null;
                /** メールアドレス */
                email: string;
                /** ユーザーID */
                id: number;
            };
        };
    }
    export interface receiptUpdateParams {
        /** 事業所ID */
        company_id: number;
        /** メモ (255文字以内) */
        description?: string;
        /** 取引日 (yyyy-mm-dd) */
        issue_date: string;
    }
    export interface renewCreateParams {
        /** 事業所ID */
        company_id: number;
        /** +更新の明細行 */
        details: {
            /** 勘定科目ID */
            account_item_id: number;
            /** 取引金額（税込で指定してください） */
            amount: number;
            /** 備考 */
            description?: string;
            /** 品目ID */
            item_id?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /** 税区分コード */
            tax_code: number;
            /** 消費税額（指定しない場合は自動で計算されます） */
            vat?: number;
        }[];
        /** +更新対象行ID (details(取引の明細行), accruals(債権債務行), renewsのdetails(+更新の明細行)のIDを指定)  */
        renew_target_id: number;
        /** 更新日 (yyyy-mm-dd) */
        update_date: string;
    }
    export interface renewUpdateParams {
        /** 事業所ID */
        company_id: number;
        /** +更新の明細行 */
        details: {
            /** 勘定科目ID */
            account_item_id: number;
            /** 取引金額（税込で指定してください） */
            amount: number;
            /** 備考 */
            description?: string;
            /** 品目ID */
            item_id?: number;
            /** 部門ID */
            section_id?: number;
            /** セグメント１ID */
            segment_1_tag_id?: number;
            /** セグメント２ID */
            segment_2_tag_id?: number;
            /** セグメント３ID */
            segment_3_tag_id?: number;
            /** メモタグID */
            tag_ids?: number[];
            /** 税区分コード */
            tax_code: number;
            /** 消費税額（指定しない場合は自動で計算されます） */
            vat?: number;
        }[];
        /** 更新日 (yyyy-mm-dd) */
        update_date: string;
    }
    export interface sectionParams {
        /** 事業所ID */
        company_id: number;
        /** 正式名称 (255文字以内) */
        long_name?: string;
        /** 部門名 (30文字以内) */
        name: string;
        /** 親部門ID (個人:プレミアムプラン、法人:ベーシックプラン以上) */
        parent_id?: number;
        /** ショートカット１ (20文字以内) */
        shortcut1?: string;
        /** ショートカット２ (20文字以内) */
        shortcut2?: string;
    }
    export interface sectionResponse {
        section: {
            /**
             * 部門の使用設定（true: 使用する、false: 使用しない）
             * <br>
             * <ul>
             *   <li>
             *     本APIでsectionを作成した場合はtrueになります。
             *   </li>
             *   <li>
             *     falseにする場合はWeb画面から変更できます。
             *   </li>
             *   <li>
             *     trueの場合、Web画面での取引登録時などに入力候補として表示されます。
             *   </li>
             *   <li>
             *     falseの場合、部門自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの部門をパラメータに指定すれば、取引などにfalseの部門を設定できます。
             *   </li>
             * </ul>
             */
            available: boolean;
            /** 事業所ID */
            company_id: number;
            /** 部門ID */
            id: number;
            /**
             * <a target="_blank" href="https://support.freee.co.jp/hc/ja/articles/209093566">部門階層</a>
             * <br>
             * ※ indent_count が 0 のときは第一階層の親部門です。
             */
            indent_count?: number;
            /** 正式名称（255文字以内） */
            long_name?: string | null;
            /** 部門名 (30文字以内) */
            name: string;
            /**
             * <a target="_blank" href="https://support.freee.co.jp/hc/ja/articles/209093566">親部門ID</a>
             * <br>
             * ※ parent_id が null のときは第一階層の親部門です。
             */
            parent_id?: number | null;
            /** ショートカット１ (20文字以内) */
            shortcut1?: string | null;
            /** ショートカット２ (20文字以内) */
            shortcut2?: string | null;
        };
    }
    export interface segmentTagParams {
        /** 事業所ID */
        company_id: number;
        /** 備考 (30文字以内) */
        description?: string;
        /** セグメントタグ名 (30文字以内) */
        name: string;
        /** ショートカット１ (20文字以内) */
        shortcut1?: string;
        /** ショートカット２ (20文字以内) */
        shortcut2?: string;
    }
    export interface segmentTagResponse {
        segment_tag: {
            /** 備考 */
            description: string | null;
            /** セグメントタグID */
            id: number;
            /** セグメントタグ名 */
            name: string;
            /** ショートカット１ (20文字以内) */
            shortcut1: string | null;
            /** ショートカット２ (20文字以内) */
            shortcut2: string | null;
        };
    }
    export interface selectablesIndexResponse {
        account_categories?: {
            /** 勘定科目の一覧 */
            account_items: {
                default_tax?: {
                    tax_rate_5?: {
                        /** 税区分ID */
                        id?: number;
                        /** 税区分 */
                        name?: string;
                    };
                    tax_rate_8?: {
                        /** 税区分ID */
                        id?: number;
                        /** 税区分 */
                        name?: string;
                    };
                };
                /** 勘定科目の説明 */
                desc?: string;
                /** 勘定科目の説明（詳細） */
                help?: string;
                /** 勘定科目ID */
                id: number;
                /** 勘定科目 */
                name?: string;
                /** ショートカット */
                shortcut?: string;
            }[];
            /** 収支 */
            balance: "expense" | "income";
            /** カテゴリーの説明 */
            desc?: string;
            /** 事業形態（個人事業主: personal、法人: corporate） */
            org_code: "personal" | "corporate";
            /** カテゴリーコード */
            role: string;
            /** カテゴリー名 */
            title: string;
        }[];
        /** 決算書表示名（小カテゴリー） */
        account_groups?: {
            /** 勘定科目カテゴリーID */
            account_category_id: number;
            /** 年度ID */
            account_structure_id: number;
            /** 作成日時 */
            created_at?: string;
            /** 詳細パラメータの種類 */
            detail_type?: number;
            /** 決算書表示名（小カテゴリー）ID */
            id: number;
            /** 並び順 */
            index: number;
            /** 決算書表示名 */
            name: string;
            /** 更新日時 */
            updated_at?: string;
        }[];
    }
    export interface serviceUnavailableError {
        errors: {
            messages: string[];
            type: "status" | "error";
        }[];
        status_code: number;
    }
    export interface tagParams {
        /** 事業所ID */
        company_id: number;
        /** メモタグ名 (30文字以内) */
        name: string;
        /** ショートカット1 (20文字以内) */
        shortcut1?: string;
        /** ショートカット2 (20文字以内) */
        shortcut2?: string;
    }
    export interface tagResponse {
        tag: {
            /** 事業所ID */
            company_id: number;
            /** タグID */
            id: number;
            /** 名前(30文字以内) */
            name: string;
            /** ショートカット1 (255文字以内) */
            shortcut1?: string | null;
            /** ショートカット2 (255文字以内) */
            shortcut2?: string | null;
            /** 更新日(yyyy-mm-dd) */
            update_date: string;
        };
    }
    export interface taxResponse {
        tax: {
            /** 税区分コード */
            code: number;
            /** 税区分名 */
            name: string;
            /** 税区分名（日本語表示用） */
            name_ja: string;
        };
    }
    export interface tooManyRequestsError {
        meta: {
            /** 設定されている上限値 */
            limit: number;
            /** 使用回数をカウントする期間 (秒) */
            period?: number;
            /** 上限に達するまでの使用可能回数 */
            remaining: number;
            /** （上限値に達した場合）使用回数がリセットされる時刻 */
            reset: string;
        };
        status_code: number;
    }
    export interface transferParams {
        /** 金額 */
        amount: number;
        /** 事業所ID */
        company_id: number;
        /** 振替日 (yyyy-mm-dd) */
        date: string;
        /** 備考 */
        description?: string;
        /** 振替元口座ID */
        from_walletable_id: number;
        /** 振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
        from_walletable_type: "bank_account" | "credit_card" | "wallet";
        /** 振替先口座ID */
        to_walletable_id: number;
        /** 振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
        to_walletable_type: "bank_account" | "credit_card" | "wallet";
    }
    export interface transferResponse {
        transfer: {
            /** 金額 */
            amount: number;
            /** 事業所ID */
            company_id: number;
            /** 振替日 (yyyy-mm-dd) */
            date: string;
            /** 備考 */
            description: string;
            /** 振替元口座ID */
            from_walletable_id: number;
            /** 振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            from_walletable_type: ("bank_account" | "wallet" | "credit_card") | null;
            /** 取引(振替)ID */
            id: number;
            /** 振替先口座ID */
            to_walletable_id: number;
            /** 振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            to_walletable_type: ("bank_account" | "wallet" | "credit_card") | null;
        };
    }
    export interface trialBsResponse {
        trial_bs: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 構成比 */
                composition_ratio?: number;
                /** 貸方金額 */
                credit_amount?: number;
                /** 借方金額 */
                debit_amount?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                items?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** 品目ID */
                    id: number;
                    /** 品目 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** 期首残高 */
                opening_balance?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                partners?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** 取引先ID */
                    id: number;
                    /** 取引先名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** 部門ID */
                    id: number;
                    /** 部門名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** セグメント1タグ名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** セグメント2タグ名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** セグメント3タグ名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialBsThreeYearsResponse {
        trial_bs_three_years: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                items?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 品目ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 品目 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 前年度期末残高 */
                last_year_closing_balance?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                partners?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 取引先ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 取引先名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 部門ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 部門名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント1タグ名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント2タグ名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント3タグ名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
                /** 前々年度期末残高 */
                two_years_before_closing_balance?: number;
                /** 前年比 */
                year_on_year?: number;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialBsTwoYearsResponse {
        trial_bs_two_years: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                items?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 品目ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 品目 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 前年度期末残高 */
                last_year_closing_balance?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                partners?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 取引先ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 取引先名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 部門ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 部門名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント1タグ名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント2タグ名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント3タグ名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
                /** 前年比 */
                year_on_year?: number;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlResponse {
        trial_pl: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 構成比 */
                composition_ratio?: number;
                /** 貸方金額 */
                credit_amount?: number;
                /** 借方金額 */
                debit_amount?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                items?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** 品目ID */
                    id: number;
                    /** 品目 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** 期首残高 */
                opening_balance?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                partners?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** 取引先ID */
                    id: number;
                    /** 取引先名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** 部門ID */
                    id: number;
                    /** 部門名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** セグメント1タグ名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** セグメント2タグ名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 構成比 */
                    composition_ratio?: number;
                    /** 貸方金額 */
                    credit_amount?: number;
                    /** 借方金額 */
                    debit_amount?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** セグメント3タグ名 */
                    name?: string;
                    /** 期首残高 */
                    opening_balance?: number;
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlSectionsResponse {
        trial_pl_sections: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** 部門 */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 部門ID */
                    id: number;
                    /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                    items?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 品目ID */
                        id: number;
                        /** 品目 */
                        name?: string;
                    }[];
                    /** 部門名 */
                    name?: string;
                    /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                    partners?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 取引先ID */
                        id: number;
                        /** 取引先名 */
                        name?: string;
                    }[];
                    /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                    segment_1_tags?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** セグメント1タグID */
                        id: number;
                        /** セグメント1タグ名 */
                        name?: string;
                    }[];
                    /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                    segment_2_tags?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** セグメント2タグID */
                        id: number;
                        /** セグメント2タグ名 */
                        name?: string;
                    }[];
                    /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                    segment_3_tags?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** セグメント3タグID */
                        id: number;
                        /** セグメント3タグ名 */
                        name?: string;
                    }[];
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 出力する部門の指定 */
            section_ids: string;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlSegment_1TagsResponse {
        trial_pl_segment_1_tags: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** セグメント1タグ */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                    items?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 品目ID */
                        id: number;
                        /** 品目 */
                        name?: string;
                    }[];
                    /** セグメント1タグ名 */
                    name?: string;
                    /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                    partners?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 取引先ID */
                        id: number;
                        /** 取引先名 */
                        name?: string;
                    }[];
                    /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                    sections?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 部門ID */
                        id: number;
                        /** 部門名 */
                        name?: string;
                    }[];
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 出力するセグメント1の指定 */
            segment_1_tag_ids: string;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlSegment_2TagsResponse {
        trial_pl_segment_2_tags: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** セグメント2タグ */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                    items?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 品目ID */
                        id: number;
                        /** 品目 */
                        name?: string;
                    }[];
                    /** セグメント2タグ名 */
                    name?: string;
                    /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                    partners?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 取引先ID */
                        id: number;
                        /** 取引先名 */
                        name?: string;
                    }[];
                    /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                    sections?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 部門ID */
                        id: number;
                        /** 部門名 */
                        name?: string;
                    }[];
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 出力するセグメント2の指定 */
            segment_2_tag_ids: string;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlSegment_3TagsResponse {
        trial_pl_segment_3_tags: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** セグメント3タグ */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                    items?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 品目ID */
                        id: number;
                        /** 品目 */
                        name?: string;
                    }[];
                    /** セグメント3タグ名 */
                    name?: string;
                    /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                    partners?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 取引先ID */
                        id: number;
                        /** 取引先名 */
                        name?: string;
                    }[];
                    /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                    sections?: {
                        /** 期末残高 */
                        closing_balance?: number;
                        /** 部門ID */
                        id: number;
                        /** 部門名 */
                        name?: string;
                    }[];
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 出力するセグメント3の指定 */
            segment_3_tag_ids: string;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlThreeYearsResponse {
        trial_pl_three_years: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                items?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 品目ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 品目 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 前年度期末残高 */
                last_year_closing_balance?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                partners?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 取引先ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 取引先名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 部門ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 部門名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント1タグ名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント2タグ名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント3タグ名 */
                    name?: string;
                    /** 前々年度期末残高 */
                    two_years_before_closing_balance?: number;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
                /** 前々年度期末残高 */
                two_years_before_closing_balance?: number;
                /** 前年比 */
                year_on_year?: number;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface trialPlTwoYearsResponse {
        trial_pl_two_years: {
            /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group）(条件に指定した時のみ含まれる） */
            account_item_display_type?: "account_item" | "group";
            /** 決算整理仕訳のみ: only, 決算整理仕訳以外: without(条件に指定した時のみ含まれる） */
            adjustment?: "only" | "without";
            /** 未承認を除く: without_in_progress (デフォルト), 全てのステータス: all(条件に指定した時のみ含まれる） */
            approval_flow_status?: "without_in_progress" | "all";
            balances: {
                /** 勘定科目カテゴリー名 */
                account_category_name?: string;
                /** 決算書表示名(account_item_display_type:group指定時に決算書表示名の時のみ含まれる) */
                account_group_name?: string;
                /** 勘定科目ID(勘定科目の時のみ含まれる) */
                account_item_id?: number;
                /** 勘定科目名(勘定科目の時のみ含まれる) */
                account_item_name?: string;
                /** 期末残高 */
                closing_balance?: number;
                /** 階層レベル */
                hierarchy_level?: number;
                /** breakdown_display_type:item, account_item_display_type:account_item指定時のみ含まれる */
                items?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 品目ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 品目 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 前年度期末残高 */
                last_year_closing_balance?: number;
                /** 上位勘定科目カテゴリー名(勘定科目カテゴリーの時のみ、上層が存在する場合含まれる) */
                parent_account_category_name?: string;
                /** breakdown_display_type:partner, account_item_display_type:account_item指定時のみ含まれる */
                partners?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 取引先ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 取引先名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:section, account_item_display_type:account_item指定時のみ含まれる */
                sections?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** 部門ID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** 部門名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_1_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_1_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント1タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント1タグ名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_2_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_2_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント2タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント2タグ名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** breakdown_display_type:segment_3_tag, account_item_display_type:account_item指定時のみ含まれる */
                segment_3_tags?: {
                    /** 期末残高 */
                    closing_balance?: number;
                    /** セグメント3タグID */
                    id: number;
                    /** 前年度期末残高 */
                    last_year_closing_balance?: number;
                    /** セグメント3タグ名 */
                    name?: string;
                    /** 前年比 */
                    year_on_year?: number;
                }[];
                /** 合計行(勘定科目カテゴリーの時のみ含まれる) */
                total_line?: boolean;
                /** 前年比 */
                year_on_year?: number;
            }[];
            /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag）(条件に指定した時のみ含まれる） */
            breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
            /** 事業所ID */
            company_id: number;
            /** 配賦仕訳のみ：only,配賦仕訳以外：without(条件に指定した時のみ含まれる） */
            cost_allocation?: "only" | "without";
            /** 作成日時 */
            created_at?: string;
            /** 発生日で絞込：終了日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            end_date?: string;
            /** 発生月で絞込：終了会計月(1-12)(条件に指定した時のみ含まれる） */
            end_month?: number;
            /** 会計年度(条件に指定した時、または条件に月、日条件がない時のみ含まれる） */
            fiscal_year?: number;
            /** 品目ID(条件に指定した時のみ含まれる） */
            item_id?: number;
            /** 取引先コード(条件に指定した時のみ含まれる） */
            partner_code?: string;
            /** 取引先ID(条件に指定した時のみ含まれる） */
            partner_id?: number;
            /** 部門ID(条件に指定した時のみ含まれる） */
            section_id?: number;
            /** 発生日で絞込：開始日(yyyy-mm-dd)(条件に指定した時のみ含まれる） */
            start_date?: string;
            /** 発生月で絞込：開始会計月(1-12)(条件に指定した時のみ含まれる） */
            start_month?: number;
        };
        /** 集計結果が最新かどうか */
        up_to_date: boolean;
        /** 集計が最新でない場合の要因情報 */
        up_to_date_reasons?: {
            /** コード */
            code: "depreciation_creating" | "depreciation_create_error";
            /** 集計が最新でない理由 */
            message: string;
        }[];
    }
    export interface unauthorizedError {
        message?: string;
        messages?: string;
    }
    export interface userCapability {
        /** 作成 */
        create?: boolean;
        /** 削除 */
        destroy?: boolean;
        /** 閲覧 */
        read?: boolean;
        /** 更新 */
        update?: boolean;
    }
    export interface userParams {
        /** 表示名 (20文字以内) */
        display_name?: string;
        /** 氏名（名） (20文字以内) */
        first_name?: string;
        /** 氏名（カナ・名） (20文字以内) */
        first_name_kana?: string;
        /** 氏名（姓） (20文字以内) */
        last_name?: string;
        /** 氏名（カナ・姓） (20文字以内) */
        last_name_kana?: string;
    }
    export interface userResponse {
        user?: {
            /** 表示名 */
            display_name?: string | null;
            /** メールアドレス */
            email: string;
            /** 氏名（名） */
            first_name?: string | null;
            /** 氏名（カナ・名） */
            first_name_kana?: string | null;
            /** ユーザーID */
            id: number;
            /** 氏名（姓） */
            last_name?: string | null;
            /** 氏名（カナ・姓） */
            last_name_kana?: string | null;
        };
    }
    export interface walletTxnParams {
        /** 取引金額 */
        amount: number;
        /** 残高 (銀行口座等) */
        balance?: number;
        /** 事業所ID */
        company_id: number;
        /** 取引日 (yyyy-mm-dd) */
        date: string;
        /** 取引内容 */
        description?: string;
        /** 入金／出金 (入金: income, 出金: expense) */
        entry_side: "income" | "expense";
        /** 口座ID */
        walletable_id: number;
        /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
        walletable_type: "bank_account" | "credit_card" | "wallet";
    }
    export interface walletTxnResponse {
        wallet_txn: {
            /** 取引金額 */
            amount: number;
            /** 残高(銀行口座等) */
            balance: number;
            /** 事業所ID */
            company_id: number;
            /** 取引日(yyyy-mm-dd) */
            date: string;
            /** 取引内容 */
            description: string;
            /** 未決済金額 */
            due_amount: number;
            /** 入金／出金 (入金: income, 出金: expense) */
            entry_side: "income" | "expense";
            /** 明細ID */
            id: number;
            /** 明細のステータス（消込待ち: 1, 消込済み: 2, 無視: 3, 消込中: 4） */
            status: number;
            /** 口座ID */
            walletable_id: number;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            walletable_type: "bank_account" | "credit_card" | "wallet";
        };
    }
    export interface walletableCreateParams {
        /** サービスID */
        bank_id?: number;
        /** 事業所ID */
        company_id: number;
        /** 決算書表示名（小カテゴリー）　例：売掛金, 受取手形, 未収入金（法人のみ）, 買掛金, 支払手形, 未払金, 預り金, 前受金 */
        group_name?: string;
        /** 口座名 (255文字以内) */
        name: string;
        /** 口座種別（bank_account : 銀行口座, credit_card : クレジットカード, wallet : その他の決済口座） */
        type: "bank_account" | "credit_card" | "wallet";
    }
    export interface walletableCreateResponse {
        walletable: {
            /** サービスID */
            bank_id: number;
            /** 口座ID */
            id: number;
            /** 口座名, 最大255文字 */
            name: string;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type: "bank_account" | "credit_card" | "wallet";
        };
    }
    export interface walletableResponse {
        walletable: {
            /** サービスID */
            bank_id: number | null;
            /** 口座ID */
            id: number;
            /** 同期残高 */
            last_balance?: number;
            /** 口座名 (255文字以内) */
            name: string;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type: "bank_account" | "credit_card" | "wallet";
            /** 登録残高 */
            walletable_balance?: number;
        };
    }
    export interface walletableUpdateParams {
        /** 事業所ID */
        company_id: number;
        /** 口座名 (255文字以内) */
        name: string;
    }
}
export interface Parameter$get_account_items {
    /** 事業所ID */
    company_id: number;
    /** 基準日:指定した場合、勘定科目に紐づく税区分(default_tax_code)が、基準日の税率に基づいて返ります。 */
    base_date?: string;
}
export interface Response$get_account_items$Status$200 {
    "application/json": Schemas.accountItemsResponse;
}
export interface Response$get_account_items$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_account_items$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_account_items$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_account_items$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_account_item {
    "application/json": Schemas.accountItemParams;
    "application/x-www-form-urlencoded": Schemas.accountItemParams;
}
export interface Response$create_account_item$Status$201 {
    "application/json": Schemas.accountItemResponse;
}
export interface Response$create_account_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_account_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_account_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_account_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_account_item {
    /** 事業所ID */
    company_id: number;
    /** 勘定科目ID */
    id: number;
}
export interface Response$get_account_item$Status$200 {
    "application/json": Schemas.accountItemResponse;
}
export interface Response$get_account_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_account_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_account_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_account_item$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_account_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_account_item {
    id: number;
}
export interface RequestBody$update_account_item {
    "application/json": Schemas.accountItemParams;
    "application/x-www-form-urlencoded": Schemas.accountItemParams;
}
export interface Response$update_account_item$Status$200 {
    "application/json": Schemas.accountItemResponse;
}
export interface Response$update_account_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_account_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_account_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_account_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Response$update_account_item$Status$503 {
    "application/json": Schemas.serviceUnavailableError;
}
export interface Parameter$destroy_account_item {
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_account_item$Status$204 {
}
export interface Response$destroy_account_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_account_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_account_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_account_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_approval_flow_routes {
    /** 事業所ID */
    company_id: number;
    /** 経路に含まれるユーザーのユーザーID */
    included_user_id?: number;
    /**
     * 申請種別（各申請種別が使用できる申請経路に絞り込めます。例えば、ApprovalRequest を指定すると、各種申請が使用できる申請経路に絞り込めます。）
     * * `TxnApproval` - 仕訳承認
     * * `ExpenseApplication` - 経費精算
     * * `PaymentRequest` - 支払依頼
     * * `ApprovalRequest` - 各種申請
     * * `DocApproval` - 請求書等 (見積書・納品書・請求書・発注書)
     */
    usage?: "TxnApproval" | "ExpenseApplication" | "PaymentRequest" | "ApprovalRequest" | "DocApproval";
    /** 申請フォームID request_form_id指定時はusage条件をApprovalRequestに指定してください。指定しない場合無効になります。 */
    request_form_id?: number;
}
export interface Response$get_approval_flow_routes$Status$200 {
    "application/json": Schemas.approvalFlowRoutesIndexResponse;
}
export interface Response$get_approval_flow_routes$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_approval_flow_routes$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_approval_flow_routes$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_approval_flow_routes$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_approval_flow_routes$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_approval_flow_route {
    /** 経路申請ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_approval_flow_route$Status$200 {
    "application/json": Schemas.approvalFlowRouteResponse;
}
export interface Response$get_approval_flow_route$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_approval_flow_route$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_approval_flow_route$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_approval_flow_route$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_approval_flow_route$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_approval_requests {
    /** 事業所ID */
    company_id: number;
    /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し) */
    status?: "draft" | "in_progress" | "approved" | "rejected" | "feedback";
    /** 申請No. */
    application_number?: number;
    /** 申請タイトル */
    title?: string;
    /** 申請フォームID */
    form_id?: number;
    /** 申請日で絞込：開始日(yyyy-mm-dd) */
    start_application_date?: string;
    /** 申請日で絞込：終了日(yyyy-mm-dd) */
    end_application_date?: string;
    /** 申請者のユーザーID */
    applicant_id?: number;
    /** 金額で絞込：以上 */
    min_amount?: number;
    /** 金額で絞込：以下 */
    max_amount?: number;
    /** 承認者のユーザーID */
    approver_id?: number;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) */
    limit?: number;
}
export interface Response$get_approval_requests$Status$200 {
    "application/json": Schemas.approvalRequestsIndexResponse;
}
export interface Response$get_approval_requests$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_approval_requests$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_approval_requests$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_approval_requests$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_approval_requests$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_approval_request {
    "application/json": Schemas.approvalRequestCreateParams;
    "application/x-www-form-urlencoded": Schemas.approvalRequestCreateParams;
}
export interface Response$create_approval_request$Status$201 {
    "application/json": Schemas.approvalRequestResponse;
}
export interface Response$create_approval_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_approval_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_approval_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_approval_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$create_approval_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_approval_request_forms {
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_approval_request_forms$Status$200 {
    "application/json": Schemas.approvalRequestFormIndexResponse;
}
export interface Response$get_approval_request_forms$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_approval_request_forms$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_approval_request_forms$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_approval_request_forms$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_approval_request_forms$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_approval_request_form {
    /** 申請フォームID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_approval_request_form$Status$200 {
    "application/json": Schemas.approvalRequestFormResponse;
}
export interface Response$get_approval_request_form$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_approval_request_form$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_approval_request_form$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_approval_request_form$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_approval_request_form$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_approval_request {
    /** 各種申請ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_approval_request$Status$200 {
    "application/json": Schemas.approvalRequestResponse;
}
export interface Response$get_approval_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_approval_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_approval_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_approval_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_approval_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_approval_request {
    /** 各種申請ID */
    id: number;
}
export interface RequestBody$update_approval_request {
    "application/json": Schemas.approvalRequestUpdateParams;
    "application/x-www-form-urlencoded": Schemas.approvalRequestUpdateParams;
}
export interface Response$update_approval_request$Status$200 {
    "application/json": Schemas.approvalRequestResponse;
}
export interface Response$update_approval_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_approval_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_approval_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_approval_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_approval_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_approval_request {
    /** 各種申請ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_approval_request$Status$204 {
}
export interface Response$destroy_approval_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_approval_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_approval_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_approval_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_approval_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_approval_request_action {
    /** 各種申請ID */
    id: number;
}
export interface RequestBody$update_approval_request_action {
    "application/json": Schemas.approvalRequestActionCreateParams;
    "application/x-www-form-urlencoded": Schemas.approvalRequestActionCreateParams;
}
export interface Response$update_approval_request_action$Status$201 {
    "application/json": Schemas.approvalRequestResponse;
}
export interface Response$update_approval_request_action$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_approval_request_action$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_approval_request_action$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_approval_request_action$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_approval_request_action$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_banks {
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500) */
    limit?: number;
    /** サービス種別 */
    type?: "bank_account" | "credit_card" | "wallet";
}
export interface Response$get_banks$Status$200 {
    "application/json": {
        banks: {
            /** 連携サービスID */
            id: number;
            /** 連携サービス名 */
            name?: string;
            /** 連携サービス名(カナ) */
            name_kana?: string | null;
            /** 連携サービス種別: (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type?: "bank_account" | "credit_card" | "wallet";
        }[];
    };
}
export interface Response$get_banks$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_banks$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_banks$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_banks$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_bank {
    /** 連携サービスID */
    id: number;
}
export interface Response$get_bank$Status$200 {
    "application/json": Schemas.bankResponse;
}
export interface Response$get_bank$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_bank$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_bank$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_bank$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_bank$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Response$get_companies$Status$200 {
    "application/json": Schemas.companyIndexResponse;
}
export interface Response$get_companies$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_companies$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_companies$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_companies$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_company {
    /** 事業所ID */
    id: number;
    /** 取得情報に勘定科目・税区分コード・税区分・品目・取引先・部門・メモタグ・口座の一覧を含める */
    details?: boolean;
    /** 取得情報に勘定科目一覧を含める */
    account_items?: boolean;
    /** 取得情報に税区分コード・税区分一覧を含める */
    taxes?: boolean;
    /** 取得情報に品目一覧を含める */
    items?: boolean;
    /** 取得情報に取引先一覧を含める */
    partners?: boolean;
    /** 取得情報に部門一覧を含める */
    sections?: boolean;
    /** 取得情報にメモタグ一覧を含める */
    tags?: boolean;
    /** 取得情報に口座一覧を含める */
    walletables?: boolean;
}
export interface Response$get_company$Status$200 {
    "application/json": Schemas.companyResponse;
}
export interface Response$get_company$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_company$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_company$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_company$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_deals {
    /** 事業所ID */
    company_id: number;
    /** 取引先IDで絞込 */
    partner_id?: number;
    /** 勘定科目IDで絞込 */
    account_item_id?: number;
    /** 取引先コードで絞込 */
    partner_code?: string;
    /** 決済状況で絞込 (未決済: unsettled, 完了: settled) */
    status?: "unsettled" | "settled";
    /** 収支区分 (収入: income, 支出: expense) */
    type?: "income" | "expense";
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_issue_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_issue_date?: string;
    /** 支払期日で絞込：開始日(yyyy-mm-dd) */
    start_due_date?: string;
    /** 支払期日で絞込：終了日(yyyy-mm-dd) */
    end_due_date?: string;
    /** +更新日で絞込：開始日(yyyy-mm-dd) */
    start_renew_date?: string;
    /** +更新日で絞込：終了日(yyyy-mm-dd) */
    end_renew_date?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最大: 100)  */
    limit?: number;
    /** 取引登録元アプリで絞込（me: 本APIを叩くアプリ自身から登録した取引のみ） */
    registered_from?: "me";
    /** 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） */
    accruals?: "without" | "with";
}
export interface Response$get_deals$Status$200 {
    "application/json": {
        deals: {
            /** 金額 */
            amount: number;
            /** 事業所ID */
            company_id: number;
            /** 取引の明細行 */
            details?: {
                /** 勘定科目ID */
                account_item_id: number;
                /** 取引金額 */
                amount: number;
                /** 備考 */
                description?: string;
                /** 貸借（貸方: credit, 借方: debit） */
                entry_side: "credit" | "debit";
                /** 取引行ID */
                id: number;
                /** 品目ID */
                item_id?: number | null;
                /** 部門ID */
                section_id?: number | null;
                /** セグメント１ID */
                segment_1_tag_id?: number | null;
                /** セグメント２ID */
                segment_2_tag_id?: number | null;
                /** セグメント３ID */
                segment_3_tag_id?: number | null;
                /** メモタグID */
                tag_ids?: number[];
                /** 税区分コード */
                tax_code: number;
                /** 消費税額 */
                vat: number;
            }[];
            /** 支払金額 */
            due_amount?: number;
            /** 支払期日 (yyyy-mm-dd) */
            due_date?: string;
            /** 取引ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 取引先コード */
            partner_code?: string | null;
            /** 取引先ID */
            partner_id: number;
            /** 取引の支払行 */
            payments?: {
                /** 支払金額 */
                amount: number;
                /** 支払日 */
                date: string;
                /** 口座ID（from_walletable_typeがprivate_account_itemの場合は勘定科目ID） */
                from_walletable_id?: number;
                /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet, プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）: private_account_item) */
                from_walletable_type?: "bank_account" | "credit_card" | "wallet" | "private_account_item";
                /** 取引行ID */
                id: number;
            }[];
            /** 証憑ファイル（ファイルボックスのファイル） */
            receipts?: {
                /** 作成日時（ISO8601形式） */
                created_at: string;
                /** メモ */
                description?: string;
                /**
                 * ファイルのダウンロードURL（freeeにログインした状態でのみ閲覧可能です。）
                 * <br>
                 * <br>
                 * file_srcは廃止予定の属性になります。<br>
                 * file_srcに替わり、証憑ファイル（ファイルボックスのファイル）のダウンロード APIをご利用ください。<br>
                 * 証憑ファイル（ファイルボックスのファイル）のダウンロードAPIを利用することで、以下のようになります。
                 * <ul>
                 *   <li>アプリケーション利用者はfreee APIアプリケーションにログインしていれば、証憑ダウンロード毎にfreeeに改めてログインすることなくファイルが参照できるようになります。</li>
                 * </ul>
                 */
                file_src: string;
                /** 証憑ファイルID（ファイルボックスのファイルID） */
                id: number;
                /** 発生日 */
                issue_date?: string;
                /** MIMEタイプ */
                mime_type: string;
                /** アップロード元種別 */
                origin: "unknown" | "web" | "mobile_camera" | "mobile_album" | "scansnap" | "scannable" | "dropbox" | "mail" | "safety_contact_file" | "public_api";
                /** ステータス(unconfirmed:確認待ち、confirmed:確認済み、deleted:削除済み、ignored:無視) */
                status: "unconfirmed" | "confirmed" | "deleted" | "ignored";
                user: {
                    /** 表示名 */
                    display_name?: string | null;
                    /** メールアドレス */
                    email: string;
                    /** ユーザーID */
                    id: number;
                };
            }[];
            /** 管理番号 */
            ref_number?: string;
            /** 取引の+更新行 */
            renews?: {
                /** +更新の明細行一覧（配列） */
                details: {
                    /** 勘定科目ID */
                    account_item_id: number;
                    /** 金額（税込で指定してください） */
                    amount: number;
                    /** 備考 */
                    description?: string | null;
                    /** 貸借(貸方: credit, 借方: debit) */
                    entry_side: "credit" | "debit";
                    /** +更新の明細行ID */
                    id: number;
                    /** 品目ID */
                    item_id?: number | null;
                    /** 部門ID */
                    section_id?: number | null;
                    /** セグメント１ID */
                    segment_1_tag_id?: number | null;
                    /** セグメント２ID */
                    segment_2_tag_id?: number | null;
                    /** セグメント３ID */
                    segment_3_tag_id?: number | null;
                    tag_ids: number[];
                    /** 税区分コード */
                    tax_code: number;
                    /** 消費税額（指定しない場合は自動で計算されます） */
                    vat: number;
                }[];
                /** +更新行ID */
                id: number;
                /** +更新の対象行ID */
                renew_target_id: number;
                /** +更新の対象行タイプ */
                renew_target_type: "detail" | "accrual" | "renew";
                /** 更新日 (yyyy-mm-dd) */
                update_date: string;
            }[];
            /** 決済状況 (未決済: unsettled, 完了: settled) */
            status: "unsettled" | "settled";
            /** 収支区分 (収入: income, 支出: expense) */
            type?: "income" | "expense";
        }[];
        meta: {
            /** 検索条件に合致する取引の総数 */
            total_count: number;
        };
    };
}
export interface Response$get_deals$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_deals$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_deals$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_deals$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_deals$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_deal {
    "application/json": Schemas.dealCreateParams;
    "application/x-www-form-urlencoded": Schemas.dealCreateParams;
}
export interface Response$create_deal$Status$201 {
    "application/json": Schemas.dealCreateResponse;
}
export interface Response$create_deal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_deal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_deal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_deal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$create_deal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_deal {
    /** 事業所ID */
    company_id: number;
    id: number;
    /** 取引の債権債務行の表示（without: 表示しない(デフォルト), with: 表示する） */
    accruals?: "without" | "with";
}
export interface Response$get_deal$Status$200 {
    "application/json": Schemas.dealResponse;
}
export interface Response$get_deal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_deal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_deal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_deal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_deal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_deal {
    /** 取引ID */
    id: number;
}
export interface RequestBody$update_deal {
    "application/json": Schemas.dealUpdateParams;
    "application/x-www-form-urlencoded": Schemas.dealUpdateParams;
}
export interface Response$update_deal$Status$200 {
    "application/json": Schemas.dealResponse;
}
export interface Response$update_deal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_deal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_deal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_deal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_deal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_deal {
    /** 取引ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_deal$Status$204 {
}
export interface Response$destroy_deal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_deal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_deal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_deal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_deal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$create_deal_payment {
    /** 取引ID */
    id: number;
}
export interface RequestBody$create_deal_payment {
    "application/json": Schemas.paymentParams;
    "application/x-www-form-urlencoded": Schemas.paymentParams;
}
export interface Response$create_deal_payment$Status$201 {
    "application/json": Schemas.dealResponse;
}
export interface Response$create_deal_payment$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_deal_payment$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_deal_payment$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_deal_payment$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$create_deal_payment$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_deal_payment {
    /** 取引ID */
    id: number;
    /** 決済ID */
    payment_id: number;
}
export interface RequestBody$update_deal_payment {
    "application/json": Schemas.paymentParams;
    "application/x-www-form-urlencoded": Schemas.paymentParams;
}
export interface Response$update_deal_payment$Status$200 {
    "application/json": Schemas.dealResponse;
}
export interface Response$update_deal_payment$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_deal_payment$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_deal_payment$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_deal_payment$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_deal_payment$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_deal_payment {
    /** 取引ID */
    id: number;
    /** 決済ID */
    payment_id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_deal_payment$Status$204 {
}
export interface Response$destroy_deal_payment$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_deal_payment$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_deal_payment$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_deal_payment$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_deal_payment$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$create_deal_renew {
    /** 取引ID */
    id: number;
}
export interface RequestBody$create_deal_renew {
    "application/json": Schemas.renewCreateParams;
    "application/x-www-form-urlencoded": Schemas.renewCreateParams;
}
export interface Response$create_deal_renew$Status$201 {
    "application/json": Schemas.dealResponse;
}
export interface Response$create_deal_renew$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_deal_renew$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_deal_renew$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_deal_renew$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_deal_renew {
    /** 取引ID */
    id: number;
    /** +更新ID */
    renew_id: number;
}
export interface RequestBody$update_deal_renew {
    "application/json": Schemas.renewUpdateParams;
    "application/x-www-form-urlencoded": Schemas.renewUpdateParams;
}
export interface Response$update_deal_renew$Status$200 {
    "application/json": Schemas.dealResponse;
}
export interface Response$update_deal_renew$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_deal_renew$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_deal_renew$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_deal_renew$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$delete_deal_renew {
    /** 取引ID */
    id: number;
    /** +更新ID */
    renew_id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$delete_deal_renew$Status$200 {
    "application/json": Schemas.dealResponse;
}
export interface Response$delete_deal_renew$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$delete_deal_renew$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$delete_deal_renew$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$delete_deal_renew$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_expense_application_line_templates {
    /** 事業所ID */
    company_id: number;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 100) */
    limit?: number;
}
export interface Response$get_expense_application_line_templates$Status$200 {
    "application/json": {
        expense_application_line_templates: {
            /** 勘定科目ID */
            account_item_id?: number;
            /** 勘定科目名 */
            account_item_name: string;
            /** 経費科目の説明 */
            description?: string;
            /** 経費科目ID */
            id: number;
            /** 内容の補足 */
            line_description?: string;
            /** 経費科目名 */
            name: string;
            /** 添付ファイルの必須/任意 */
            required_receipt?: boolean;
            /** 税区分コード */
            tax_code?: number;
            /** 税区分名 */
            tax_name: string;
        }[];
    };
}
export interface Response$get_expense_application_line_templates$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_expense_application_line_templates$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_expense_application_line_templates$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_expense_application_line_templates$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_expense_application_line_template {
    "application/json": Schemas.expenseApplicationLineTemplateParams;
    "application/x-www-form-urlencoded": Schemas.expenseApplicationLineTemplateParams;
}
export interface Response$create_expense_application_line_template$Status$201 {
    "application/json": Schemas.expenseApplicationLineTemplateResponse;
}
export interface Response$create_expense_application_line_template$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_expense_application_line_template$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_expense_application_line_template$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_expense_application_line_template$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_expense_application_line_template {
    /** 経費科目ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_expense_application_line_template$Status$200 {
    "application/json": Schemas.expenseApplicationLineTemplateResponse;
}
export interface Response$get_expense_application_line_template$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_expense_application_line_template$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_expense_application_line_template$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_expense_application_line_template$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_expense_application_line_template$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_expense_application_line_template {
    /** 経費科目ID */
    id: number;
}
export interface RequestBody$update_expense_application_line_template {
    "application/json": Schemas.expenseApplicationLineTemplateParams;
    "application/x-www-form-urlencoded": Schemas.expenseApplicationLineTemplateParams;
}
export interface Response$update_expense_application_line_template$Status$200 {
    "application/json": Schemas.expenseApplicationLineTemplateResponse;
}
export interface Response$update_expense_application_line_template$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_expense_application_line_template$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_expense_application_line_template$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_expense_application_line_template$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_expense_application_line_template$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_expense_application_line_template {
    /** 経費科目ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_expense_application_line_template$Status$204 {
}
export interface Response$destroy_expense_application_line_template$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_expense_application_line_template$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_expense_application_line_template$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_expense_application_line_template$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_expense_application_line_template$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_expense_applications {
    /** 事業所ID */
    company_id: number;
    /** 申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:清算待ち, settled:精算済み) */
    status?: "draft" | "in_progress" | "approved" | "rejected" | "feedback" | "unsettled" | "settled";
    /** true:給与連携あり、false:給与連携なし、未指定時:絞り込みなし */
    payroll_attached?: boolean;
    /** 発生日(経費申請項目の日付)で絞込：開始日(yyyy-mm-dd) */
    start_transaction_date?: string;
    /** 発生日(経費申請項目の日付)で絞込：終了日(yyyy-mm-dd) */
    end_transaction_date?: string;
    /** 申請No. */
    application_number?: number;
    /** 申請タイトル */
    title?: string;
    /** 申請日で絞込：開始日(yyyy-mm-dd) */
    start_issue_date?: string;
    /** 申請日で絞込：終了日(yyyy-mm-dd) */
    end_issue_date?: string;
    /** 申請者のユーザーID */
    applicant_id?: number;
    /** 承認者のユーザーID */
    approver_id?: number;
    /** 金額で絞込 (下限金額) */
    min_amount?: number;
    /** 金額で絞込 (上限金額) */
    max_amount?: number;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) */
    limit?: number;
}
export interface Response$get_expense_applications$Status$200 {
    "application/json": Schemas.expenseApplicationsIndexResponse;
}
export interface Response$get_expense_applications$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_expense_applications$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_expense_applications$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_expense_applications$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_expense_application {
    "application/json": Schemas.expenseApplicationCreateParams;
    "application/x-www-form-urlencoded": Schemas.expenseApplicationCreateParams;
}
export interface Response$create_expense_application$Status$201 {
    "application/json": Schemas.expenseApplicationResponse;
}
export interface Response$create_expense_application$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_expense_application$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_expense_application$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_expense_application$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_expense_application {
    /** 経費申請ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_expense_application$Status$200 {
    "application/json": Schemas.expenseApplicationResponse;
}
export interface Response$get_expense_application$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_expense_application$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_expense_application$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_expense_application$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_expense_application$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_expense_application {
    /** 経費申請ID */
    id: number;
}
export interface RequestBody$update_expense_application {
    "application/json": Schemas.expenseApplicationUpdateParams;
    "application/x-www-form-urlencoded": Schemas.expenseApplicationUpdateParams;
}
export interface Response$update_expense_application$Status$200 {
    "application/json": Schemas.expenseApplicationResponse;
}
export interface Response$update_expense_application$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_expense_application$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_expense_application$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_expense_application$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_expense_application$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_expense_application {
    /** 経費申請ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_expense_application$Status$204 {
}
export interface Response$destroy_expense_application$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_expense_application$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_expense_application$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_expense_application$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_expense_application$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_expense_application_action {
    /** 経費申請ID */
    id: number;
}
export interface RequestBody$update_expense_application_action {
    "application/json": Schemas.expenseApplicationActionCreateParams;
    "application/x-www-form-urlencoded": Schemas.expenseApplicationActionCreateParams;
}
export interface Response$update_expense_application_action$Status$201 {
    "application/json": Schemas.expenseApplicationResponse;
}
export interface Response$update_expense_application_action$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_expense_application_action$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_expense_application_action$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_expense_application_action$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_expense_application_action$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_forms_selectables {
    /** 事業所ID */
    company_id: number;
    /** 取得する項目(項目: account_item) */
    includes?: "account_item";
}
export interface Response$get_forms_selectables$Status$200 {
    "application/json": Schemas.selectablesIndexResponse;
}
export interface Response$get_forms_selectables$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_forms_selectables$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_forms_selectables$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_forms_selectables$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_invoices {
    /** 事業所ID */
    company_id: number;
    /** 取引先IDで絞込 */
    partner_id?: number;
    /** 取引先コードで絞込 */
    partner_code?: string;
    /** 請求日の開始日(yyyy-mm-dd) */
    start_issue_date?: string;
    /** 請求日の終了日(yyyy-mm-dd) */
    end_issue_date?: string;
    /** 期日の開始日(yyyy-mm-dd) */
    start_due_date?: string;
    /** 期日の終了日(yyyy-mm-dd) */
    end_due_date?: string;
    /** 請求書番号 */
    invoice_number?: string;
    /** 概要 */
    description?: string;
    /** 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, unsubmitted: 送付待ち, submitted: 送付済み) */
    invoice_status?: "draft" | "applying" | "remanded" | "rejected" | "approved" | "unsubmitted" | "submitted";
    /** 入金ステータス  (unsettled: 入金待ち, settled: 入金済み) */
    payment_status?: "unsettled" | "settled";
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最大: 100)  */
    limit?: number;
}
export interface Response$get_invoices$Status$200 {
    "application/json": Schemas.invoiceIndexResponse;
}
export interface Response$get_invoices$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_invoices$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_invoices$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_invoices$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_invoices$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_invoice {
    "application/json": Schemas.invoiceCreateParams;
    "application/x-www-form-urlencoded": Schemas.invoiceCreateParams;
}
export interface Response$create_invoice$Status$201 {
    "application/json": Schemas.invoiceResponse;
}
export interface Response$create_invoice$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_invoice$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_invoice$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_invoice$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$create_invoice$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_invoice {
    /** 事業所ID */
    company_id: number;
    /** 請求書ID */
    id: number;
}
export interface Response$get_invoice$Status$200 {
    "application/json": Schemas.invoiceResponse;
}
export interface Response$get_invoice$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_invoice$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_invoice$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_invoice$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_invoice$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_invoice {
    /** 請求書ID */
    id: number;
}
export interface RequestBody$update_invoice {
    "application/json": Schemas.invoiceUpdateParams;
    "application/x-www-form-urlencoded": Schemas.invoiceUpdateParams;
}
export interface Response$update_invoice$Status$200 {
    "application/json": Schemas.invoiceResponse;
}
export interface Response$update_invoice$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_invoice$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_invoice$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_invoice$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_invoice$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_invoice {
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_invoice$Status$204 {
}
export interface Response$destroy_invoice$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_invoice$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_invoice$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_invoice$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_invoice$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_items {
    /** 事業所ID */
    company_id: number;
    /** 更新日で絞り込み：開始日(yyyy-mm-dd) */
    start_update_date?: string;
    /** 更新日で絞り込み：終了日(yyyy-mm-dd) */
    end_update_date?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) */
    limit?: number;
}
export interface Response$get_items$Status$200 {
    "application/json": {
        items: {
            /**
             * 品目の使用設定（true: 使用する、false: 使用しない）
             * <br>
             * <ul>
             *   <li>
             *     本APIでitemを作成した場合はtrueになります。
             *   </li>
             *   <li>
             *     falseにする場合はWeb画面から変更できます。
             *   </li>
             *   <li>
             *     trueの場合、Web画面での取引登録時などに入力候補として表示されます。
             *   </li>
             *   <li>
             *     falseの場合、品目自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの品目をパラメータに指定すれば、取引などにfalseの品目を設定できます。
             *   </li>
             * </ul>
             */
            available: boolean;
            /** 事業所ID */
            company_id: number;
            /** 品目ID */
            id: number;
            /** 品目名 (30文字以内) */
            name: string;
            /** ショートカット１ (20文字以内) */
            shortcut1?: string | null;
            /** ショートカット２ (20文字以内) */
            shortcut2?: string | null;
            /** 更新日(yyyy-mm-dd) */
            update_date: string;
        }[];
    };
}
export interface Response$get_items$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_items$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_items$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_items$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_item {
    "application/json": Schemas.itemParams;
    "application/x-www-form-urlencoded": Schemas.itemParams;
}
export interface Response$create_item$Status$201 {
    "application/json": Schemas.itemResponse;
}
export interface Response$create_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_item {
    /** 事業所ID */
    company_id: number;
    /** 品目ID */
    id: number;
}
export interface Response$get_item$Status$200 {
    "application/json": Schemas.itemResponse;
}
export interface Response$get_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_item$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_item {
    /** 品目ID */
    id: number;
}
export interface RequestBody$update_item {
    "application/json": Schemas.itemParams;
    "application/x-www-form-urlencoded": Schemas.itemParams;
}
export interface Response$update_item$Status$200 {
    "application/json": Schemas.itemResponse;
}
export interface Response$update_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_item {
    /** 品目ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_item$Status$204 {
}
export interface Response$destroy_item$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_item$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_item$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_item$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_item$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_journals {
    /** ダウンロード形式 */
    download_type: "csv" | "pdf" | "yayoi" | "generic";
    /** 事業所ID */
    company_id: number;
    /** 補助科目やコメントとして出力する項目 */
    "visible_tags[]"?: ("partner" | "item" | "tag" | "section" | "description" | "wallet_txn_description" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag" | "all")[];
    /** 追加出力するID項目 */
    "visible_ids[]"?: ("deal_id" | "transfer_id" | "manual_journal_id")[];
    /** 取得開始日 (yyyy-mm-dd) */
    start_date?: string;
    /** 取得終了日 (yyyy-mm-dd) */
    end_date?: string;
}
export interface Response$get_journals$Status$202 {
    "application/json": Schemas.journalsResponse;
}
export interface Response$get_journals$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_journals$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_journals$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_journals$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$download_journal {
    /** 受け付けID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$download_journal$Status$200 {
    "application/pdf": string;
    "text/csv": string;
}
export interface Response$download_journal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$download_journal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$download_journal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$download_journal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$download_journal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_journal_status {
    /** 事業所ID */
    company_id: number;
    /** 受け付けID */
    id: number;
}
export interface Response$get_journal_status$Status$200 {
    "application/json": Schemas.journalStatusResponse;
}
export interface Response$get_journal_status$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_journal_status$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_journal_status$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_journal_status$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_journal_status$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_manual_journals {
    /** 事業所ID */
    company_id: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_issue_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_issue_date?: string;
    /** 貸借で絞込 (貸方: credit, 借方: debit) */
    entry_side?: "credit" | "debit";
    /** 勘定科目IDで絞込 */
    account_item_id?: number;
    /** 金額で絞込：下限 */
    min_amount?: number;
    /** 金額で絞込：上限 */
    max_amount?: number;
    /** 取引先IDで絞込（0を指定すると、取引先が未選択の貸借行を絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込 */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択の貸借行を絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択の貸借行を絞り込めます） */
    section_id?: number;
    /** セグメント１IDで絞込（0を指定すると、セグメント１が未選択の貸借行を絞り込めます） */
    segment_1_tag_id?: number;
    /** セグメント２IDで絞込（0を指定すると、セグメント２が未選択の貸借行を絞り込めます） */
    segment_2_tag_id?: number;
    /** セグメント３IDで絞込（0を指定すると、セグメント３が未選択の貸借行を絞り込めます） */
    segment_3_tag_id?: number;
    /** コメント状態で絞込（自分宛のコメント: posted_with_mention, 自分宛のコメント-未解決: raised_with_mention, 自分宛のコメント-解決済: resolved_with_mention, コメントあり: posted, 未解決: raised, 解決済: resolved, コメントなし: none） */
    comment_status?: "posted_with_mention" | "raised_with_mention" | "resolved_with_mention" | "posted" | "raised" | "resolved" | "none";
    /** 重要コメント付きの振替伝票を絞込 */
    comment_important?: boolean;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 仕訳番号で絞込（事業所の仕訳番号形式が有効な場合のみ） */
    txn_number?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  */
    limit?: number;
}
export interface Response$get_manual_journals$Status$200 {
    "application/json": {
        manual_journals: {
            /** 決算整理仕訳フラグ（falseまたは未指定の場合: 日常仕訳） */
            adjustment: boolean;
            /** 事業所ID */
            company_id: number;
            /** 貸借行一覧（配列）: 貸借合わせて100行まで登録できます。 */
            details: {
                /** 勘定科目ID */
                account_item_id: number;
                /** 金額（税込で指定してください） */
                amount: number;
                /** 備考 */
                description: string;
                /** 貸借(貸方: credit, 借方: debit) */
                entry_side: "credit" | "debit";
                /** 貸借行ID */
                id: number;
                /** 品目ID */
                item_id: number | null;
                /** 品目 */
                item_name: string | null;
                /** 取引先コード */
                partner_code?: string | null;
                /** 取引先ID */
                partner_id: number | null;
                /** 正式名称（255文字以内） */
                partner_long_name: string | null;
                /** 取引先名 */
                partner_name: string | null;
                /** 部門ID */
                section_id: number | null;
                /** 部門 */
                section_name: string | null;
                /** セグメント１ID */
                segment_1_tag_id?: number;
                /** セグメント１ID */
                segment_1_tag_name?: number;
                /** セグメント２ID */
                segment_2_tag_id?: number;
                /** セグメント２ */
                segment_2_tag_name?: number;
                /** セグメント３ID */
                segment_3_tag_id?: number;
                /** セグメント３ */
                segment_3_tag_name?: number;
                tag_ids: number[];
                tag_names: string[];
                /** 税区分コード */
                tax_code: number;
                /** 消費税額（指定しない場合は自動で計算されます） */
                vat: number;
            }[];
            /** 振替伝票ID */
            id: number;
            /** 発生日 (yyyy-mm-dd) */
            issue_date: string;
            /** 仕訳番号 */
            txn_number: string | null;
        }[];
    };
}
export interface Response$get_manual_journals$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_manual_journals$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_manual_journals$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_manual_journals$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_manual_journal {
    "application/json": Schemas.manualJournalCreateParams;
    "application/x-www-form-urlencoded": Schemas.manualJournalCreateParams;
}
export interface Response$create_manual_journal$Status$201 {
    "application/json": Schemas.manualJournalResponse;
}
export interface Response$create_manual_journal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_manual_journal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_manual_journal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_manual_journal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Response$create_manual_journal$Status$503 {
    "application/json": Schemas.serviceUnavailableError;
}
export interface Parameter$get_manual_journal {
    /** 事業所ID */
    company_id: number;
    id: number;
}
export interface Response$get_manual_journal$Status$200 {
    "application/json": Schemas.manualJournalResponse;
}
export interface Response$get_manual_journal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_manual_journal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_manual_journal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_manual_journal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_manual_journal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_manual_journal {
    id: number;
}
export interface RequestBody$update_manual_journal {
    "application/json": Schemas.manualJournalUpdateParams;
    "application/x-www-form-urlencoded": Schemas.manualJournalUpdateParams;
}
export interface Response$update_manual_journal$Status$200 {
    "application/json": Schemas.manualJournalResponse;
}
export interface Response$update_manual_journal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_manual_journal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_manual_journal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_manual_journal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_manual_journal {
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_manual_journal$Status$204 {
}
export interface Response$destroy_manual_journal$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_manual_journal$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_manual_journal$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_manual_journal$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_manual_journal$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_partners {
    /** 事業所ID */
    company_id: number;
    /** 更新日で絞り込み：開始日(yyyy-mm-dd) */
    start_update_date?: string;
    /** 更新日で絞り込み：終了日(yyyy-mm-dd) */
    end_update_date?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) */
    limit?: number;
    /** 検索キーワード：取引先名・正式名称・カナ名称に対するあいまい検索で一致、またはショートカットキー1・2のいずれかに完全一致 */
    keyword?: string;
}
export interface Response$get_partners$Status$200 {
    "application/json": Schemas.partnersResponse;
}
export interface Response$get_partners$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_partners$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_partners$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_partners$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_partner {
    "application/json": Schemas.partnerCreateParams;
    "application/x-www-form-urlencoded": Schemas.partnerCreateParams;
}
export interface Response$create_partner$Status$201 {
    "application/json": Schemas.partnerResponse;
}
export interface Response$create_partner$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_partner$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_partner$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_partner$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_partner_by_code {
    /** 取引先コード */
    code: string;
}
export interface RequestBody$update_partner_by_code {
    "application/json": Schemas.partnerUpdateParams;
    "application/x-www-form-urlencoded": Schemas.partnerUpdateParams;
}
export interface Response$update_partner_by_code$Status$200 {
    "application/json": Schemas.partnerResponse;
}
export interface Response$update_partner_by_code$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_partner_by_code$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_partner_by_code$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_partner_by_code$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_partner {
    /** 取引先ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_partner$Status$200 {
    "application/json": Schemas.partnerResponse;
}
export interface Response$get_partner$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_partner$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_partner$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_partner$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_partner$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_partner {
    /** 取引先ID */
    id: number;
}
export interface RequestBody$update_partner {
    "application/json": Schemas.partnerUpdateParams;
    "application/x-www-form-urlencoded": Schemas.partnerUpdateParams;
}
export interface Response$update_partner$Status$200 {
    "application/json": Schemas.partnerResponse;
}
export interface Response$update_partner$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_partner$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_partner$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_partner$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_partner {
    /** 取引先ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_partner$Status$204 {
}
export interface Response$destroy_partner$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_partner$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_partner$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_partner$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_partner$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_payment_requests {
    /** 事業所ID */
    company_id: number;
    /**
     * '申請ステータス(draft:下書き, in_progress:申請中, approved:承認済, rejected:却下, feedback:差戻し)、 取引ステータス(unsettled:支払待ち, settled:支払済み)'<br>
     * approver_id を指定した場合は無効です。
     */
    status?: "draft" | "in_progress" | "approved" | "rejected" | "feedback" | "unsettled" | "settled";
    /** 申請日で絞込：開始日(yyyy-mm-dd) */
    start_application_date?: string;
    /** 申請日で絞込：終了日(yyyy-mm-dd) */
    end_application_date?: string;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_issue_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_issue_date?: string;
    /** 申請No. */
    application_number?: number;
    /** 申請タイトル */
    title?: string;
    /** 申請者のユーザーID */
    applicant_id?: number;
    /**
     * 承認者のユーザーID<br>
     * 'approver_id を指定した場合は、 in_progress: 申請中 の支払依頼のみを返します。'
     */
    approver_id?: number;
    /** 金額で絞込 (下限金額) */
    min_amount?: number;
    /** 金額で絞込 (上限金額) */
    max_amount?: number;
    /** 取引先IDで絞込 */
    partner_id?: number;
    /** 取引先コードで絞込 */
    partner_code?: string;
    /** 支払方法で絞込 (none: 指定なし, domestic_bank_transfer: 国内振込, abroad_bank_transfer: 国外振込, account_transfer: 口座振替, credit_card: クレジットカード) */
    payment_method?: "none" | "domestic_bank_transfer" | "abroad_bank_transfer" | "account_transfer" | "credit_card";
    /** 支払期限で絞込：開始日(yyyy-mm-dd) */
    start_payment_date?: string;
    /** 支払期限で絞込：終了日(yyyy-mm-dd) */
    end_payment_date?: string;
    /** 請求書番号で絞込 */
    document_code?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 500) */
    limit?: number;
}
export interface Response$get_payment_requests$Status$200 {
    "application/json": Schemas.paymentRequestsIndexResponse;
}
export interface Response$get_payment_requests$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_payment_requests$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_payment_requests$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_payment_requests$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_payment_requests$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_payment_request {
    "application/json": Schemas.paymentRequestCreateParams;
    "application/x-www-form-urlencoded": Schemas.paymentRequestCreateParams;
}
export interface Response$create_payment_request$Status$201 {
    "application/json": Schemas.paymentRequestResponse;
}
export interface Response$create_payment_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_payment_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_payment_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_payment_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$create_payment_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_payment_request {
    /** 支払依頼ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_payment_request$Status$200 {
    "application/json": Schemas.paymentRequestResponse;
}
export interface Response$get_payment_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_payment_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_payment_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_payment_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_payment_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_payment_request {
    /** 支払依頼ID */
    id: number;
}
export interface RequestBody$update_payment_request {
    "application/json": Schemas.paymentRequestUpdateParams;
    "application/x-www-form-urlencoded": Schemas.paymentRequestUpdateParams;
}
export interface Response$update_payment_request$Status$200 {
    "application/json": Schemas.paymentRequestResponse;
}
export interface Response$update_payment_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_payment_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_payment_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_payment_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_payment_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_payment_request {
    /** 支払依頼ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_payment_request$Status$204 {
}
export interface Response$destroy_payment_request$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_payment_request$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_payment_request$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_payment_request$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_payment_request$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_payment_request_action {
    /** 支払依頼ID */
    id: number;
}
export interface RequestBody$update_payment_request_action {
    "application/json": Schemas.paymentRequestActionCreateParams;
    "application/x-www-form-urlencoded": Schemas.paymentRequestActionCreateParams;
}
export interface Response$update_payment_request_action$Status$201 {
    "application/json": Schemas.paymentRequestResponse;
}
export interface Response$update_payment_request_action$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_payment_request_action$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_payment_request_action$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_payment_request_action$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_payment_request_action$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_quotations {
    /** 事業所ID */
    company_id: number;
    /** 取引先IDで絞込 */
    partner_id?: number;
    /** 取引先コードで絞込 */
    partner_code?: string;
    /** 見積日の開始日(yyyy-mm-dd) */
    start_issue_date?: string;
    /** 見積日の終了日(yyyy-mm-dd) */
    end_issue_date?: string;
    /** 見積書番号 */
    quotation_number?: string;
    /** 概要 */
    description?: string;
    /** 見積書ステータス  (unsubmitted: 送付待ち, submitted: 送付済み, all: 全て) */
    quotation_status?: "all" | "unsubmitted" | "submitted";
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最大: 100)  */
    limit?: number;
}
export interface Response$get_quotations$Status$200 {
    "application/json": Schemas.quotationIndexResponse;
}
export interface Response$get_quotations$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_quotations$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_quotations$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_quotations$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_quotations$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_quotation {
    "application/json": Schemas.quotationCreateParams;
    "application/x-www-form-urlencoded": Schemas.quotationCreateParams;
}
export interface Response$create_quotation$Status$201 {
    "application/json": Schemas.quotationResponse;
}
export interface Response$create_quotation$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_quotation$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_quotation$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_quotation$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$create_quotation$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_quotation {
    /** 事業所ID */
    company_id: number;
    /** 見積書ID */
    id: number;
}
export interface Response$get_quotation$Status$200 {
    "application/json": Schemas.quotationResponse;
}
export interface Response$get_quotation$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_quotation$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_quotation$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_quotation$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_quotation$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_quotation {
    /** 見積書ID */
    id: number;
}
export interface RequestBody$update_quotation {
    "application/json": Schemas.quotationUpdateParams;
    "application/x-www-form-urlencoded": Schemas.quotationUpdateParams;
}
export interface Response$update_quotation$Status$200 {
    "application/json": Schemas.quotationResponse;
}
export interface Response$update_quotation$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_quotation$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_quotation$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_quotation$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_quotation$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_quotation {
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_quotation$Status$204 {
}
export interface Response$destroy_quotation$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_quotation$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_quotation$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_quotation$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_quotation$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_receipts {
    /** 事業所ID */
    company_id: number;
    /** アップロード日 (yyyy-mm-dd) */
    start_date: string;
    /** アップロード日 (yyyy-mm-dd) */
    end_date: string;
    /** アップロードしたユーザー名、メールアドレス */
    user_name?: string;
    /** アップロードファイルNo */
    number?: number;
    /** posted:コメントあり, raised:未解決, resolved:解決済 */
    comment_type?: "posted" | "raised" | "resolved";
    /** trueの時、重要コメント付きが対象 */
    comment_important?: boolean;
    /** all:すべて、without_deal:未登録、with_expense_application_line:経費申請中, with_deal:登録済み、ignored:無視 */
    category?: "all" | "without_deal" | "with_expense_application_line" | "with_deal" | "ignored";
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) */
    limit?: number;
}
export interface Response$get_receipts$Status$200 {
    "application/json": {
        receipts: {
            /** 作成日時（ISO8601形式） */
            created_at: string;
            /** メモ */
            description?: string;
            /**
             * ファイルのダウンロードURL（freeeにログインした状態でのみ閲覧可能です。）
             * <br>
             * <br>
             * file_srcは廃止予定の属性になります。<br>
             * file_srcに替わり、証憑ファイルのダウンロード APIをご利用ください。<br>
             * 証憑ファイルのダウンロードAPIを利用することで、以下のようになります。
             * <ul>
             *   <li>アプリケーション利用者はfreee APIアプリケーションにログインしていれば、証憑ダウンロード毎にfreeeに改めてログインすることなくファイルが参照できるようになります。</li>
             * </ul>
             */
            file_src: string;
            /** 証憑ファイルID */
            id: number;
            /** 発生日 */
            issue_date?: string;
            /** MIMEタイプ */
            mime_type: string;
            /** アップロード元種別 */
            origin: "unknown" | "web" | "mobile_camera" | "mobile_album" | "scansnap" | "scannable" | "dropbox" | "mail" | "safety_contact_file" | "public_api";
            /** ステータス(unconfirmed:確認待ち、confirmed:確認済み、deleted:削除済み、ignored:無視) */
            status: "unconfirmed" | "confirmed" | "deleted" | "ignored";
            user: {
                /** 表示名 */
                display_name?: string | null;
                /** メールアドレス */
                email: string;
                /** ユーザーID */
                id: number;
            };
        }[];
    };
}
export interface Response$get_receipts$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_receipts$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_receipts$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_receipts$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_receipt {
    "multipart/form-data": Schemas.receiptCreateParams;
}
export interface Response$create_receipt$Status$201 {
    "application/json": Schemas.receiptResponse;
}
export interface Response$create_receipt$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_receipt$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_receipt$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_receipt$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_receipt {
    /** 証憑ファイルID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_receipt$Status$200 {
    "application/json": Schemas.receiptResponse;
}
export interface Response$get_receipt$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_receipt$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_receipt$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_receipt$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_receipt$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_receipt {
    /** 証憑ファイルID */
    id: number;
}
export interface RequestBody$update_receipt {
    "application/json": Schemas.receiptUpdateParams;
    "application/x-www-form-urlencoded": Schemas.receiptUpdateParams;
}
export interface Response$update_receipt$Status$200 {
    "application/json": Schemas.receiptResponse;
}
export interface Response$update_receipt$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_receipt$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_receipt$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_receipt$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_receipt$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_receipt {
    /** 証憑ファイルID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_receipt$Status$204 {
}
export interface Response$destroy_receipt$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_receipt$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_receipt$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_receipt$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_receipt$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$download_receipt {
    /** 証憑ファイルID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$download_receipt$Status$200 {
    "application/pdf": string;
    "image/*": string;
    "text/csv": string;
}
export interface Response$download_receipt$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$download_receipt$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$download_receipt$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$download_receipt$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$download_receipt$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_bs {
    /** 事業所ID */
    company_id: number;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_bs$Status$200 {
    "application/json": Schemas.trialBsResponse;
}
export interface Response$get_trial_bs$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_bs$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_bs$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_bs$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_bs$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_bs_three_years {
    /** 事業所ID */
    company_id: number;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_bs_three_years$Status$200 {
    "application/json": Schemas.trialBsThreeYearsResponse;
}
export interface Response$get_trial_bs_three_years$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_bs_three_years$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_bs_three_years$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_bs_three_years$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_bs_three_years$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_bs_two_years {
    /** 事業所ID */
    company_id: number;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_bs_two_years$Status$200 {
    "application/json": Schemas.trialBsTwoYearsResponse;
}
export interface Response$get_trial_bs_two_years$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_bs_two_years$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_bs_two_years$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_bs_two_years$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_bs_two_years$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl {
    /** 事業所ID */
    company_id: number;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl$Status$200 {
    "application/json": Schemas.trialPlResponse;
}
export interface Response$get_trial_pl$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl_sections {
    /** 事業所ID */
    company_id: number;
    /** 出力する部門の指定（半角数字のidを半角カンマ区切りスペースなしで指定してください） */
    section_ids: string;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl_sections$Status$200 {
    "application/json": Schemas.trialPlSectionsResponse;
}
export interface Response$get_trial_pl_sections$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl_sections$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl_sections$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl_sections$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl_sections$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl_segment_1_tags {
    /** 事業所ID */
    company_id: number;
    /** 出力するセグメント1タグの指定（半角数字のidを半角カンマ区切りスペースなしで指定してください。0を指定すると、未選択のセグメントで比較できます） */
    segment_1_tag_ids: string;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl_segment_1_tags$Status$200 {
    "application/json": Schemas.trialPlSegment_1TagsResponse;
}
export interface Response$get_trial_pl_segment_1_tags$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl_segment_1_tags$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl_segment_1_tags$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl_segment_1_tags$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl_segment_1_tags$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl_segment_2_tags {
    /** 事業所ID */
    company_id: number;
    /** 出力するセグメント2タグの指定（半角数字のidを半角カンマ区切りスペースなしで指定してください。0を指定すると、未選択のセグメントで比較できます） */
    segment_2_tag_ids: string;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl_segment_2_tags$Status$200 {
    "application/json": Schemas.trialPlSegment_2TagsResponse;
}
export interface Response$get_trial_pl_segment_2_tags$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl_segment_2_tags$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl_segment_2_tags$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl_segment_2_tags$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl_segment_2_tags$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl_segment_3_tags {
    /** 事業所ID */
    company_id: number;
    /** 出力するセグメント3タグの指定（半角数字のidを半角カンマ区切りスペースなしで指定してください。0を指定すると、未選択のセグメントで比較できます） */
    segment_3_tag_ids: string;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl_segment_3_tags$Status$200 {
    "application/json": Schemas.trialPlSegment_3TagsResponse;
}
export interface Response$get_trial_pl_segment_3_tags$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl_segment_3_tags$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl_segment_3_tags$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl_segment_3_tags$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl_segment_3_tags$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl_three_years {
    /** 事業所ID */
    company_id: number;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl_three_years$Status$200 {
    "application/json": Schemas.trialPlThreeYearsResponse;
}
export interface Response$get_trial_pl_three_years$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl_three_years$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl_three_years$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl_three_years$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl_three_years$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_trial_pl_two_years {
    /** 事業所ID */
    company_id: number;
    /** 会計年度 */
    fiscal_year?: number;
    /** 発生月で絞込：開始会計月(1-12) */
    start_month?: number;
    /** 発生月で絞込：終了会計月(1-12) */
    end_month?: number;
    /** 発生日で絞込：開始日(yyyy-mm-dd) */
    start_date?: string;
    /** 発生日で絞込：終了日(yyyy-mm-dd) */
    end_date?: string;
    /** 勘定科目の表示（勘定科目: account_item, 決算書表示:group） */
    account_item_display_type?: "account_item" | "group";
    /** 内訳の表示（取引先: partner, 品目: item, 部門: section, 勘定科目: account_item, セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン): segment_1_tag, セグメント2(法人向け エンタープライズプラン):segment_2_tag, セグメント3(法人向け エンタープライズプラン): segment_3_tag） ※勘定科目はaccount_item_display_typeが「group」の時のみ指定できます */
    breakdown_display_type?: "partner" | "item" | "section" | "account_item" | "segment_1_tag" | "segment_2_tag" | "segment_3_tag";
    /** 取引先IDで絞込（0を指定すると、取引先が未選択で絞り込めます） */
    partner_id?: number;
    /** 取引先コードで絞込（事業所設定で取引先コードの利用を有効にしている場合のみ利用可能です） */
    partner_code?: string;
    /** 品目IDで絞込（0を指定すると、品目が未選択で絞り込めます） */
    item_id?: number;
    /** 部門IDで絞込（0を指定すると、部門が未選択で絞り込めます） */
    section_id?: number;
    /** 決算整理仕訳で絞込（決算整理仕訳のみ: only, 決算整理仕訳以外: without） */
    adjustment?: "only" | "without";
    /** 配賦仕訳で絞込（配賦仕訳のみ：only,配賦仕訳以外：without） */
    cost_allocation?: "only" | "without";
    /**
     * 承認ステータスで絞込 (未承認を除く: without_in_progress (デフォルト)、全てのステータス: all)<br>
     * 個人: プレミアムプラン、法人: プロフェッショナルプラン以上で指定可能です。<br>
     * 事業所の設定から仕訳承認フローの利用を有効にした場合に指定可能です。
     */
    approval_flow_status?: "without_in_progress" | "all";
}
export interface Response$get_trial_pl_two_years$Status$200 {
    "application/json": Schemas.trialPlTwoYearsResponse;
}
export interface Response$get_trial_pl_two_years$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_trial_pl_two_years$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_trial_pl_two_years$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_trial_pl_two_years$Status$429 {
    "application/json": Schemas.tooManyRequestsError;
}
export interface Response$get_trial_pl_two_years$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_sections {
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_sections$Status$200 {
    "application/json": {
        sections: {
            /**
             * 部門の使用設定（true: 使用する、false: 使用しない）
             * <br>
             * <ul>
             *   <li>
             *     本APIでsectionを作成した場合はtrueになります。
             *   </li>
             *   <li>
             *     falseにする場合はWeb画面から変更できます。
             *   </li>
             *   <li>
             *     trueの場合、Web画面での取引登録時などに入力候補として表示されます。
             *   </li>
             *   <li>
             *     falseの場合、部門自体は削除せず、Web画面での取引登録時などに入力候補として表示されません。ただし取引（収入／支出）の作成APIなどでfalseの部門をパラメータに指定すれば、取引などにfalseの部門を設定できます。
             *   </li>
             * </ul>
             */
            available: boolean;
            /** 事業所ID */
            company_id: number;
            /** 部門ID */
            id: number;
            /**
             * <a target="_blank" href="https://support.freee.co.jp/hc/ja/articles/209093566">部門階層</a>
             * <br>
             * ※ indent_count が 0 のときは第一階層の親部門です。
             */
            indent_count?: number;
            /** 正式名称（255文字以内） */
            long_name?: string | null;
            /** 部門名 (30文字以内) */
            name: string;
            /**
             * <a target="_blank" href="https://support.freee.co.jp/hc/ja/articles/209093566">親部門ID</a>
             * <br>
             * ※ parent_id が null のときは第一階層の親部門です。
             */
            parent_id?: number | null;
            /** ショートカット１ (20文字以内) */
            shortcut1?: string | null;
            /** ショートカット２ (20文字以内) */
            shortcut2?: string | null;
        }[];
    };
}
export interface Response$get_sections$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_sections$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_sections$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_sections$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_section {
    "application/json": Schemas.sectionParams;
    "application/x-www-form-urlencoded": Schemas.sectionParams;
}
export interface Response$create_section$Status$201 {
    "application/json": Schemas.sectionResponse;
}
export interface Response$create_section$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_section$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_section$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_section$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_section {
    /** 部門ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_section$Status$200 {
    "application/json": Schemas.sectionResponse;
}
export interface Response$get_section$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_section$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_section$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_section$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_section$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_section {
    id: number;
}
export interface RequestBody$update_section {
    "application/json": Schemas.sectionParams;
    "application/x-www-form-urlencoded": Schemas.sectionParams;
}
export interface Response$update_section$Status$200 {
    "application/json": Schemas.sectionResponse;
}
export interface Response$update_section$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_section$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_section$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_section$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_section {
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_section$Status$204 {
}
export interface Response$destroy_section$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_section$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_section$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_section$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_segment_tags {
    /** 事業所ID */
    company_id: number;
    /**
     * セグメントID（1,2,3のいずれか）
     * 該当プラン以外で参照した場合にはエラーとなります。
     *   1: 法人向けプロフェッショナル, 法人向けエンタープライズプラン
     *   2,3: 法人向け エンタープライズプラン
     */
    segment_id: number;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 500)  */
    limit?: number;
}
export interface Response$get_segment_tags$Status$200 {
    "application/json": {
        segment_tags: {
            /** 備考 */
            description: string | null;
            /** セグメントタグID */
            id: number;
            /** セグメントタグ名 */
            name: string;
            /** ショートカット１ (20文字以内) */
            shortcut1: string | null;
            /** ショートカット２ (20文字以内) */
            shortcut2: string | null;
        }[];
    };
}
export interface Response$get_segment_tags$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_segment_tags$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_segment_tags$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_segment_tags$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$create_segment_tag {
    /**
     * セグメントID（1,2,3のいずれか）
     * 該当プラン以外で参照した場合にはエラーとなります。
     *   1: 法人向けプロフェッショナル, 法人向けエンタープライズプラン
     *   2,3: 法人向け エンタープライズプラン
     */
    segment_id: number;
}
export interface RequestBody$create_segment_tag {
    "application/json": Schemas.segmentTagParams;
    "application/x-www-form-urlencoded": Schemas.segmentTagParams;
}
export interface Response$create_segment_tag$Status$201 {
    "application/json": Schemas.segmentTagResponse;
}
export interface Response$create_segment_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_segment_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_segment_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_segment_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_segment_tag {
    /**
     * セグメントID（1,2,3のいずれか）
     * 該当プラン以外で参照した場合にはエラーとなります。
     *   1: 法人向けプロフェッショナル, 法人向けエンタープライズプラン
     *   2,3: 法人向け エンタープライズプラン
     */
    segment_id: number;
    /** セグメントタグID */
    id: number;
}
export interface RequestBody$update_segment_tag {
    "application/json": Schemas.segmentTagParams;
    "application/x-www-form-urlencoded": Schemas.segmentTagParams;
}
export interface Response$update_segment_tag$Status$200 {
    "application/json": Schemas.segmentTagResponse;
}
export interface Response$update_segment_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_segment_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_segment_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_segment_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_segments_tag {
    /**
     * セグメントID（1,2,3のいずれか）
     * 該当プラン以外で参照した場合にはエラーとなります。
     *   1: 法人向けプロフェッショナル, 法人向けエンタープライズプラン
     *   2,3: 法人向け エンタープライズプラン
     */
    segment_id: number;
    /** セグメントタグID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_segments_tag$Status$204 {
}
export interface Response$destroy_segments_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_segments_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_segments_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_segments_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_tags {
    /** 事業所ID */
    company_id: number;
    /** 更新日で絞り込み：開始日(yyyy-mm-dd) */
    start_update_date?: string;
    /** 更新日で絞り込み：終了日(yyyy-mm-dd) */
    end_update_date?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) */
    limit?: number;
}
export interface Response$get_tags$Status$200 {
    "application/json": {
        tags: {
            /** 事業所ID */
            company_id: number;
            /** タグID */
            id: number;
            /** 名前(30文字以内) */
            name: string;
            /** ショートカット1 (255文字以内) */
            shortcut1?: string | null;
            /** ショートカット2 (255文字以内) */
            shortcut2?: string | null;
            /** 更新日(yyyy-mm-dd) */
            update_date: string;
        }[];
    };
}
export interface Response$get_tags$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_tags$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_tags$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_tags$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_tag {
    "application/json": Schemas.tagParams;
    "application/x-www-form-urlencoded": Schemas.tagParams;
}
export interface Response$create_tag$Status$201 {
    "application/json": Schemas.tagResponse;
}
export interface Response$create_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_tag {
    /** タグID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_tag$Status$200 {
    "application/json": Schemas.tagResponse;
}
export interface Response$get_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_tag$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_tag {
    /** メモタグID */
    id: number;
}
export interface RequestBody$update_tag {
    "application/json": Schemas.tagParams;
    "application/x-www-form-urlencoded": Schemas.tagParams;
}
export interface Response$update_tag$Status$200 {
    "application/json": Schemas.tagResponse;
}
export interface Response$update_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_tag$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_tag {
    /** タグID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_tag$Status$204 {
}
export interface Response$destroy_tag$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_tag$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_tag$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_tag$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_tag$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Response$get_tax_codes$Status$200 {
    "application/json": {
        taxes: {
            /** 税区分コード */
            code: number;
            /** 税区分名 */
            name: string;
            /** 税区分名（日本語表示用） */
            name_ja: string;
        }[];
    };
}
export interface Response$get_tax_codes$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_tax_codes$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_tax_codes$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_tax_codes$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_tax_code {
    /** 税区分コード */
    code: number;
}
export interface Response$get_tax_code$Status$200 {
    "application/json": Schemas.taxResponse;
}
export interface Response$get_tax_code$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_tax_code$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_tax_code$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_tax_code$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_tax_code$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_taxes_companies {
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_taxes_companies$Status$200 {
    "application/json": {
        taxes: {
            /** true: 使用する、false: 使用しない */
            available: boolean;
            /** 税区分コード */
            code: number;
            /** 税区分の表示カテゴリ（tax_5: 5%表示の税区分、tax_8: 8%表示の税区分、tax_r8: 軽減税率8%表示の税区分、tax_10: 10%表示の税区分、null: 税率未設定税区分） */
            display_category: ("tax_5" | "tax_8" | "tax_r8" | "tax_10") | null;
            /** 税区分名 */
            name: string;
            /** 税区分名（日本語表示用） */
            name_ja: string;
        }[];
    };
}
export interface Response$get_taxes_companies$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_taxes_companies$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_taxes_companies$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_taxes_companies$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_transfers {
    /** 事業所ID */
    company_id: number;
    /** 振替日で絞込：開始日 (yyyy-mm-dd) */
    start_date?: string;
    /** 振替日で絞込：終了日 (yyyy-mm-dd) */
    end_date?: string;
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 100)  */
    limit?: number;
}
export interface Response$get_transfers$Status$200 {
    "application/json": {
        transfers: {
            /** 金額 */
            amount: number;
            /** 事業所ID */
            company_id: number;
            /** 振替日 (yyyy-mm-dd) */
            date: string;
            /** 備考 */
            description: string;
            /** 振替元口座ID */
            from_walletable_id: number;
            /** 振替元口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            from_walletable_type: ("bank_account" | "wallet" | "credit_card") | null;
            /** 取引(振替)ID */
            id: number;
            /** 振替先口座ID */
            to_walletable_id: number;
            /** 振替先口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            to_walletable_type: ("bank_account" | "wallet" | "credit_card") | null;
        }[];
    };
}
export interface Response$get_transfers$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_transfers$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_transfers$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_transfers$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_transfer {
    "application/json": Schemas.transferParams;
    "application/x-www-form-urlencoded": Schemas.transferParams;
}
export interface Response$create_transfer$Status$201 {
    "application/json": Schemas.transferResponse;
}
export interface Response$create_transfer$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_transfer$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_transfer$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_transfer$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_transfer {
    /** 取引(振替)ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_transfer$Status$200 {
    "application/json": Schemas.transferResponse;
}
export interface Response$get_transfer$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_transfer$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_transfer$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_transfer$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_transfer$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_transfer {
    /** 取引(振替)ID */
    id: number;
}
export interface RequestBody$update_transfer {
    "application/json": Schemas.transferParams;
    "application/x-www-form-urlencoded": Schemas.transferParams;
}
export interface Response$update_transfer$Status$200 {
    "application/json": Schemas.transferResponse;
}
export interface Response$update_transfer$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_transfer$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_transfer$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_transfer$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_transfer$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_transfer {
    /** 取引(振替)ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_transfer$Status$204 {
}
export interface Response$destroy_transfer$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_transfer$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_transfer$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_transfer$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_transfer$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_users {
    /** 事業所ID */
    company_id: number;
    /** 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 3000) */
    limit?: number;
}
export interface Response$get_users$Status$200 {
    "application/json": {
        users: {
            /** 表示名 */
            display_name?: string | null;
            /** メールアドレス */
            email: string;
            /** 氏名（名） */
            first_name?: string | null;
            /** 氏名（カナ・名） */
            first_name_kana?: string | null;
            /** ユーザーID */
            id: number;
            /** 氏名（姓） */
            last_name?: string | null;
            /** 氏名（カナ・姓） */
            last_name_kana?: string | null;
        }[];
    };
}
export interface Response$get_users$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_users$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_users$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_users$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_users$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_users_capabilities {
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_users_capabilities$Status$200 {
    "application/json": {
        tags: Schemas.userCapability;
        account_item_statements: Schemas.userCapability;
        account_items: Schemas.userCapability;
        annual_reports: Schemas.userCapability;
        approval_flow_routes: Schemas.userCapability;
        approval_requests: Schemas.userCapability;
        backups: Schemas.userCapability;
        bank_accountant_staff_users: Schemas.userCapability;
        biz_allocations: Schemas.userCapability;
        companies: Schemas.userCapability;
        consumption_entries: Schemas.userCapability;
        cost_allocations: Schemas.userCapability;
        deal_templates: Schemas.userCapability;
        deals: Schemas.userCapability;
        doc_postings: Schemas.userCapability;
        docs: Schemas.userCapability;
        expense_application_templates: Schemas.userCapability;
        expense_applications: Schemas.userCapability;
        fixed_assets: Schemas.userCapability;
        inventory_refreshes: Schemas.userCapability;
        invitations: Schemas.userCapability;
        items: Schemas.userCapability;
        manual_journal_templates: Schemas.userCapability;
        manual_journals: Schemas.userCapability;
        month_end: Schemas.userCapability;
        oauth_applications: Schemas.userCapability;
        oauth_authorizations: Schemas.userCapability;
        opening_balances: Schemas.userCapability;
        partners: Schemas.userCapability;
        payment_records: Schemas.userCapability;
        payment_requests: Schemas.userCapability;
        receipt_stream_editor: Schemas.userCapability;
        receipts: Schemas.userCapability;
        reports: Schemas.userCapability;
        reports_bs: Schemas.userCapability;
        reports_cash_balance: Schemas.userCapability;
        reports_crosstabs: Schemas.userCapability;
        reports_general_ledgers: Schemas.userCapability;
        reports_income_expense: Schemas.userCapability;
        reports_journals: Schemas.userCapability;
        reports_managements_navigation: Schemas.userCapability;
        reports_managements_planning: Schemas.userCapability;
        reports_payables: Schemas.userCapability;
        reports_pl: Schemas.userCapability;
        reports_receivables: Schemas.userCapability;
        request_forms: Schemas.userCapability;
        resets: Schemas.userCapability;
        sections: Schemas.userCapability;
        sign_in_logs: Schemas.userCapability;
        spreadsheets: Schemas.userCapability;
        system_conversion: Schemas.userCapability;
        tax_reports: Schemas.userCapability;
        tax_return: Schemas.userCapability;
        taxes: Schemas.userCapability;
        transfers: Schemas.userCapability;
        user_matchers: Schemas.userCapability;
        wallet_txns: Schemas.userCapability;
        walletables: Schemas.userCapability;
        workflows: Schemas.userCapability;
        year_end: Schemas.userCapability;
    };
}
export interface Response$get_users_capabilities$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_users_capabilities$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_users_capabilities$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_users_capabilities$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_users_capabilities$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_users_me {
    /** 取得情報にユーザーが所属する事業所一覧を含める */
    companies?: boolean;
    /** 取得情報に事業がアドバイザー事象所の場合は事業所毎の一意なプロフィールIDを含める */
    advisor?: boolean;
}
export interface Response$get_users_me$Status$200 {
    "application/json": Schemas.meResponse;
}
export interface Response$get_users_me$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_users_me$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_users_me$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_users_me$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_users_me$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$update_user {
    "application/json": Schemas.userParams;
    "application/x-www-form-urlencoded": Schemas.userParams;
}
export interface Response$update_user$Status$200 {
    "application/json": Schemas.userResponse;
}
export interface Response$update_user$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_user$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_user$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_user$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_user$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_wallet_txns {
    /** 事業所ID */
    company_id: number;
    /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) walletable_type、walletable_idは同時に指定が必要です。 */
    walletable_type?: "bank_account" | "credit_card" | "wallet";
    /** 口座ID walletable_type、walletable_idは同時に指定が必要です。 */
    walletable_id?: number;
    /** 取引日で絞込：開始日 (yyyy-mm-dd) */
    start_date?: string;
    /** 取引日で絞込：終了日 (yyyy-mm-dd) */
    end_date?: string;
    /** 入金／出金 (入金: income, 出金: expense) */
    entry_side?: "income" | "expense";
    /** 取得レコードのオフセット (デフォルト: 0) */
    offset?: number;
    /** 取得レコードの件数 (デフォルト: 20, 最小: 1, 最大: 100)  */
    limit?: number;
}
export interface Response$get_wallet_txns$Status$200 {
    "application/json": {
        wallet_txns: {
            /** 取引金額 */
            amount: number;
            /** 残高(銀行口座等) */
            balance: number;
            /** 事業所ID */
            company_id: number;
            /** 取引日(yyyy-mm-dd) */
            date: string;
            /** 取引内容 */
            description: string;
            /** 未決済金額 */
            due_amount: number;
            /** 入金／出金 (入金: income, 出金: expense) */
            entry_side: "income" | "expense";
            /** 明細ID */
            id: number;
            /** 明細のステータス（消込待ち: 1, 消込済み: 2, 無視: 3, 消込中: 4） */
            status: number;
            /** 口座ID */
            walletable_id: number;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            walletable_type: "bank_account" | "credit_card" | "wallet";
        }[];
    };
}
export interface Response$get_wallet_txns$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_wallet_txns$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_wallet_txns$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_wallet_txns$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_wallet_txn {
    "application/json": Schemas.walletTxnParams;
    "application/x-www-form-urlencoded": Schemas.walletTxnParams;
}
export interface Response$create_wallet_txn$Status$201 {
    "application/json": Schemas.walletTxnResponse;
}
export interface Response$create_wallet_txn$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_wallet_txn$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_wallet_txn$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_wallet_txn$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_wallet_txn {
    /** 明細ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_wallet_txn$Status$200 {
    "application/json": Schemas.walletTxnResponse;
}
export interface Response$get_wallet_txn$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_wallet_txn$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_wallet_txn$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_wallet_txn$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_wallet_txn$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_wallet_txn {
    /** 明細ID */
    id: number;
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_wallet_txn$Status$204 {
}
export interface Response$destroy_wallet_txn$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_wallet_txn$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_wallet_txn$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_wallet_txn$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_wallet_txn$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_walletables {
    /** 事業所ID */
    company_id: number;
    /** 残高情報を含める */
    with_balance?: boolean;
    /** 口座種別（bank_account : 銀行口座, credit_card : クレジットカード, wallet : その他の決済口座） */
    type?: "bank_account" | "credit_card" | "wallet";
}
export interface Response$get_walletables$Status$200 {
    "application/json": {
        meta?: {
            /** 集計結果が最新かどうか */
            up_to_date?: boolean;
        };
        walletables: {
            /** サービスID */
            bank_id: number | null;
            /** 口座ID */
            id: number;
            /** 同期残高 */
            last_balance?: number;
            /** 口座名 (255文字以内) */
            name: string;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type: "bank_account" | "credit_card" | "wallet";
            /** 登録残高 */
            walletable_balance?: number;
        }[];
    };
}
export interface Response$get_walletables$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_walletables$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_walletables$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_walletables$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface RequestBody$create_walletable {
    "application/json": Schemas.walletableCreateParams;
    "application/x-www-form-urlencoded": Schemas.walletableCreateParams;
}
export interface Response$create_walletable$Status$201 {
    "application/json": Schemas.walletableCreateResponse;
}
export interface Response$create_walletable$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$create_walletable$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$create_walletable$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$create_walletable$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$get_walletable {
    /** 口座ID */
    id: number;
    /** 口座種別（bank_account : 銀行口座, credit_card : クレジットカード, wallet : その他の決済口座） */
    type: "bank_account" | "credit_card" | "wallet";
    /** 事業所ID */
    company_id: number;
}
export interface Response$get_walletable$Status$200 {
    "application/json": {
        meta?: {
            /** 集計結果が最新かどうか */
            up_to_date?: boolean;
        };
        walletable: {
            /** サービスID */
            bank_id: number | null;
            /** 口座ID */
            id: number;
            /** 同期残高 */
            last_balance?: number;
            /** 口座名 (255文字以内) */
            name: string;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type: "bank_account" | "credit_card" | "wallet";
            /** 登録残高 */
            walletable_balance?: number;
        };
    };
}
export interface Response$get_walletable$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$get_walletable$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$get_walletable$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$get_walletable$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$get_walletable$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$update_walletable {
    id: number;
    /** 口座種別（bank_account : 銀行口座, credit_card : クレジットカード, wallet : その他の決済口座） */
    type: "bank_account" | "credit_card" | "wallet";
}
export interface RequestBody$update_walletable {
    "application/json": Schemas.walletableUpdateParams;
    "application/x-www-form-urlencoded": Schemas.walletableUpdateParams;
}
export interface Response$update_walletable$Status$200 {
    "application/json": {
        meta?: {
            /** 集計結果が最新かどうか */
            up_to_date?: boolean;
        };
        walletable: {
            /** サービスID */
            bank_id: number | null;
            /** 口座ID */
            id: number;
            /** 同期残高 */
            last_balance?: number;
            /** 口座名 (255文字以内) */
            name: string;
            /** 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet) */
            type: "bank_account" | "credit_card" | "wallet";
            /** 登録残高 */
            walletable_balance?: number;
        };
    };
}
export interface Response$update_walletable$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$update_walletable$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$update_walletable$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$update_walletable$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$update_walletable$Status$500 {
    "application/json": Schemas.internalServerError;
}
export interface Parameter$destroy_walletable {
    /** 口座ID */
    id: number;
    /** 口座種別（bank_account : 銀行口座, credit_card : クレジットカード, wallet : その他の決済口座） */
    type: "bank_account" | "credit_card" | "wallet";
    /** 事業所ID */
    company_id: number;
}
export interface Response$destroy_walletable$Status$204 {
}
export interface Response$destroy_walletable$Status$400 {
    "application/json": Schemas.badRequestError;
}
export interface Response$destroy_walletable$Status$401 {
    "application/json": Schemas.unauthorizedError;
}
export interface Response$destroy_walletable$Status$403 {
    "application/json": Schemas.forbiddenError;
}
export interface Response$destroy_walletable$Status$404 {
    "application/json": Schemas.badRequestNotFoundError;
}
export interface Response$destroy_walletable$Status$500 {
    "application/json": Schemas.internalServerError;
}
export type ResponseContentType$get_account_items = keyof Response$get_account_items$Status$200;
export interface Params$get_account_items {
    parameter: Parameter$get_account_items;
}
export type RequestContentType$create_account_item = keyof RequestBody$create_account_item;
export type ResponseContentType$create_account_item = keyof Response$create_account_item$Status$201;
export interface Params$create_account_item<T extends RequestContentType$create_account_item> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_account_item[T];
}
export type ResponseContentType$get_account_item = keyof Response$get_account_item$Status$200;
export interface Params$get_account_item {
    parameter: Parameter$get_account_item;
}
export type RequestContentType$update_account_item = keyof RequestBody$update_account_item;
export type ResponseContentType$update_account_item = keyof Response$update_account_item$Status$200;
export interface Params$update_account_item<T extends RequestContentType$update_account_item> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_account_item;
    requestBody: RequestBody$update_account_item[T];
}
export interface Params$destroy_account_item {
    parameter: Parameter$destroy_account_item;
}
export type ResponseContentType$get_approval_flow_routes = keyof Response$get_approval_flow_routes$Status$200;
export interface Params$get_approval_flow_routes {
    parameter: Parameter$get_approval_flow_routes;
}
export type ResponseContentType$get_approval_flow_route = keyof Response$get_approval_flow_route$Status$200;
export interface Params$get_approval_flow_route {
    parameter: Parameter$get_approval_flow_route;
}
export type ResponseContentType$get_approval_requests = keyof Response$get_approval_requests$Status$200;
export interface Params$get_approval_requests {
    parameter: Parameter$get_approval_requests;
}
export type RequestContentType$create_approval_request = keyof RequestBody$create_approval_request;
export type ResponseContentType$create_approval_request = keyof Response$create_approval_request$Status$201;
export interface Params$create_approval_request<T extends RequestContentType$create_approval_request> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_approval_request[T];
}
export type ResponseContentType$get_approval_request_forms = keyof Response$get_approval_request_forms$Status$200;
export interface Params$get_approval_request_forms {
    parameter: Parameter$get_approval_request_forms;
}
export type ResponseContentType$get_approval_request_form = keyof Response$get_approval_request_form$Status$200;
export interface Params$get_approval_request_form {
    parameter: Parameter$get_approval_request_form;
}
export type ResponseContentType$get_approval_request = keyof Response$get_approval_request$Status$200;
export interface Params$get_approval_request {
    parameter: Parameter$get_approval_request;
}
export type RequestContentType$update_approval_request = keyof RequestBody$update_approval_request;
export type ResponseContentType$update_approval_request = keyof Response$update_approval_request$Status$200;
export interface Params$update_approval_request<T extends RequestContentType$update_approval_request> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_approval_request;
    requestBody: RequestBody$update_approval_request[T];
}
export interface Params$destroy_approval_request {
    parameter: Parameter$destroy_approval_request;
}
export type RequestContentType$update_approval_request_action = keyof RequestBody$update_approval_request_action;
export type ResponseContentType$update_approval_request_action = keyof Response$update_approval_request_action$Status$201;
export interface Params$update_approval_request_action<T extends RequestContentType$update_approval_request_action> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_approval_request_action;
    requestBody: RequestBody$update_approval_request_action[T];
}
export type ResponseContentType$get_banks = keyof Response$get_banks$Status$200;
export interface Params$get_banks {
    parameter: Parameter$get_banks;
}
export type ResponseContentType$get_bank = keyof Response$get_bank$Status$200;
export interface Params$get_bank {
    parameter: Parameter$get_bank;
}
export type ResponseContentType$get_companies = keyof Response$get_companies$Status$200;
export type ResponseContentType$get_company = keyof Response$get_company$Status$200;
export interface Params$get_company {
    parameter: Parameter$get_company;
}
export type ResponseContentType$get_deals = keyof Response$get_deals$Status$200;
export interface Params$get_deals {
    parameter: Parameter$get_deals;
}
export type RequestContentType$create_deal = keyof RequestBody$create_deal;
export type ResponseContentType$create_deal = keyof Response$create_deal$Status$201;
export interface Params$create_deal<T extends RequestContentType$create_deal> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_deal[T];
}
export type ResponseContentType$get_deal = keyof Response$get_deal$Status$200;
export interface Params$get_deal {
    parameter: Parameter$get_deal;
}
export type RequestContentType$update_deal = keyof RequestBody$update_deal;
export type ResponseContentType$update_deal = keyof Response$update_deal$Status$200;
export interface Params$update_deal<T extends RequestContentType$update_deal> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_deal;
    requestBody: RequestBody$update_deal[T];
}
export interface Params$destroy_deal {
    parameter: Parameter$destroy_deal;
}
export type RequestContentType$create_deal_payment = keyof RequestBody$create_deal_payment;
export type ResponseContentType$create_deal_payment = keyof Response$create_deal_payment$Status$201;
export interface Params$create_deal_payment<T extends RequestContentType$create_deal_payment> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$create_deal_payment;
    requestBody: RequestBody$create_deal_payment[T];
}
export type RequestContentType$update_deal_payment = keyof RequestBody$update_deal_payment;
export type ResponseContentType$update_deal_payment = keyof Response$update_deal_payment$Status$200;
export interface Params$update_deal_payment<T extends RequestContentType$update_deal_payment> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_deal_payment;
    requestBody: RequestBody$update_deal_payment[T];
}
export interface Params$destroy_deal_payment {
    parameter: Parameter$destroy_deal_payment;
}
export type RequestContentType$create_deal_renew = keyof RequestBody$create_deal_renew;
export type ResponseContentType$create_deal_renew = keyof Response$create_deal_renew$Status$201;
export interface Params$create_deal_renew<T extends RequestContentType$create_deal_renew> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$create_deal_renew;
    requestBody: RequestBody$create_deal_renew[T];
}
export type RequestContentType$update_deal_renew = keyof RequestBody$update_deal_renew;
export type ResponseContentType$update_deal_renew = keyof Response$update_deal_renew$Status$200;
export interface Params$update_deal_renew<T extends RequestContentType$update_deal_renew> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_deal_renew;
    requestBody: RequestBody$update_deal_renew[T];
}
export type ResponseContentType$delete_deal_renew = keyof Response$delete_deal_renew$Status$200;
export interface Params$delete_deal_renew {
    parameter: Parameter$delete_deal_renew;
}
export type ResponseContentType$get_expense_application_line_templates = keyof Response$get_expense_application_line_templates$Status$200;
export interface Params$get_expense_application_line_templates {
    parameter: Parameter$get_expense_application_line_templates;
}
export type RequestContentType$create_expense_application_line_template = keyof RequestBody$create_expense_application_line_template;
export type ResponseContentType$create_expense_application_line_template = keyof Response$create_expense_application_line_template$Status$201;
export interface Params$create_expense_application_line_template<T extends RequestContentType$create_expense_application_line_template> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_expense_application_line_template[T];
}
export type ResponseContentType$get_expense_application_line_template = keyof Response$get_expense_application_line_template$Status$200;
export interface Params$get_expense_application_line_template {
    parameter: Parameter$get_expense_application_line_template;
}
export type RequestContentType$update_expense_application_line_template = keyof RequestBody$update_expense_application_line_template;
export type ResponseContentType$update_expense_application_line_template = keyof Response$update_expense_application_line_template$Status$200;
export interface Params$update_expense_application_line_template<T extends RequestContentType$update_expense_application_line_template> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_expense_application_line_template;
    requestBody: RequestBody$update_expense_application_line_template[T];
}
export interface Params$destroy_expense_application_line_template {
    parameter: Parameter$destroy_expense_application_line_template;
}
export type ResponseContentType$get_expense_applications = keyof Response$get_expense_applications$Status$200;
export interface Params$get_expense_applications {
    parameter: Parameter$get_expense_applications;
}
export type RequestContentType$create_expense_application = keyof RequestBody$create_expense_application;
export type ResponseContentType$create_expense_application = keyof Response$create_expense_application$Status$201;
export interface Params$create_expense_application<T extends RequestContentType$create_expense_application> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_expense_application[T];
}
export type ResponseContentType$get_expense_application = keyof Response$get_expense_application$Status$200;
export interface Params$get_expense_application {
    parameter: Parameter$get_expense_application;
}
export type RequestContentType$update_expense_application = keyof RequestBody$update_expense_application;
export type ResponseContentType$update_expense_application = keyof Response$update_expense_application$Status$200;
export interface Params$update_expense_application<T extends RequestContentType$update_expense_application> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_expense_application;
    requestBody: RequestBody$update_expense_application[T];
}
export interface Params$destroy_expense_application {
    parameter: Parameter$destroy_expense_application;
}
export type RequestContentType$update_expense_application_action = keyof RequestBody$update_expense_application_action;
export type ResponseContentType$update_expense_application_action = keyof Response$update_expense_application_action$Status$201;
export interface Params$update_expense_application_action<T extends RequestContentType$update_expense_application_action> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_expense_application_action;
    requestBody: RequestBody$update_expense_application_action[T];
}
export type ResponseContentType$get_forms_selectables = keyof Response$get_forms_selectables$Status$200;
export interface Params$get_forms_selectables {
    parameter: Parameter$get_forms_selectables;
}
export type ResponseContentType$get_invoices = keyof Response$get_invoices$Status$200;
export interface Params$get_invoices {
    parameter: Parameter$get_invoices;
}
export type RequestContentType$create_invoice = keyof RequestBody$create_invoice;
export type ResponseContentType$create_invoice = keyof Response$create_invoice$Status$201;
export interface Params$create_invoice<T extends RequestContentType$create_invoice> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_invoice[T];
}
export type ResponseContentType$get_invoice = keyof Response$get_invoice$Status$200;
export interface Params$get_invoice {
    parameter: Parameter$get_invoice;
}
export type RequestContentType$update_invoice = keyof RequestBody$update_invoice;
export type ResponseContentType$update_invoice = keyof Response$update_invoice$Status$200;
export interface Params$update_invoice<T extends RequestContentType$update_invoice> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_invoice;
    requestBody: RequestBody$update_invoice[T];
}
export interface Params$destroy_invoice {
    parameter: Parameter$destroy_invoice;
}
export type ResponseContentType$get_items = keyof Response$get_items$Status$200;
export interface Params$get_items {
    parameter: Parameter$get_items;
}
export type RequestContentType$create_item = keyof RequestBody$create_item;
export type ResponseContentType$create_item = keyof Response$create_item$Status$201;
export interface Params$create_item<T extends RequestContentType$create_item> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_item[T];
}
export type ResponseContentType$get_item = keyof Response$get_item$Status$200;
export interface Params$get_item {
    parameter: Parameter$get_item;
}
export type RequestContentType$update_item = keyof RequestBody$update_item;
export type ResponseContentType$update_item = keyof Response$update_item$Status$200;
export interface Params$update_item<T extends RequestContentType$update_item> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_item;
    requestBody: RequestBody$update_item[T];
}
export interface Params$destroy_item {
    parameter: Parameter$destroy_item;
}
export type ResponseContentType$get_journals = keyof Response$get_journals$Status$202;
export interface Params$get_journals {
    parameter: Parameter$get_journals;
}
export type ResponseContentType$download_journal = keyof Response$download_journal$Status$200;
export interface Params$download_journal<U extends ResponseContentType$download_journal> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$download_journal;
}
export type ResponseContentType$get_journal_status = keyof Response$get_journal_status$Status$200;
export interface Params$get_journal_status {
    parameter: Parameter$get_journal_status;
}
export type ResponseContentType$get_manual_journals = keyof Response$get_manual_journals$Status$200;
export interface Params$get_manual_journals {
    parameter: Parameter$get_manual_journals;
}
export type RequestContentType$create_manual_journal = keyof RequestBody$create_manual_journal;
export type ResponseContentType$create_manual_journal = keyof Response$create_manual_journal$Status$201;
export interface Params$create_manual_journal<T extends RequestContentType$create_manual_journal> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_manual_journal[T];
}
export type ResponseContentType$get_manual_journal = keyof Response$get_manual_journal$Status$200;
export interface Params$get_manual_journal {
    parameter: Parameter$get_manual_journal;
}
export type RequestContentType$update_manual_journal = keyof RequestBody$update_manual_journal;
export type ResponseContentType$update_manual_journal = keyof Response$update_manual_journal$Status$200;
export interface Params$update_manual_journal<T extends RequestContentType$update_manual_journal> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_manual_journal;
    requestBody: RequestBody$update_manual_journal[T];
}
export interface Params$destroy_manual_journal {
    parameter: Parameter$destroy_manual_journal;
}
export type ResponseContentType$get_partners = keyof Response$get_partners$Status$200;
export interface Params$get_partners {
    parameter: Parameter$get_partners;
}
export type RequestContentType$create_partner = keyof RequestBody$create_partner;
export type ResponseContentType$create_partner = keyof Response$create_partner$Status$201;
export interface Params$create_partner<T extends RequestContentType$create_partner> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_partner[T];
}
export type RequestContentType$update_partner_by_code = keyof RequestBody$update_partner_by_code;
export type ResponseContentType$update_partner_by_code = keyof Response$update_partner_by_code$Status$200;
export interface Params$update_partner_by_code<T extends RequestContentType$update_partner_by_code> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_partner_by_code;
    requestBody: RequestBody$update_partner_by_code[T];
}
export type ResponseContentType$get_partner = keyof Response$get_partner$Status$200;
export interface Params$get_partner {
    parameter: Parameter$get_partner;
}
export type RequestContentType$update_partner = keyof RequestBody$update_partner;
export type ResponseContentType$update_partner = keyof Response$update_partner$Status$200;
export interface Params$update_partner<T extends RequestContentType$update_partner> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_partner;
    requestBody: RequestBody$update_partner[T];
}
export interface Params$destroy_partner {
    parameter: Parameter$destroy_partner;
}
export type ResponseContentType$get_payment_requests = keyof Response$get_payment_requests$Status$200;
export interface Params$get_payment_requests {
    parameter: Parameter$get_payment_requests;
}
export type RequestContentType$create_payment_request = keyof RequestBody$create_payment_request;
export type ResponseContentType$create_payment_request = keyof Response$create_payment_request$Status$201;
export interface Params$create_payment_request<T extends RequestContentType$create_payment_request> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_payment_request[T];
}
export type ResponseContentType$get_payment_request = keyof Response$get_payment_request$Status$200;
export interface Params$get_payment_request {
    parameter: Parameter$get_payment_request;
}
export type RequestContentType$update_payment_request = keyof RequestBody$update_payment_request;
export type ResponseContentType$update_payment_request = keyof Response$update_payment_request$Status$200;
export interface Params$update_payment_request<T extends RequestContentType$update_payment_request> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_payment_request;
    requestBody: RequestBody$update_payment_request[T];
}
export interface Params$destroy_payment_request {
    parameter: Parameter$destroy_payment_request;
}
export type RequestContentType$update_payment_request_action = keyof RequestBody$update_payment_request_action;
export type ResponseContentType$update_payment_request_action = keyof Response$update_payment_request_action$Status$201;
export interface Params$update_payment_request_action<T extends RequestContentType$update_payment_request_action> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_payment_request_action;
    requestBody: RequestBody$update_payment_request_action[T];
}
export type ResponseContentType$get_quotations = keyof Response$get_quotations$Status$200;
export interface Params$get_quotations {
    parameter: Parameter$get_quotations;
}
export type RequestContentType$create_quotation = keyof RequestBody$create_quotation;
export type ResponseContentType$create_quotation = keyof Response$create_quotation$Status$201;
export interface Params$create_quotation<T extends RequestContentType$create_quotation> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_quotation[T];
}
export type ResponseContentType$get_quotation = keyof Response$get_quotation$Status$200;
export interface Params$get_quotation {
    parameter: Parameter$get_quotation;
}
export type RequestContentType$update_quotation = keyof RequestBody$update_quotation;
export type ResponseContentType$update_quotation = keyof Response$update_quotation$Status$200;
export interface Params$update_quotation<T extends RequestContentType$update_quotation> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_quotation;
    requestBody: RequestBody$update_quotation[T];
}
export interface Params$destroy_quotation {
    parameter: Parameter$destroy_quotation;
}
export type ResponseContentType$get_receipts = keyof Response$get_receipts$Status$200;
export interface Params$get_receipts {
    parameter: Parameter$get_receipts;
}
export type RequestContentType$create_receipt = keyof RequestBody$create_receipt;
export type ResponseContentType$create_receipt = keyof Response$create_receipt$Status$201;
export interface Params$create_receipt {
    requestBody: RequestBody$create_receipt["multipart/form-data"];
}
export type ResponseContentType$get_receipt = keyof Response$get_receipt$Status$200;
export interface Params$get_receipt {
    parameter: Parameter$get_receipt;
}
export type RequestContentType$update_receipt = keyof RequestBody$update_receipt;
export type ResponseContentType$update_receipt = keyof Response$update_receipt$Status$200;
export interface Params$update_receipt<T extends RequestContentType$update_receipt> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_receipt;
    requestBody: RequestBody$update_receipt[T];
}
export interface Params$destroy_receipt {
    parameter: Parameter$destroy_receipt;
}
export type ResponseContentType$download_receipt = keyof Response$download_receipt$Status$200;
export interface Params$download_receipt<U extends ResponseContentType$download_receipt> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$download_receipt;
}
export type ResponseContentType$get_trial_bs = keyof Response$get_trial_bs$Status$200;
export interface Params$get_trial_bs {
    parameter: Parameter$get_trial_bs;
}
export type ResponseContentType$get_trial_bs_three_years = keyof Response$get_trial_bs_three_years$Status$200;
export interface Params$get_trial_bs_three_years {
    parameter: Parameter$get_trial_bs_three_years;
}
export type ResponseContentType$get_trial_bs_two_years = keyof Response$get_trial_bs_two_years$Status$200;
export interface Params$get_trial_bs_two_years {
    parameter: Parameter$get_trial_bs_two_years;
}
export type ResponseContentType$get_trial_pl = keyof Response$get_trial_pl$Status$200;
export interface Params$get_trial_pl {
    parameter: Parameter$get_trial_pl;
}
export type ResponseContentType$get_trial_pl_sections = keyof Response$get_trial_pl_sections$Status$200;
export interface Params$get_trial_pl_sections {
    parameter: Parameter$get_trial_pl_sections;
}
export type ResponseContentType$get_trial_pl_segment_1_tags = keyof Response$get_trial_pl_segment_1_tags$Status$200;
export interface Params$get_trial_pl_segment_1_tags {
    parameter: Parameter$get_trial_pl_segment_1_tags;
}
export type ResponseContentType$get_trial_pl_segment_2_tags = keyof Response$get_trial_pl_segment_2_tags$Status$200;
export interface Params$get_trial_pl_segment_2_tags {
    parameter: Parameter$get_trial_pl_segment_2_tags;
}
export type ResponseContentType$get_trial_pl_segment_3_tags = keyof Response$get_trial_pl_segment_3_tags$Status$200;
export interface Params$get_trial_pl_segment_3_tags {
    parameter: Parameter$get_trial_pl_segment_3_tags;
}
export type ResponseContentType$get_trial_pl_three_years = keyof Response$get_trial_pl_three_years$Status$200;
export interface Params$get_trial_pl_three_years {
    parameter: Parameter$get_trial_pl_three_years;
}
export type ResponseContentType$get_trial_pl_two_years = keyof Response$get_trial_pl_two_years$Status$200;
export interface Params$get_trial_pl_two_years {
    parameter: Parameter$get_trial_pl_two_years;
}
export type ResponseContentType$get_sections = keyof Response$get_sections$Status$200;
export interface Params$get_sections {
    parameter: Parameter$get_sections;
}
export type RequestContentType$create_section = keyof RequestBody$create_section;
export type ResponseContentType$create_section = keyof Response$create_section$Status$201;
export interface Params$create_section<T extends RequestContentType$create_section> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_section[T];
}
export type ResponseContentType$get_section = keyof Response$get_section$Status$200;
export interface Params$get_section {
    parameter: Parameter$get_section;
}
export type RequestContentType$update_section = keyof RequestBody$update_section;
export type ResponseContentType$update_section = keyof Response$update_section$Status$200;
export interface Params$update_section<T extends RequestContentType$update_section> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_section;
    requestBody: RequestBody$update_section[T];
}
export interface Params$destroy_section {
    parameter: Parameter$destroy_section;
}
export type ResponseContentType$get_segment_tags = keyof Response$get_segment_tags$Status$200;
export interface Params$get_segment_tags {
    parameter: Parameter$get_segment_tags;
}
export type RequestContentType$create_segment_tag = keyof RequestBody$create_segment_tag;
export type ResponseContentType$create_segment_tag = keyof Response$create_segment_tag$Status$201;
export interface Params$create_segment_tag<T extends RequestContentType$create_segment_tag> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$create_segment_tag;
    requestBody: RequestBody$create_segment_tag[T];
}
export type RequestContentType$update_segment_tag = keyof RequestBody$update_segment_tag;
export type ResponseContentType$update_segment_tag = keyof Response$update_segment_tag$Status$200;
export interface Params$update_segment_tag<T extends RequestContentType$update_segment_tag> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_segment_tag;
    requestBody: RequestBody$update_segment_tag[T];
}
export interface Params$destroy_segments_tag {
    parameter: Parameter$destroy_segments_tag;
}
export type ResponseContentType$get_tags = keyof Response$get_tags$Status$200;
export interface Params$get_tags {
    parameter: Parameter$get_tags;
}
export type RequestContentType$create_tag = keyof RequestBody$create_tag;
export type ResponseContentType$create_tag = keyof Response$create_tag$Status$201;
export interface Params$create_tag<T extends RequestContentType$create_tag> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_tag[T];
}
export type ResponseContentType$get_tag = keyof Response$get_tag$Status$200;
export interface Params$get_tag {
    parameter: Parameter$get_tag;
}
export type RequestContentType$update_tag = keyof RequestBody$update_tag;
export type ResponseContentType$update_tag = keyof Response$update_tag$Status$200;
export interface Params$update_tag<T extends RequestContentType$update_tag> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_tag;
    requestBody: RequestBody$update_tag[T];
}
export interface Params$destroy_tag {
    parameter: Parameter$destroy_tag;
}
export type ResponseContentType$get_tax_codes = keyof Response$get_tax_codes$Status$200;
export type ResponseContentType$get_tax_code = keyof Response$get_tax_code$Status$200;
export interface Params$get_tax_code {
    parameter: Parameter$get_tax_code;
}
export type ResponseContentType$get_taxes_companies = keyof Response$get_taxes_companies$Status$200;
export interface Params$get_taxes_companies {
    parameter: Parameter$get_taxes_companies;
}
export type ResponseContentType$get_transfers = keyof Response$get_transfers$Status$200;
export interface Params$get_transfers {
    parameter: Parameter$get_transfers;
}
export type RequestContentType$create_transfer = keyof RequestBody$create_transfer;
export type ResponseContentType$create_transfer = keyof Response$create_transfer$Status$201;
export interface Params$create_transfer<T extends RequestContentType$create_transfer> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_transfer[T];
}
export type ResponseContentType$get_transfer = keyof Response$get_transfer$Status$200;
export interface Params$get_transfer {
    parameter: Parameter$get_transfer;
}
export type RequestContentType$update_transfer = keyof RequestBody$update_transfer;
export type ResponseContentType$update_transfer = keyof Response$update_transfer$Status$200;
export interface Params$update_transfer<T extends RequestContentType$update_transfer> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_transfer;
    requestBody: RequestBody$update_transfer[T];
}
export interface Params$destroy_transfer {
    parameter: Parameter$destroy_transfer;
}
export type ResponseContentType$get_users = keyof Response$get_users$Status$200;
export interface Params$get_users {
    parameter: Parameter$get_users;
}
export type ResponseContentType$get_users_capabilities = keyof Response$get_users_capabilities$Status$200;
export interface Params$get_users_capabilities {
    parameter: Parameter$get_users_capabilities;
}
export type ResponseContentType$get_users_me = keyof Response$get_users_me$Status$200;
export interface Params$get_users_me {
    parameter: Parameter$get_users_me;
}
export type RequestContentType$update_user = keyof RequestBody$update_user;
export type ResponseContentType$update_user = keyof Response$update_user$Status$200;
export interface Params$update_user<T extends RequestContentType$update_user> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$update_user[T];
}
export type ResponseContentType$get_wallet_txns = keyof Response$get_wallet_txns$Status$200;
export interface Params$get_wallet_txns {
    parameter: Parameter$get_wallet_txns;
}
export type RequestContentType$create_wallet_txn = keyof RequestBody$create_wallet_txn;
export type ResponseContentType$create_wallet_txn = keyof Response$create_wallet_txn$Status$201;
export interface Params$create_wallet_txn<T extends RequestContentType$create_wallet_txn> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_wallet_txn[T];
}
export type ResponseContentType$get_wallet_txn = keyof Response$get_wallet_txn$Status$200;
export interface Params$get_wallet_txn {
    parameter: Parameter$get_wallet_txn;
}
export interface Params$destroy_wallet_txn {
    parameter: Parameter$destroy_wallet_txn;
}
export type ResponseContentType$get_walletables = keyof Response$get_walletables$Status$200;
export interface Params$get_walletables {
    parameter: Parameter$get_walletables;
}
export type RequestContentType$create_walletable = keyof RequestBody$create_walletable;
export type ResponseContentType$create_walletable = keyof Response$create_walletable$Status$201;
export interface Params$create_walletable<T extends RequestContentType$create_walletable> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$create_walletable[T];
}
export type ResponseContentType$get_walletable = keyof Response$get_walletable$Status$200;
export interface Params$get_walletable {
    parameter: Parameter$get_walletable;
}
export type RequestContentType$update_walletable = keyof RequestBody$update_walletable;
export type ResponseContentType$update_walletable = keyof Response$update_walletable$Status$200;
export interface Params$update_walletable<T extends RequestContentType$update_walletable> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$update_walletable;
    requestBody: RequestBody$update_walletable[T];
}
export interface Params$destroy_walletable {
    parameter: Parameter$destroy_walletable;
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$get_account_items$Status$200 | Response$create_account_item$Status$201 | Response$get_account_item$Status$200 | Response$update_account_item$Status$200 | Response$get_approval_flow_routes$Status$200 | Response$get_approval_flow_route$Status$200 | Response$get_approval_requests$Status$200 | Response$create_approval_request$Status$201 | Response$get_approval_request_forms$Status$200 | Response$get_approval_request_form$Status$200 | Response$get_approval_request$Status$200 | Response$update_approval_request$Status$200 | Response$update_approval_request_action$Status$201 | Response$get_banks$Status$200 | Response$get_bank$Status$200 | Response$get_companies$Status$200 | Response$get_company$Status$200 | Response$get_deals$Status$200 | Response$create_deal$Status$201 | Response$get_deal$Status$200 | Response$update_deal$Status$200 | Response$create_deal_payment$Status$201 | Response$update_deal_payment$Status$200 | Response$create_deal_renew$Status$201 | Response$update_deal_renew$Status$200 | Response$delete_deal_renew$Status$200 | Response$get_expense_application_line_templates$Status$200 | Response$create_expense_application_line_template$Status$201 | Response$get_expense_application_line_template$Status$200 | Response$update_expense_application_line_template$Status$200 | Response$get_expense_applications$Status$200 | Response$create_expense_application$Status$201 | Response$get_expense_application$Status$200 | Response$update_expense_application$Status$200 | Response$update_expense_application_action$Status$201 | Response$get_forms_selectables$Status$200 | Response$get_invoices$Status$200 | Response$create_invoice$Status$201 | Response$get_invoice$Status$200 | Response$update_invoice$Status$200 | Response$get_items$Status$200 | Response$create_item$Status$201 | Response$get_item$Status$200 | Response$update_item$Status$200 | Response$get_journals$Status$202 | Response$download_journal$Status$200 | Response$get_journal_status$Status$200 | Response$get_manual_journals$Status$200 | Response$create_manual_journal$Status$201 | Response$get_manual_journal$Status$200 | Response$update_manual_journal$Status$200 | Response$get_partners$Status$200 | Response$create_partner$Status$201 | Response$update_partner_by_code$Status$200 | Response$get_partner$Status$200 | Response$update_partner$Status$200 | Response$get_payment_requests$Status$200 | Response$create_payment_request$Status$201 | Response$get_payment_request$Status$200 | Response$update_payment_request$Status$200 | Response$update_payment_request_action$Status$201 | Response$get_quotations$Status$200 | Response$create_quotation$Status$201 | Response$get_quotation$Status$200 | Response$update_quotation$Status$200 | Response$get_receipts$Status$200 | Response$create_receipt$Status$201 | Response$get_receipt$Status$200 | Response$update_receipt$Status$200 | Response$download_receipt$Status$200 | Response$get_trial_bs$Status$200 | Response$get_trial_bs_three_years$Status$200 | Response$get_trial_bs_two_years$Status$200 | Response$get_trial_pl$Status$200 | Response$get_trial_pl_sections$Status$200 | Response$get_trial_pl_segment_1_tags$Status$200 | Response$get_trial_pl_segment_2_tags$Status$200 | Response$get_trial_pl_segment_3_tags$Status$200 | Response$get_trial_pl_three_years$Status$200 | Response$get_trial_pl_two_years$Status$200 | Response$get_sections$Status$200 | Response$create_section$Status$201 | Response$get_section$Status$200 | Response$update_section$Status$200 | Response$get_segment_tags$Status$200 | Response$create_segment_tag$Status$201 | Response$update_segment_tag$Status$200 | Response$get_tags$Status$200 | Response$create_tag$Status$201 | Response$get_tag$Status$200 | Response$update_tag$Status$200 | Response$get_tax_codes$Status$200 | Response$get_tax_code$Status$200 | Response$get_taxes_companies$Status$200 | Response$get_transfers$Status$200 | Response$create_transfer$Status$201 | Response$get_transfer$Status$200 | Response$update_transfer$Status$200 | Response$get_users$Status$200 | Response$get_users_capabilities$Status$200 | Response$get_users_me$Status$200 | Response$update_user$Status$200 | Response$get_wallet_txns$Status$200 | Response$create_wallet_txn$Status$201 | Response$get_wallet_txn$Status$200 | Response$get_walletables$Status$200 | Response$create_walletable$Status$201 | Response$get_walletable$Status$200 | Response$update_walletable$Status$200;
export namespace ErrorResponse {
    export type get_account_items = Response$get_account_items$Status$400 | Response$get_account_items$Status$401 | Response$get_account_items$Status$403 | Response$get_account_items$Status$500;
    export type create_account_item = Response$create_account_item$Status$400 | Response$create_account_item$Status$401 | Response$create_account_item$Status$403 | Response$create_account_item$Status$500;
    export type get_account_item = Response$get_account_item$Status$400 | Response$get_account_item$Status$401 | Response$get_account_item$Status$403 | Response$get_account_item$Status$404 | Response$get_account_item$Status$500;
    export type update_account_item = Response$update_account_item$Status$400 | Response$update_account_item$Status$401 | Response$update_account_item$Status$403 | Response$update_account_item$Status$500 | Response$update_account_item$Status$503;
    export type destroy_account_item = Response$destroy_account_item$Status$400 | Response$destroy_account_item$Status$401 | Response$destroy_account_item$Status$403 | Response$destroy_account_item$Status$500;
    export type get_approval_flow_routes = Response$get_approval_flow_routes$Status$400 | Response$get_approval_flow_routes$Status$401 | Response$get_approval_flow_routes$Status$403 | Response$get_approval_flow_routes$Status$404 | Response$get_approval_flow_routes$Status$500;
    export type get_approval_flow_route = Response$get_approval_flow_route$Status$400 | Response$get_approval_flow_route$Status$401 | Response$get_approval_flow_route$Status$403 | Response$get_approval_flow_route$Status$404 | Response$get_approval_flow_route$Status$500;
    export type get_approval_requests = Response$get_approval_requests$Status$400 | Response$get_approval_requests$Status$401 | Response$get_approval_requests$Status$403 | Response$get_approval_requests$Status$404 | Response$get_approval_requests$Status$500;
    export type create_approval_request = Response$create_approval_request$Status$400 | Response$create_approval_request$Status$401 | Response$create_approval_request$Status$403 | Response$create_approval_request$Status$404 | Response$create_approval_request$Status$500;
    export type get_approval_request_forms = Response$get_approval_request_forms$Status$400 | Response$get_approval_request_forms$Status$401 | Response$get_approval_request_forms$Status$403 | Response$get_approval_request_forms$Status$404 | Response$get_approval_request_forms$Status$500;
    export type get_approval_request_form = Response$get_approval_request_form$Status$400 | Response$get_approval_request_form$Status$401 | Response$get_approval_request_form$Status$403 | Response$get_approval_request_form$Status$404 | Response$get_approval_request_form$Status$500;
    export type get_approval_request = Response$get_approval_request$Status$400 | Response$get_approval_request$Status$401 | Response$get_approval_request$Status$403 | Response$get_approval_request$Status$404 | Response$get_approval_request$Status$500;
    export type update_approval_request = Response$update_approval_request$Status$400 | Response$update_approval_request$Status$401 | Response$update_approval_request$Status$403 | Response$update_approval_request$Status$404 | Response$update_approval_request$Status$500;
    export type destroy_approval_request = Response$destroy_approval_request$Status$400 | Response$destroy_approval_request$Status$401 | Response$destroy_approval_request$Status$403 | Response$destroy_approval_request$Status$404 | Response$destroy_approval_request$Status$500;
    export type update_approval_request_action = Response$update_approval_request_action$Status$400 | Response$update_approval_request_action$Status$401 | Response$update_approval_request_action$Status$403 | Response$update_approval_request_action$Status$404 | Response$update_approval_request_action$Status$500;
    export type get_banks = Response$get_banks$Status$400 | Response$get_banks$Status$401 | Response$get_banks$Status$403 | Response$get_banks$Status$500;
    export type get_bank = Response$get_bank$Status$400 | Response$get_bank$Status$401 | Response$get_bank$Status$403 | Response$get_bank$Status$404 | Response$get_bank$Status$500;
    export type get_companies = Response$get_companies$Status$400 | Response$get_companies$Status$401 | Response$get_companies$Status$403 | Response$get_companies$Status$500;
    export type get_company = Response$get_company$Status$400 | Response$get_company$Status$401 | Response$get_company$Status$403 | Response$get_company$Status$500;
    export type get_deals = Response$get_deals$Status$400 | Response$get_deals$Status$401 | Response$get_deals$Status$403 | Response$get_deals$Status$404 | Response$get_deals$Status$500;
    export type create_deal = Response$create_deal$Status$400 | Response$create_deal$Status$401 | Response$create_deal$Status$403 | Response$create_deal$Status$404 | Response$create_deal$Status$500;
    export type get_deal = Response$get_deal$Status$400 | Response$get_deal$Status$401 | Response$get_deal$Status$403 | Response$get_deal$Status$404 | Response$get_deal$Status$500;
    export type update_deal = Response$update_deal$Status$400 | Response$update_deal$Status$401 | Response$update_deal$Status$403 | Response$update_deal$Status$404 | Response$update_deal$Status$500;
    export type destroy_deal = Response$destroy_deal$Status$400 | Response$destroy_deal$Status$401 | Response$destroy_deal$Status$403 | Response$destroy_deal$Status$404 | Response$destroy_deal$Status$500;
    export type create_deal_payment = Response$create_deal_payment$Status$400 | Response$create_deal_payment$Status$401 | Response$create_deal_payment$Status$403 | Response$create_deal_payment$Status$404 | Response$create_deal_payment$Status$500;
    export type update_deal_payment = Response$update_deal_payment$Status$400 | Response$update_deal_payment$Status$401 | Response$update_deal_payment$Status$403 | Response$update_deal_payment$Status$404 | Response$update_deal_payment$Status$500;
    export type destroy_deal_payment = Response$destroy_deal_payment$Status$400 | Response$destroy_deal_payment$Status$401 | Response$destroy_deal_payment$Status$403 | Response$destroy_deal_payment$Status$404 | Response$destroy_deal_payment$Status$500;
    export type create_deal_renew = Response$create_deal_renew$Status$400 | Response$create_deal_renew$Status$401 | Response$create_deal_renew$Status$403 | Response$create_deal_renew$Status$500;
    export type update_deal_renew = Response$update_deal_renew$Status$400 | Response$update_deal_renew$Status$401 | Response$update_deal_renew$Status$403 | Response$update_deal_renew$Status$500;
    export type delete_deal_renew = Response$delete_deal_renew$Status$400 | Response$delete_deal_renew$Status$401 | Response$delete_deal_renew$Status$403 | Response$delete_deal_renew$Status$500;
    export type get_expense_application_line_templates = Response$get_expense_application_line_templates$Status$400 | Response$get_expense_application_line_templates$Status$401 | Response$get_expense_application_line_templates$Status$403 | Response$get_expense_application_line_templates$Status$500;
    export type create_expense_application_line_template = Response$create_expense_application_line_template$Status$400 | Response$create_expense_application_line_template$Status$401 | Response$create_expense_application_line_template$Status$403 | Response$create_expense_application_line_template$Status$500;
    export type get_expense_application_line_template = Response$get_expense_application_line_template$Status$400 | Response$get_expense_application_line_template$Status$401 | Response$get_expense_application_line_template$Status$403 | Response$get_expense_application_line_template$Status$404 | Response$get_expense_application_line_template$Status$500;
    export type update_expense_application_line_template = Response$update_expense_application_line_template$Status$400 | Response$update_expense_application_line_template$Status$401 | Response$update_expense_application_line_template$Status$403 | Response$update_expense_application_line_template$Status$404 | Response$update_expense_application_line_template$Status$500;
    export type destroy_expense_application_line_template = Response$destroy_expense_application_line_template$Status$400 | Response$destroy_expense_application_line_template$Status$401 | Response$destroy_expense_application_line_template$Status$403 | Response$destroy_expense_application_line_template$Status$404 | Response$destroy_expense_application_line_template$Status$500;
    export type get_expense_applications = Response$get_expense_applications$Status$400 | Response$get_expense_applications$Status$401 | Response$get_expense_applications$Status$403 | Response$get_expense_applications$Status$500;
    export type create_expense_application = Response$create_expense_application$Status$400 | Response$create_expense_application$Status$401 | Response$create_expense_application$Status$403 | Response$create_expense_application$Status$500;
    export type get_expense_application = Response$get_expense_application$Status$400 | Response$get_expense_application$Status$401 | Response$get_expense_application$Status$403 | Response$get_expense_application$Status$404 | Response$get_expense_application$Status$500;
    export type update_expense_application = Response$update_expense_application$Status$400 | Response$update_expense_application$Status$401 | Response$update_expense_application$Status$403 | Response$update_expense_application$Status$404 | Response$update_expense_application$Status$500;
    export type destroy_expense_application = Response$destroy_expense_application$Status$400 | Response$destroy_expense_application$Status$401 | Response$destroy_expense_application$Status$403 | Response$destroy_expense_application$Status$404 | Response$destroy_expense_application$Status$500;
    export type update_expense_application_action = Response$update_expense_application_action$Status$400 | Response$update_expense_application_action$Status$401 | Response$update_expense_application_action$Status$403 | Response$update_expense_application_action$Status$404 | Response$update_expense_application_action$Status$500;
    export type get_forms_selectables = Response$get_forms_selectables$Status$400 | Response$get_forms_selectables$Status$401 | Response$get_forms_selectables$Status$403 | Response$get_forms_selectables$Status$500;
    export type get_invoices = Response$get_invoices$Status$400 | Response$get_invoices$Status$401 | Response$get_invoices$Status$403 | Response$get_invoices$Status$404 | Response$get_invoices$Status$500;
    export type create_invoice = Response$create_invoice$Status$400 | Response$create_invoice$Status$401 | Response$create_invoice$Status$403 | Response$create_invoice$Status$404 | Response$create_invoice$Status$500;
    export type get_invoice = Response$get_invoice$Status$400 | Response$get_invoice$Status$401 | Response$get_invoice$Status$403 | Response$get_invoice$Status$404 | Response$get_invoice$Status$500;
    export type update_invoice = Response$update_invoice$Status$400 | Response$update_invoice$Status$401 | Response$update_invoice$Status$403 | Response$update_invoice$Status$404 | Response$update_invoice$Status$500;
    export type destroy_invoice = Response$destroy_invoice$Status$400 | Response$destroy_invoice$Status$401 | Response$destroy_invoice$Status$403 | Response$destroy_invoice$Status$404 | Response$destroy_invoice$Status$500;
    export type get_items = Response$get_items$Status$400 | Response$get_items$Status$401 | Response$get_items$Status$403 | Response$get_items$Status$500;
    export type create_item = Response$create_item$Status$400 | Response$create_item$Status$401 | Response$create_item$Status$403 | Response$create_item$Status$500;
    export type get_item = Response$get_item$Status$400 | Response$get_item$Status$401 | Response$get_item$Status$403 | Response$get_item$Status$404 | Response$get_item$Status$500;
    export type update_item = Response$update_item$Status$400 | Response$update_item$Status$401 | Response$update_item$Status$403 | Response$update_item$Status$500;
    export type destroy_item = Response$destroy_item$Status$400 | Response$destroy_item$Status$401 | Response$destroy_item$Status$403 | Response$destroy_item$Status$404 | Response$destroy_item$Status$500;
    export type get_journals = Response$get_journals$Status$400 | Response$get_journals$Status$401 | Response$get_journals$Status$403 | Response$get_journals$Status$500;
    export type download_journal = Response$download_journal$Status$400 | Response$download_journal$Status$401 | Response$download_journal$Status$403 | Response$download_journal$Status$404 | Response$download_journal$Status$500;
    export type get_journal_status = Response$get_journal_status$Status$400 | Response$get_journal_status$Status$401 | Response$get_journal_status$Status$403 | Response$get_journal_status$Status$404 | Response$get_journal_status$Status$500;
    export type get_manual_journals = Response$get_manual_journals$Status$400 | Response$get_manual_journals$Status$401 | Response$get_manual_journals$Status$403 | Response$get_manual_journals$Status$500;
    export type create_manual_journal = Response$create_manual_journal$Status$400 | Response$create_manual_journal$Status$401 | Response$create_manual_journal$Status$403 | Response$create_manual_journal$Status$500 | Response$create_manual_journal$Status$503;
    export type get_manual_journal = Response$get_manual_journal$Status$400 | Response$get_manual_journal$Status$401 | Response$get_manual_journal$Status$403 | Response$get_manual_journal$Status$404 | Response$get_manual_journal$Status$500;
    export type update_manual_journal = Response$update_manual_journal$Status$400 | Response$update_manual_journal$Status$401 | Response$update_manual_journal$Status$403 | Response$update_manual_journal$Status$500;
    export type destroy_manual_journal = Response$destroy_manual_journal$Status$400 | Response$destroy_manual_journal$Status$401 | Response$destroy_manual_journal$Status$403 | Response$destroy_manual_journal$Status$404 | Response$destroy_manual_journal$Status$500;
    export type get_partners = Response$get_partners$Status$400 | Response$get_partners$Status$401 | Response$get_partners$Status$403 | Response$get_partners$Status$500;
    export type create_partner = Response$create_partner$Status$400 | Response$create_partner$Status$401 | Response$create_partner$Status$403 | Response$create_partner$Status$500;
    export type update_partner_by_code = Response$update_partner_by_code$Status$400 | Response$update_partner_by_code$Status$401 | Response$update_partner_by_code$Status$403 | Response$update_partner_by_code$Status$500;
    export type get_partner = Response$get_partner$Status$400 | Response$get_partner$Status$401 | Response$get_partner$Status$403 | Response$get_partner$Status$404 | Response$get_partner$Status$500;
    export type update_partner = Response$update_partner$Status$400 | Response$update_partner$Status$401 | Response$update_partner$Status$403 | Response$update_partner$Status$500;
    export type destroy_partner = Response$destroy_partner$Status$400 | Response$destroy_partner$Status$401 | Response$destroy_partner$Status$403 | Response$destroy_partner$Status$404 | Response$destroy_partner$Status$500;
    export type get_payment_requests = Response$get_payment_requests$Status$400 | Response$get_payment_requests$Status$401 | Response$get_payment_requests$Status$403 | Response$get_payment_requests$Status$404 | Response$get_payment_requests$Status$500;
    export type create_payment_request = Response$create_payment_request$Status$400 | Response$create_payment_request$Status$401 | Response$create_payment_request$Status$403 | Response$create_payment_request$Status$404 | Response$create_payment_request$Status$500;
    export type get_payment_request = Response$get_payment_request$Status$400 | Response$get_payment_request$Status$401 | Response$get_payment_request$Status$403 | Response$get_payment_request$Status$404 | Response$get_payment_request$Status$500;
    export type update_payment_request = Response$update_payment_request$Status$400 | Response$update_payment_request$Status$401 | Response$update_payment_request$Status$403 | Response$update_payment_request$Status$404 | Response$update_payment_request$Status$500;
    export type destroy_payment_request = Response$destroy_payment_request$Status$400 | Response$destroy_payment_request$Status$401 | Response$destroy_payment_request$Status$403 | Response$destroy_payment_request$Status$404 | Response$destroy_payment_request$Status$500;
    export type update_payment_request_action = Response$update_payment_request_action$Status$400 | Response$update_payment_request_action$Status$401 | Response$update_payment_request_action$Status$403 | Response$update_payment_request_action$Status$404 | Response$update_payment_request_action$Status$500;
    export type get_quotations = Response$get_quotations$Status$400 | Response$get_quotations$Status$401 | Response$get_quotations$Status$403 | Response$get_quotations$Status$404 | Response$get_quotations$Status$500;
    export type create_quotation = Response$create_quotation$Status$400 | Response$create_quotation$Status$401 | Response$create_quotation$Status$403 | Response$create_quotation$Status$404 | Response$create_quotation$Status$500;
    export type get_quotation = Response$get_quotation$Status$400 | Response$get_quotation$Status$401 | Response$get_quotation$Status$403 | Response$get_quotation$Status$404 | Response$get_quotation$Status$500;
    export type update_quotation = Response$update_quotation$Status$400 | Response$update_quotation$Status$401 | Response$update_quotation$Status$403 | Response$update_quotation$Status$404 | Response$update_quotation$Status$500;
    export type destroy_quotation = Response$destroy_quotation$Status$400 | Response$destroy_quotation$Status$401 | Response$destroy_quotation$Status$403 | Response$destroy_quotation$Status$404 | Response$destroy_quotation$Status$500;
    export type get_receipts = Response$get_receipts$Status$400 | Response$get_receipts$Status$401 | Response$get_receipts$Status$403 | Response$get_receipts$Status$500;
    export type create_receipt = Response$create_receipt$Status$400 | Response$create_receipt$Status$401 | Response$create_receipt$Status$403 | Response$create_receipt$Status$500;
    export type get_receipt = Response$get_receipt$Status$400 | Response$get_receipt$Status$401 | Response$get_receipt$Status$403 | Response$get_receipt$Status$404 | Response$get_receipt$Status$500;
    export type update_receipt = Response$update_receipt$Status$400 | Response$update_receipt$Status$401 | Response$update_receipt$Status$403 | Response$update_receipt$Status$404 | Response$update_receipt$Status$500;
    export type destroy_receipt = Response$destroy_receipt$Status$400 | Response$destroy_receipt$Status$401 | Response$destroy_receipt$Status$403 | Response$destroy_receipt$Status$404 | Response$destroy_receipt$Status$500;
    export type download_receipt = Response$download_receipt$Status$400 | Response$download_receipt$Status$401 | Response$download_receipt$Status$403 | Response$download_receipt$Status$404 | Response$download_receipt$Status$500;
    export type get_trial_bs = Response$get_trial_bs$Status$400 | Response$get_trial_bs$Status$401 | Response$get_trial_bs$Status$403 | Response$get_trial_bs$Status$429 | Response$get_trial_bs$Status$500;
    export type get_trial_bs_three_years = Response$get_trial_bs_three_years$Status$400 | Response$get_trial_bs_three_years$Status$401 | Response$get_trial_bs_three_years$Status$403 | Response$get_trial_bs_three_years$Status$429 | Response$get_trial_bs_three_years$Status$500;
    export type get_trial_bs_two_years = Response$get_trial_bs_two_years$Status$400 | Response$get_trial_bs_two_years$Status$401 | Response$get_trial_bs_two_years$Status$403 | Response$get_trial_bs_two_years$Status$429 | Response$get_trial_bs_two_years$Status$500;
    export type get_trial_pl = Response$get_trial_pl$Status$400 | Response$get_trial_pl$Status$401 | Response$get_trial_pl$Status$403 | Response$get_trial_pl$Status$429 | Response$get_trial_pl$Status$500;
    export type get_trial_pl_sections = Response$get_trial_pl_sections$Status$400 | Response$get_trial_pl_sections$Status$401 | Response$get_trial_pl_sections$Status$403 | Response$get_trial_pl_sections$Status$429 | Response$get_trial_pl_sections$Status$500;
    export type get_trial_pl_segment_1_tags = Response$get_trial_pl_segment_1_tags$Status$400 | Response$get_trial_pl_segment_1_tags$Status$401 | Response$get_trial_pl_segment_1_tags$Status$403 | Response$get_trial_pl_segment_1_tags$Status$429 | Response$get_trial_pl_segment_1_tags$Status$500;
    export type get_trial_pl_segment_2_tags = Response$get_trial_pl_segment_2_tags$Status$400 | Response$get_trial_pl_segment_2_tags$Status$401 | Response$get_trial_pl_segment_2_tags$Status$403 | Response$get_trial_pl_segment_2_tags$Status$429 | Response$get_trial_pl_segment_2_tags$Status$500;
    export type get_trial_pl_segment_3_tags = Response$get_trial_pl_segment_3_tags$Status$400 | Response$get_trial_pl_segment_3_tags$Status$401 | Response$get_trial_pl_segment_3_tags$Status$403 | Response$get_trial_pl_segment_3_tags$Status$429 | Response$get_trial_pl_segment_3_tags$Status$500;
    export type get_trial_pl_three_years = Response$get_trial_pl_three_years$Status$400 | Response$get_trial_pl_three_years$Status$401 | Response$get_trial_pl_three_years$Status$403 | Response$get_trial_pl_three_years$Status$429 | Response$get_trial_pl_three_years$Status$500;
    export type get_trial_pl_two_years = Response$get_trial_pl_two_years$Status$400 | Response$get_trial_pl_two_years$Status$401 | Response$get_trial_pl_two_years$Status$403 | Response$get_trial_pl_two_years$Status$429 | Response$get_trial_pl_two_years$Status$500;
    export type get_sections = Response$get_sections$Status$400 | Response$get_sections$Status$401 | Response$get_sections$Status$403 | Response$get_sections$Status$500;
    export type create_section = Response$create_section$Status$400 | Response$create_section$Status$401 | Response$create_section$Status$403 | Response$create_section$Status$500;
    export type get_section = Response$get_section$Status$400 | Response$get_section$Status$401 | Response$get_section$Status$403 | Response$get_section$Status$404 | Response$get_section$Status$500;
    export type update_section = Response$update_section$Status$400 | Response$update_section$Status$401 | Response$update_section$Status$403 | Response$update_section$Status$500;
    export type destroy_section = Response$destroy_section$Status$400 | Response$destroy_section$Status$401 | Response$destroy_section$Status$403 | Response$destroy_section$Status$500;
    export type get_segment_tags = Response$get_segment_tags$Status$400 | Response$get_segment_tags$Status$401 | Response$get_segment_tags$Status$403 | Response$get_segment_tags$Status$500;
    export type create_segment_tag = Response$create_segment_tag$Status$400 | Response$create_segment_tag$Status$401 | Response$create_segment_tag$Status$403 | Response$create_segment_tag$Status$500;
    export type update_segment_tag = Response$update_segment_tag$Status$400 | Response$update_segment_tag$Status$401 | Response$update_segment_tag$Status$403 | Response$update_segment_tag$Status$500;
    export type destroy_segments_tag = Response$destroy_segments_tag$Status$400 | Response$destroy_segments_tag$Status$401 | Response$destroy_segments_tag$Status$403 | Response$destroy_segments_tag$Status$500;
    export type get_tags = Response$get_tags$Status$400 | Response$get_tags$Status$401 | Response$get_tags$Status$403 | Response$get_tags$Status$500;
    export type create_tag = Response$create_tag$Status$400 | Response$create_tag$Status$401 | Response$create_tag$Status$403 | Response$create_tag$Status$500;
    export type get_tag = Response$get_tag$Status$400 | Response$get_tag$Status$401 | Response$get_tag$Status$403 | Response$get_tag$Status$404 | Response$get_tag$Status$500;
    export type update_tag = Response$update_tag$Status$400 | Response$update_tag$Status$401 | Response$update_tag$Status$403 | Response$update_tag$Status$404 | Response$update_tag$Status$500;
    export type destroy_tag = Response$destroy_tag$Status$400 | Response$destroy_tag$Status$401 | Response$destroy_tag$Status$403 | Response$destroy_tag$Status$404 | Response$destroy_tag$Status$500;
    export type get_tax_codes = Response$get_tax_codes$Status$400 | Response$get_tax_codes$Status$401 | Response$get_tax_codes$Status$403 | Response$get_tax_codes$Status$500;
    export type get_tax_code = Response$get_tax_code$Status$400 | Response$get_tax_code$Status$401 | Response$get_tax_code$Status$403 | Response$get_tax_code$Status$404 | Response$get_tax_code$Status$500;
    export type get_taxes_companies = Response$get_taxes_companies$Status$400 | Response$get_taxes_companies$Status$401 | Response$get_taxes_companies$Status$403 | Response$get_taxes_companies$Status$500;
    export type get_transfers = Response$get_transfers$Status$400 | Response$get_transfers$Status$401 | Response$get_transfers$Status$403 | Response$get_transfers$Status$500;
    export type create_transfer = Response$create_transfer$Status$400 | Response$create_transfer$Status$401 | Response$create_transfer$Status$403 | Response$create_transfer$Status$500;
    export type get_transfer = Response$get_transfer$Status$400 | Response$get_transfer$Status$401 | Response$get_transfer$Status$403 | Response$get_transfer$Status$404 | Response$get_transfer$Status$500;
    export type update_transfer = Response$update_transfer$Status$400 | Response$update_transfer$Status$401 | Response$update_transfer$Status$403 | Response$update_transfer$Status$404 | Response$update_transfer$Status$500;
    export type destroy_transfer = Response$destroy_transfer$Status$400 | Response$destroy_transfer$Status$401 | Response$destroy_transfer$Status$403 | Response$destroy_transfer$Status$404 | Response$destroy_transfer$Status$500;
    export type get_users = Response$get_users$Status$400 | Response$get_users$Status$401 | Response$get_users$Status$403 | Response$get_users$Status$404 | Response$get_users$Status$500;
    export type get_users_capabilities = Response$get_users_capabilities$Status$400 | Response$get_users_capabilities$Status$401 | Response$get_users_capabilities$Status$403 | Response$get_users_capabilities$Status$404 | Response$get_users_capabilities$Status$500;
    export type get_users_me = Response$get_users_me$Status$400 | Response$get_users_me$Status$401 | Response$get_users_me$Status$403 | Response$get_users_me$Status$404 | Response$get_users_me$Status$500;
    export type update_user = Response$update_user$Status$400 | Response$update_user$Status$401 | Response$update_user$Status$403 | Response$update_user$Status$404 | Response$update_user$Status$500;
    export type get_wallet_txns = Response$get_wallet_txns$Status$400 | Response$get_wallet_txns$Status$401 | Response$get_wallet_txns$Status$403 | Response$get_wallet_txns$Status$500;
    export type create_wallet_txn = Response$create_wallet_txn$Status$400 | Response$create_wallet_txn$Status$401 | Response$create_wallet_txn$Status$403 | Response$create_wallet_txn$Status$500;
    export type get_wallet_txn = Response$get_wallet_txn$Status$400 | Response$get_wallet_txn$Status$401 | Response$get_wallet_txn$Status$403 | Response$get_wallet_txn$Status$404 | Response$get_wallet_txn$Status$500;
    export type destroy_wallet_txn = Response$destroy_wallet_txn$Status$400 | Response$destroy_wallet_txn$Status$401 | Response$destroy_wallet_txn$Status$403 | Response$destroy_wallet_txn$Status$404 | Response$destroy_wallet_txn$Status$500;
    export type get_walletables = Response$get_walletables$Status$400 | Response$get_walletables$Status$401 | Response$get_walletables$Status$403 | Response$get_walletables$Status$500;
    export type create_walletable = Response$create_walletable$Status$400 | Response$create_walletable$Status$401 | Response$create_walletable$Status$403 | Response$create_walletable$Status$500;
    export type get_walletable = Response$get_walletable$Status$400 | Response$get_walletable$Status$401 | Response$get_walletable$Status$403 | Response$get_walletable$Status$404 | Response$get_walletable$Status$500;
    export type update_walletable = Response$update_walletable$Status$400 | Response$update_walletable$Status$401 | Response$update_walletable$Status$403 | Response$update_walletable$Status$404 | Response$update_walletable$Status$500;
    export type destroy_walletable = Response$destroy_walletable$Status$400 | Response$destroy_walletable$Status$401 | Response$destroy_walletable$Status$403 | Response$destroy_walletable$Status$404 | Response$destroy_walletable$Status$500;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    /**
     * 勘定科目一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の勘定科目一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>default_tax_id : デフォルト設定がされている税区分ID</li>
     *
     * <li>default_tax_code : リクエストした日時を基準とした税区分コード</li>
     * </ul>
     *
     * <h2 id="_3">注意点</h2>
     * <p>default_tax_code は勘定科目作成・更新時に利用するものではありません</p>
     * operationId: get_account_items
     * Request URI: /api/1/account_items
     */
    public async get_account_items(params: Params$get_account_items, option?: RequestOption): Promise<Response$get_account_items$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/account_items`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            base_date: { value: params.parameter.base_date, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 勘定科目の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の勘定科目を作成する</p>
     *
     * <h2 id="_2">注意点</h2>
     * <p>tax_nameは、api/1/taxes/companies/{company_id} で該当事業所の税区分の一覧を取得して、availableの値がtrue、かつ”name_ja”に”税率%”を含んでいない税区分を確認して、そのnameを指定して勘定科目の作成をしてください</p>
     * operationId: create_account_item
     * Request URI: /api/1/account_items
     */
    public async create_account_item<RequestContentType extends RequestContentType$create_account_item>(params: Params$create_account_item<RequestContentType>, option?: RequestOption): Promise<Response$create_account_item$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/account_items`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 勘定科目の詳細情報の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した勘定科目の詳細を取得する</p>
     * operationId: get_account_item
     * Request URI: /api/1/account_items/{id}
     */
    public async get_account_item(params: Params$get_account_item, option?: RequestOption): Promise<Response$get_account_item$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/account_items/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 勘定科目の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>勘定科目を更新する</p>
     *
     * <h2 id="_2">注意点</h2>
     * <p>tax_codeは、api/1/taxes/companies/{company_id} で該当事業所の税区分の一覧を取得して、availableの値がtrue、かつ”name_ja”に”税率%”を含んでいない税区分を確認して、そのcodeを指定して勘定科目の更新をしてください</p>
     * operationId: update_account_item
     * Request URI: /api/1/account_items/{id}
     */
    public async update_account_item<RequestContentType extends RequestContentType$update_account_item>(params: Params$update_account_item<RequestContentType>, option?: RequestOption): Promise<Response$update_account_item$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/account_items/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 勘定科目の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した勘定科目を削除する</p>
     * <h2 id="">注意点</h2>
     * <ul>
     * <li>削除できる勘定科目は、追加で作成したカスタム勘定項目のみです。</li>
     * <li>デフォルトで存在する勘定科目や口座の勘定科目は削除できません。</li></ul>
     * operationId: destroy_account_item
     * Request URI: /api/1/account_items/{id}
     */
    public async destroy_account_item(params: Params$destroy_account_item, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/account_items/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 申請経路一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の申請経路一覧を取得する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     * <p>経費精算APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費精算APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="">注意点</h2>
     *
     * <ul>
     *   <li>
     *     <p>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</p>
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: get_approval_flow_routes
     * Request URI: /api/1/approval_flow_routes
     */
    public async get_approval_flow_routes(params: Params$get_approval_flow_routes, option?: RequestOption): Promise<Response$get_approval_flow_routes$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_flow_routes`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            included_user_id: { value: params.parameter.included_user_id, explode: false },
            usage: { value: params.parameter.usage, explode: false },
            request_form_id: { value: params.parameter.request_form_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 申請経路の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の申請経路を取得する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     * <p>経費精算APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費精算APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="">注意点</h2>
     *
     * <ul>
     *   <li>
     *     <p>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</p>
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: get_approval_flow_route
     * Request URI: /api/1/approval_flow_routes/{id}
     */
    public async get_approval_flow_route(params: Params$get_approval_flow_route, option?: RequestOption): Promise<Response$get_approval_flow_route$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_flow_routes/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 各種申請の一覧
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の各種申請一覧を取得する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、各種申請の一覧を取得することができます。</li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している各種申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: get_approval_requests
     * Request URI: /api/1/approval_requests
     */
    public async get_approval_requests(params: Params$get_approval_requests, option?: RequestOption): Promise<Response$get_approval_requests$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            status: { value: params.parameter.status, explode: false },
            application_number: { value: params.parameter.application_number, explode: false },
            title: { value: params.parameter.title, explode: false },
            form_id: { value: params.parameter.form_id, explode: false },
            start_application_date: { value: params.parameter.start_application_date, explode: false },
            end_application_date: { value: params.parameter.end_application_date, explode: false },
            applicant_id: { value: params.parameter.applicant_id, explode: false },
            min_amount: { value: params.parameter.min_amount, explode: false },
            max_amount: { value: params.parameter.max_amount, explode: false },
            approver_id: { value: params.parameter.approver_id, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 各種申請の作成
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の各種申請を作成する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、各種申請を作成することができます。</li>
     *   <li>
     *     申請項目(request_items)については、申請フォームで設定された項目のIDとそれに対応する値を入力してください。
     *     <ul>
     *       <li>タイトル(title)：文字列(改行なし) 例)予算申請</li>
     *       <li>1行コメント(single_line)：文字列(改行なし) 例)予算に関する申請</li>
     *       <li>複数行コメント(multi_line)：文字列(改行あり)
     *       <br>
     *       &nbsp;&nbsp;例)<br>
     *       &nbsp;&nbsp;予算に関する申請<br>
     *       &nbsp;&nbsp;申請日 2019-12-17<br>
     *       </li>
     *       <li>プルダウン(select)： プルダウンの選択肢の名前(改行なし) 例)開発部</li>
     *       <li>日付(date)： 日付形式 例)2019-12-17</li>
     *       <li>金額(amount)： 数値(申請フォームで設定した上限・下限金額内の値, 改行なし) 例)10000</li>
     *       <li>添付ファイル(receipt)： ファイルボックスAPIのID 例)1</li>
     *       <li>部門ID(section)： 部門APIのID 例)1</li>
     *       <li>取引先ID(partner)： 取引先APIのID 例)1</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している各種申請は本API経由で作成ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>Web画面やAPIを通じて申請フォームが変更されると、本APIで使用する項目ID（request_itemsで指定するid）も変更されます。本API利用前に各種申請の取得APIを利用し、最新の申請フォームを取得することを推奨します。</li>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: create_approval_request
     * Request URI: /api/1/approval_requests
     */
    public async create_approval_request<RequestContentType extends RequestContentType$create_approval_request>(params: Params$create_approval_request<RequestContentType>, option?: RequestOption): Promise<Response$create_approval_request$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 各種申請の申請フォーム一覧の取得
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の各種申請の申請フォーム一覧を取得する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: get_approval_request_forms
     * Request URI: /api/1/approval_requests/forms
     */
    public async get_approval_request_forms(params: Params$get_approval_request_forms, option?: RequestOption): Promise<Response$get_approval_request_forms$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests/forms`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 各種申請の申請フォームの取得
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の各種申請の申請フォームを取得する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: get_approval_request_form
     * Request URI: /api/1/approval_requests/forms/{id}
     */
    public async get_approval_request_form(params: Params$get_approval_request_form, option?: RequestOption): Promise<Response$get_approval_request_form$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests/forms/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 各種申請の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の各種申請を取得する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している各種申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: get_approval_request
     * Request URI: /api/1/approval_requests/{id}
     */
    public async get_approval_request(params: Params$get_approval_request, option?: RequestOption): Promise<Response$get_approval_request$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 各種申請の更新
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の各種申請を更新する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、各種申請を更新することができます。</li>
     *   <li>
     *     申請項目(request_items)については、各種申請の取得APIで取得したrequest_items.idとそれに対応する値を入力してください。
     *     <ul>
     *       <li>タイトル(title)：文字列(改行なし) 例)予算申請</li>
     *       <li>1行コメント(single_line)：文字列(改行なし) 例)予算に関する申請</li>
     *       <li>複数行コメント(multi_line)：文字列(改行あり)
     *       <br>
     *       &nbsp;&nbsp;例)<br>
     *       &nbsp;&nbsp;予算に関する申請<br>
     *       &nbsp;&nbsp;申請日 2019-12-17<br>
     *       </li>
     *       <li>プルダウン(select)： プルダウンの選択肢の名前(改行なし) 例)開発部</li>
     *       <li>日付(date)： 日付形式 例)2019-12-17</li>
     *       <li>金額(amount)： 数値(申請フォームで設定した上限・下限金額内の値, 改行なし) 例)10000</li>
     *       <li>添付ファイル(receipt)： ファイルボックスAPIのID 例)1</li>
     *       <li>部門ID(section)： 部門APIのID 例)1</li>
     *       <li>取引先ID(partner)： 取引先APIのID 例)1</li>
     *     </ul>
     *   </li>
     *   <li>本APIでは、status(申請ステータス): draft:下書き, feedback:差戻しのみ更新可能です。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している各種申請は本API経由で更新ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>Web画面やAPIを通じて申請フォームが変更されると、本APIで使用する項目ID（request_itemsで指定するid）も変更されます。本APIで使用する項目IDは申請作成時点の項目IDです。本API利用前に各種申請の取得APIを利用し、申請作成時点の項目IDを取得することを推奨します。</li>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: update_approval_request
     * Request URI: /api/1/approval_requests/{id}
     */
    public async update_approval_request<RequestContentType extends RequestContentType$update_approval_request>(params: Params$update_approval_request<RequestContentType>, option?: RequestOption): Promise<Response$update_approval_request$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 各種申請の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の各種申請を削除する</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: destroy_approval_request
     * Request URI: /api/1/approval_requests/{id}
     */
    public async destroy_approval_request(params: Params$destroy_approval_request, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/approval_requests/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 各種申請の承認操作
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の各種申請の承認操作を行う</p>
     *
     * <p>各種申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-approval-requests" target="_blank">freee会計の各種申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、各種申請の承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）を行うことができます。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     * 　<li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している各種申請はAPI経由で承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>本APIはプロフェッショナルプラン、エンタープライズプランをご利用の事業所のみ利用可能です。</li>
     * </ul>
     * operationId: update_approval_request_action
     * Request URI: /api/1/approval_requests/{id}/actions
     */
    public async update_approval_request_action<RequestContentType extends RequestContentType$update_approval_request_action>(params: Params$update_approval_request_action<RequestContentType>, option?: RequestOption): Promise<Response$update_approval_request_action$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/approval_requests/${params.parameter.id}/actions`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 連携サービス一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>連携しているサービス一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>type
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_banks
     * Request URI: /api/1/banks
     */
    public async get_banks(params: Params$get_banks, option?: RequestOption): Promise<Response$get_banks$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/banks`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            type: { value: params.parameter.type, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 連携サービスの取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>連携しているサービスを取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>type
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_bank
     * Request URI: /api/1/banks/{id}
     */
    public async get_bank(params: Params$get_bank, option?: RequestOption): Promise<Response$get_bank$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/banks/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * 事業所一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>ユーザーが所属する事業所の一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>role
     * <ul>
     * <li>admin : 管理者</li>
     *
     * <li>simple_accounting : 一般</li>
     *
     * <li>self_only : 取引登録のみ</li>
     *
     * <li>read_only : 閲覧のみ</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_companies
     * Request URI: /api/1/companies
     */
    public async get_companies(option?: RequestOption): Promise<Response$get_companies$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/companies`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * 事業所の詳細情報の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>ユーザーが所属する事業所の詳細を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>role
     * <ul>
     * <li>admin : 管理者</li>
     *
     * <li>simple_accounting : 一般</li>
     *
     * <li>self_only : 取引登録のみ</li>
     *
     * <li>read_only : 閲覧のみ</li>
     * </ul>
     * </li>
     * </ul>
     *
     * <h2 id="_3">
     * operationId: get_company
     * Request URI: /api/1/companies/{id}
     */
    public async get_company(params: Params$get_company, option?: RequestOption): Promise<Response$get_company$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/companies/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            details: { value: params.parameter.details, explode: false },
            account_items: { value: params.parameter.account_items, explode: false },
            taxes: { value: params.parameter.taxes, explode: false },
            items: { value: params.parameter.items, explode: false },
            partners: { value: params.parameter.partners, explode: false },
            sections: { value: params.parameter.sections, explode: false },
            tags: { value: params.parameter.tags, explode: false },
            walletables: { value: params.parameter.walletables, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（収入／支出）一覧の取得
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引一覧（収入／支出）を取得する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li>
     * <p>details : 取引の明細行</p>
     * </li>
     * <li>
     * <p>accruals : 取引の債権債務行</p>
     * </li>
     * <li>
     * <p>renews : 取引の+更新行</p>
     * </li>
     * <li>
     * <p>payments : 取引の支払行</p>
     * </li>
     * <li>
     * <p>from_walletable_type</p>
     * <ul>
     * <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul>
     * </li>
     * <li>
     * <p>registered_from</p>
     * <ul>
     * <li>all : すべての取引</li>
     * <li>me : 自身が登録した取引</li>
     * </ul>
     * </li>
     * </ul>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     * <li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li>
     * </ul>
     * operationId: get_deals
     * Request URI: /api/1/deals
     */
    public async get_deals(params: Params$get_deals, option?: RequestOption): Promise<Response$get_deals$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/deals`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            account_item_id: { value: params.parameter.account_item_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            status: { value: params.parameter.status, explode: false },
            type: { value: params.parameter.type, explode: false },
            start_issue_date: { value: params.parameter.start_issue_date, explode: false },
            end_issue_date: { value: params.parameter.end_issue_date, explode: false },
            start_due_date: { value: params.parameter.start_due_date, explode: false },
            end_due_date: { value: params.parameter.end_due_date, explode: false },
            start_renew_date: { value: params.parameter.start_renew_date, explode: false },
            end_renew_date: { value: params.parameter.end_renew_date, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            registered_from: { value: params.parameter.registered_from, explode: false },
            accruals: { value: params.parameter.accruals, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（収入／支出）の作成
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）を作成する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li>
     * <p>ref_number : 管理番号</p>
     * </li>
     * <li>
     * <p>details : 取引の明細行(最大40行)</p>
     * </li>
     * <li>
     * <p>payments : 取引の支払行</p>
     * </li>
     * <li>
     * <p>receipt_ids : 証憑ファイルID（ファイルボックスのファイルID）</p>
     * </li>
     * <li>
     * <p>from_walletable_type</p>
     * <ul>
     * <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul>
     * </li>
     * </ul>
     * <h2 id="_3">注意点</h2>
     * <ul>
     *     <li><p>本APIでは+更新行(renews)の操作ができません。+更新行の作成APIをご利用ください。</p></li>
     *     <li><p>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</p></li>
     *     <li>
     *         <p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</p></li>
     *     <li>
     *         <p>本APIでは取引の明細行(details)は、最大40行までになります。</p>
     *     </li>
     * </ul>
     *
     * operationId: create_deal
     * Request URI: /api/1/deals
     */
    public async create_deal<RequestContentType extends RequestContentType$create_deal>(params: Params$create_deal<RequestContentType>, option?: RequestOption): Promise<Response$create_deal$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/deals`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（収入／支出）の取得
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）を取得する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li>
     * <p>details : 取引の明細行</p>
     * </li>
     * <li>
     * <p>accruals : 取引の債権債務行</p>
     * </li>
     * <li>
     * <p>renews : 取引の+更新行</p>
     * </li>
     * <li>
     * <p>payments : 取引の支払行</p>
     * </li>
     * <li>
     * <p>from_walletable_type</p>
     * <ul>
     * <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul>
     * </li>
     * <li>
     * <p>registered_from</p>
     * <ul>
     * <li>all : すべての取引</li>
     * <li>me : 自身が登録した取引</li>
     * </ul>
     * </li>
     * </ul>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     * </ul>
     * operationId: get_deal
     * Request URI: /api/1/deals/{id}
     */
    public async get_deal(params: Params$get_deal, option?: RequestOption): Promise<Response$get_deal$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            accruals: { value: params.parameter.accruals, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（収入／支出）の更新
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）を更新する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li>
     * <p>details : 取引の明細行(最大40行)</p>
     * </li>
     * <li>
     * <p>renews : 取引の+更新行</p>
     * </li>
     * <li>
     * <p>payments : 取引の支払行</p>
     * </li>
     * <li>
     * <p>from_walletable_type</p>
     * <ul>
     * <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul>
     * </li>
     * <li>
     * <p>receipt_ids : 証憑ファイルID（ファイルボックスのファイルID）</p>
     * </li>
     * </ul>
     * <h2 id="_3">注意点</h2>
     * <ul>
     *     <li><p>本APIでは支払行(payments)の操作ができません。支払行の作成・更新・削除APIをご利用ください。</p></li>
     *     <li><p>本APIでは+更新行(renews)の操作ができません。+更新行の作成・更新・削除APIをご利用ください。</p></li>
     *     <li><p>本APIでは収入／支出の切替えができません。既存の取引を削除後、再度作成してください。</p></li>
     *     <li><p>本APIで取引を更新すると、消費税の計算方法は必ず内税方式が選択されます。</p></li>
     *     <li><p>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</p></li>
     *     <li><p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</p></li>
     *     <li>
     *         <p>本APIでは取引の明細行(details)は、最大40行までになります。</p>
     *     </li>
     * </ul>
     * operationId: update_deal
     * Request URI: /api/1/deals/{id}
     */
    public async update_deal<RequestContentType extends RequestContentType$update_deal>(params: Params$update_deal<RequestContentType>, option?: RequestOption): Promise<Response$update_deal$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（収入／支出）の削除
     * operationId: destroy_deal
     * Request URI: /api/1/deals/{id}
     */
    public async destroy_deal(params: Params$destroy_deal, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（収入／支出）の支払行作成
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）の支払行を作成する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li> <p>details : 取引の明細行</p> </li>
     * <li> <p>renews : 取引の+更新行</p> </li>
     * <li> <p>payments : 取引の支払行</p> </li>
     * <li>
     * <p>from_walletable_type</p>
     * <ul>
     * <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: create_deal_payment
     * Request URI: /api/1/deals/{id}/payments
     */
    public async create_deal_payment<RequestContentType extends RequestContentType$create_deal_payment>(params: Params$create_deal_payment<RequestContentType>, option?: RequestOption): Promise<Response$create_deal_payment$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}/payments`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（収入／支出）の支払行更新
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）の支払行を更新する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li>
     * <p>details : 取引の明細行</p>
     * </li>
     * <li>
     * <p>renews : 取引の+更新行</p>
     * </li>
     * <li>
     * <p>payments : 取引の支払行</p>
     * </li>
     * <li>
     * <p>from_walletable_type</p>
     * <ul>
     * <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: update_deal_payment
     * Request URI: /api/1/deals/{id}/payments/{payment_id}
     */
    public async update_deal_payment<RequestContentType extends RequestContentType$update_deal_payment>(params: Params$update_deal_payment<RequestContentType>, option?: RequestOption): Promise<Response$update_deal_payment$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}/payments/${params.parameter.payment_id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（収入／支出）の支払行削除
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）の支払行を削除する</p>
     * <h2 id="_2">定義</h2>
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     * <li>
     * <p>due_date : 支払期日</p>
     * </li>
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * <li>
     * <p>due_amount : 支払残額</p>
     * </li>
     * <li>
     * <p>type</p>
     * <ul>
     * <li>income : 収入</li>
     * <li>expense : 支出</li>
     * </ul>
     * </li>
     * <li>
     * <p>details : 取引の明細行</p>
     * </li>
     * </ul>
     * operationId: destroy_deal_payment
     * Request URI: /api/1/deals/{id}/payments/{payment_id}
     */
    public async destroy_deal_payment(params: Params$destroy_deal_payment, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}/payments/${params.parameter.payment_id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（収入／支出）に対する+更新の作成
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）の+更新を作成する</p>
     * <h2 id="_2">定義</h2>
     * <ul> <li> <p>issue_date : 発生日</p> </li>
     * <li> <p>due_date : 支払期日</p> </li>
     * <li> <p>amount : 金額</p> </li>
     * <li> <p>due_amount : 支払残額</p> </li>
     * <li> <p>type</p>
     * <ul> <li>income : 収入</li>
     * <li>expense : 支出</li> </ul> </li>
     * <li> <p>details : 取引の明細行</p> </li>
     * <li> <p>accruals : 取引の債権債務行</p> </li>
     * <li> <p>renews : 取引の+更新行</p> </li>
     * <li> <p>payments : 取引の支払行</p> </li>
     * <li> <p>from_walletable_type</p>
     * <ul> <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul> </li> </ul>
     * <h2 id="_3">注意点</h2>
     * <ul> <li>本APIではdetails(取引の明細行)、accruals(債権債務行)、renewsのdetails(+更新の明細行)のみ操作可能です。</li>
     * <li>本APIで取引を更新すると、消費税の計算方法は必ず内税方式が選択されます。</li> </ul>
     *
     * operationId: create_deal_renew
     * Request URI: /api/1/deals/{id}/renews
     */
    public async create_deal_renew<RequestContentType extends RequestContentType$create_deal_renew>(params: Params$create_deal_renew<RequestContentType>, option?: RequestOption): Promise<Response$create_deal_renew$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}/renews`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（収入／支出）の+更新の更新
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）の+更新を更新する</p>
     * <h2 id="_2">定義</h2>
     * <ul> <li> <p>issue_date : 発生日</p> </li>
     * <li> <p>due_date : 支払期日</p> </li>
     * <li> <p>amount : 金額</p> </li>
     * <li> <p>due_amount : 支払残額</p> </li>
     * <li> <p>type</p>
     * <ul> <li>income : 収入</li>
     * <li>expense : 支出</li> </ul> </li>
     * <li> <p>details : 取引の明細行</p> </li>
     * <li> <p>accruals : 取引の債権債務行</p> </li>
     * <li> <p>renews : 取引の+更新行</p> </li>
     * <li> <p>payments : 取引の支払行</p> </li>
     * <li> <p>from_walletable_type</p>
     * <ul> <li>bank_account : 銀行口座</li>
     * <li>credit_card : クレジットカード</li>
     * <li>wallet : 現金</li>
     * <li>private_account_item : プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）</li>
     * </ul> </li> </ul>
     * <h2 id="_3">注意点</h2>
     * <ul> <li>本APIでは+更新の更新のみ可能です。取引や支払行に対する更新はできません。</li> <li>renew_idにはrenewsのid(+更新ID)を指定してください。renewsのdetailsのid(+更新の明細行ID)を指定できません。</li> <li>月締めされている仕訳に紐づく＋更新行の編集・削除はできません。</li> <li>承認済み仕訳に紐づく＋更新行の編集・削除は管理者権限のユーザーのみ可能です。</li>
     * <li>本APIで取引を更新すると、消費税の計算方法は必ず内税方式が選択されます。</li> </ul>
     *
     * operationId: update_deal_renew
     * Request URI: /api/1/deals/{id}/renews/{renew_id}
     */
    public async update_deal_renew<RequestContentType extends RequestContentType$update_deal_renew>(params: Params$update_deal_renew<RequestContentType>, option?: RequestOption): Promise<Response$update_deal_renew$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}/renews/${params.parameter.renew_id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（収入／支出）の+更新の削除
     * <h2 id="">概要</h2>
     * <p>指定した事業所の取引（収入／支出）の+更新を削除する</p>
     * <h2 id="_3">注意点</h2>
     * <ul> <li>本APIでは+更新の削除のみ可能です。取引や支払行に対する削除はできません。</li> <li>renew_idにはrenewsのid(+更新ID)を指定してください。renewsのdetailsのid(+更新の明細行ID)を指定できません。</li>
     * <li>月締めされている仕訳に紐づく＋更新行の編集・削除はできません。</li> <li>承認済み仕訳に紐づく＋更新行の編集・削除は管理者権限のユーザーのみ可能です。</li>
     * <li>本APIで取引を更新すると、消費税の計算方法は必ず内税方式が選択されます。</li> </ul>
     *
     * operationId: delete_deal_renew
     * Request URI: /api/1/deals/{id}/renews/{renew_id}
     */
    public async delete_deal_renew(params: Params$delete_deal_renew, option?: RequestOption): Promise<Response$delete_deal_renew$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/deals/${params.parameter.id}/renews/${params.parameter.renew_id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費科目一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の経費科目一覧を取得する</p>
     * operationId: get_expense_application_line_templates
     * Request URI: /api/1/expense_application_line_templates
     */
    public async get_expense_application_line_templates(params: Params$get_expense_application_line_templates, option?: RequestOption): Promise<Response$get_expense_application_line_templates$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_application_line_templates`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費科目の作成
     * operationId: create_expense_application_line_template
     * Request URI: /api/1/expense_application_line_templates
     */
    public async create_expense_application_line_template<RequestContentType extends RequestContentType$create_expense_application_line_template>(params: Params$create_expense_application_line_template<RequestContentType>, option?: RequestOption): Promise<Response$create_expense_application_line_template$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_application_line_templates`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 経費科目の取得
     * operationId: get_expense_application_line_template
     * Request URI: /api/1/expense_application_line_templates/{id}
     */
    public async get_expense_application_line_template(params: Params$get_expense_application_line_template, option?: RequestOption): Promise<Response$get_expense_application_line_template$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_application_line_templates/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費科目の更新
     * operationId: update_expense_application_line_template
     * Request URI: /api/1/expense_application_line_templates/{id}
     */
    public async update_expense_application_line_template<RequestContentType extends RequestContentType$update_expense_application_line_template>(params: Params$update_expense_application_line_template<RequestContentType>, option?: RequestOption): Promise<Response$update_expense_application_line_template$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_application_line_templates/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 経費科目の削除
     * operationId: destroy_expense_application_line_template
     * Request URI: /api/1/expense_application_line_templates/{id}
     */
    public async destroy_expense_application_line_template(params: Params$destroy_expense_application_line_template, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/expense_application_line_templates/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費申請一覧の取得
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の経費申請一覧を取得する</p>
     *
     * <p>経費申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、経費申請の一覧を取得することができます。</li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している経費申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: get_expense_applications
     * Request URI: /api/1/expense_applications
     */
    public async get_expense_applications(params: Params$get_expense_applications, option?: RequestOption): Promise<Response$get_expense_applications$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_applications`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            status: { value: params.parameter.status, explode: false },
            payroll_attached: { value: params.parameter.payroll_attached, explode: false },
            start_transaction_date: { value: params.parameter.start_transaction_date, explode: false },
            end_transaction_date: { value: params.parameter.end_transaction_date, explode: false },
            application_number: { value: params.parameter.application_number, explode: false },
            title: { value: params.parameter.title, explode: false },
            start_issue_date: { value: params.parameter.start_issue_date, explode: false },
            end_issue_date: { value: params.parameter.end_issue_date, explode: false },
            applicant_id: { value: params.parameter.applicant_id, explode: false },
            approver_id: { value: params.parameter.approver_id, explode: false },
            min_amount: { value: params.parameter.min_amount, explode: false },
            max_amount: { value: params.parameter.max_amount, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費申請の作成
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の経費申請を作成する</p>
     *
     * <p>経費申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している経費申請は本API経由で作成ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>申請時には、申請タイトル(title)に加え、申請日(issue_date)、項目行については金額(amount)、日付(transaction_date)、内容(description)が必須項目となります。申請時の業務効率化のため、API入力をお勧めします。</li>
     *   <li>本APIは駅すぱあと連携 (出発駅と到着駅から金額を自動入力する機能)には非対応です。駅すぱあと連携を使用した経費申請は作成できません。</li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: create_expense_application
     * Request URI: /api/1/expense_applications
     */
    public async create_expense_application<RequestContentType extends RequestContentType$create_expense_application>(params: Params$create_expense_application<RequestContentType>, option?: RequestOption): Promise<Response$create_expense_application$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_applications`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 経費申請詳細の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の経費申請を取得する</p>
     *
     * <p>経費申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している経費申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>本APIは駅すぱあと連携 (出発駅と到着駅から金額を自動入力する機能)には非対応です。駅すぱあと連携を使用した経費申請は取得できません。</li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: get_expense_application
     * Request URI: /api/1/expense_applications/{id}
     */
    public async get_expense_application(params: Params$get_expense_application, option?: RequestOption): Promise<Response$get_expense_application$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_applications/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費申請の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の経費申請を更新する</p>
     *
     * <p>経費申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、経費申請を更新することができます。</li>
     *   <li>本APIでは、status(申請ステータス): draft:下書き, feedback:差戻しのみ更新可能です。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している経費申請は本API経由で更新ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>申請時には、申請タイトル(title)に加え、申請日(issue_date)、項目行については金額(amount)、日付(transaction_date)、内容(description)が必須項目となります。申請時の業務効率化のため、API入力をお勧めします。</li>
     *   <li>本APIは駅すぱあと連携 (出発駅と到着駅から金額を自動入力する機能)には非対応です。駅すぱあと連携を使用した経費申請は更新できません。</li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: update_expense_application
     * Request URI: /api/1/expense_applications/{id}
     */
    public async update_expense_application<RequestContentType extends RequestContentType$update_expense_application>(params: Params$update_expense_application<RequestContentType>, option?: RequestOption): Promise<Response$update_expense_application$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_applications/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 経費申請の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の経費申請を削除する</p>
     *
     * <p>経費申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *       <li>自分が申請者でない申請の削除が可能なのはユーザーの権限が管理者権限、且つ申請ステータスが差し戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>本APIは駅すぱあと連携 (出発駅と到着駅から金額を自動入力する機能)には非対応です。駅すぱあと連携を使用した経費申請は削除できません。</li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: destroy_expense_application
     * Request URI: /api/1/expense_applications/{id}
     */
    public async destroy_expense_application(params: Params$destroy_expense_application, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/expense_applications/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 経費申請の承認操作
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の経費申請の承認操作を行う</p>
     *
     * <p>経費申請APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-expense-applications" target="_blank">freee会計の経費申請APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、経費申請の承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）を行うことができます。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     * 　<li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している経費申請はAPI経由で承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>本APIは駅すぱあと連携 (出発駅と到着駅から金額を自動入力する機能)には非対応です。駅すぱあと連携を使用した経費申請は承認操作できません。</li>
     *   <li>個人アカウントの場合は、プレミアムプランでご利用できます。</li>
     *   <li>法人アカウントの場合は、ベーシックプラン、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: update_expense_application_action
     * Request URI: /api/1/expense_applications/{id}/actions
     */
    public async update_expense_application_action<RequestContentType extends RequestContentType$update_expense_application_action>(params: Params$update_expense_application_action<RequestContentType>, option?: RequestOption): Promise<Response$update_expense_application_action$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/expense_applications/${params.parameter.id}/actions`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * フォーム用選択項目情報の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のフォーム用選択項目情報を取得する</p>
     * operationId: get_forms_selectables
     * Request URI: /api/1/forms/selectables
     */
    public async get_forms_selectables(params: Params$get_forms_selectables, option?: RequestOption): Promise<Response$get_forms_selectables$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/forms/selectables`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            includes: { value: params.parameter.includes, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 請求書一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の請求書一覧を取得する</p>
     *
     * operationId: get_invoices
     * Request URI: /api/1/invoices
     */
    public async get_invoices(params: Params$get_invoices, option?: RequestOption): Promise<Response$get_invoices$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/invoices`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            start_issue_date: { value: params.parameter.start_issue_date, explode: false },
            end_issue_date: { value: params.parameter.end_issue_date, explode: false },
            start_due_date: { value: params.parameter.start_due_date, explode: false },
            end_due_date: { value: params.parameter.end_due_date, explode: false },
            invoice_number: { value: params.parameter.invoice_number, explode: false },
            description: { value: params.parameter.description, explode: false },
            invoice_status: { value: params.parameter.invoice_status, explode: false },
            payment_status: { value: params.parameter.payment_status, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 請求書の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の請求書を作成する</p>
     *
     * <h2 id="_1">注意点</h2>
     * <ul>
     * <li> <p>partner_code, partner_idはどちらかの指定が必須です。ただし両方同時に指定することはできません。</p> </li>
     * <li> <p>請求書ステータス(invoice_status)を発行(issue)で利用した場合、請求内容の合計金額が0円以上になる必要があります。</p> </li>
     * <li> <p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。</p> </li>
     * <li> <p>本APIでは請求内容(invoice_contents)は、最大100行までになります。</p> </li>
     * </ul>
     * operationId: create_invoice
     * Request URI: /api/1/invoices
     */
    public async create_invoice<RequestContentType extends RequestContentType$create_invoice>(params: Params$create_invoice<RequestContentType>, option?: RequestOption): Promise<Response$create_invoice$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/invoices`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 請求書の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の請求書詳細を取得する</p>
     * operationId: get_invoice
     * Request URI: /api/1/invoices/{id}
     */
    public async get_invoice(params: Params$get_invoice, option?: RequestOption): Promise<Response$get_invoice$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/invoices/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 請求書の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の請求書を更新する</p>
     *
     * <h2 id="_1">注意点</h2>
     * <ul>
     * <li> <p>入金済みの請求書に対する金額関連の変更はできません。</p> </li>
     * <li> <p>請求書ステータスは確定(issue)のみ指定可能です。請求書ステータスを確定する時のみ指定してください。</p> </li>
     * <li> <p>請求書WFを利用している場合、承認済み請求書は承認権限を持たないユーザーでは更新できません。</p> </li>
     * <li> <p>更新後の請求書ステータス(invoice_status)が下書き以外の場合、請求内容の合計金額が0円以上になる必要があります。</p> </li>
     * <li> <p>partner_code, partner_idを両方同時に指定することはできません。</p> </li>
     * <li> <p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。</p> </li>
     * <li> <p>本APIでは請求内容(invoice_contents)は、最大100行までになります。</p> </li>
     * </ul>
     * operationId: update_invoice
     * Request URI: /api/1/invoices/{id}
     */
    public async update_invoice<RequestContentType extends RequestContentType$update_invoice>(params: Params$update_invoice<RequestContentType>, option?: RequestOption): Promise<Response$update_invoice$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/invoices/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 請求書の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の請求書を削除する</p>
     * operationId: destroy_invoice
     * Request URI: /api/1/invoices/{id}
     */
    public async destroy_invoice(params: Params$destroy_invoice, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/invoices/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 品目一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の品目一覧を取得する</p>
     * operationId: get_items
     * Request URI: /api/1/items
     */
    public async get_items(params: Params$get_items, option?: RequestOption): Promise<Response$get_items$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/items`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            start_update_date: { value: params.parameter.start_update_date, explode: false },
            end_update_date: { value: params.parameter.end_update_date, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 品目の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の品目を作成する</p>
     * operationId: create_item
     * Request URI: /api/1/items
     */
    public async create_item<RequestContentType extends RequestContentType$create_item>(params: Params$create_item<RequestContentType>, option?: RequestOption): Promise<Response$create_item$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/items`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 品目の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の品目を取得する</p>
     * operationId: get_item
     * Request URI: /api/1/items/{id}
     */
    public async get_item(params: Params$get_item, option?: RequestOption): Promise<Response$get_item$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/items/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 品目の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の品目を更新する</p>
     * operationId: update_item
     * Request URI: /api/1/items/{id}
     */
    public async update_item<RequestContentType extends RequestContentType$update_item>(params: Params$update_item<RequestContentType>, option?: RequestOption): Promise<Response$update_item$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/items/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 品目の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の品目を削除する</p>
     * operationId: destroy_item
     * Request URI: /api/1/items/{id}
     */
    public async destroy_item(params: Params$destroy_item, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/items/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * ダウンロード要求
     *
     * <h2 id="">概要</h2>
     *
     * <p>ユーザーが所属する事業所の仕訳帳のダウンロードをリクエストします 生成されるファイルに関しては、<a href="https://support.freee.co.jp/hc/ja/articles/204599604#2">ヘルプページ</a>をご参照ください</p>
     *
     * <p>＊このAPIは無料プランのアカウントではご利用になれません</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *   <li>download_type
     *     <ul>
     *       <li>generic(freee Webからダウンロードできるものと同じ)</li>
     *       <li>csv (yayoi形式)</li>
     *       <li>pdf</li>
     *     </ul>
     *   </li>
     *   <li>visible_tags : 指定しない場合は従来の仕様の仕訳帳が出力されます
     *     <ul>
     *       <li>partner : 取引先タグ</li>
     *       <li>item : 品目タグ</li>
     *       <li>tag : メモタグ</li>
     *       <li>section : 部門タグ</li>
     *       <li>description : 備考欄</li>
     *       <li>wallet_txn_description : 明細の備考欄</li>
     *       <li>
     *         segment_1_tag : セグメント1(法人向けプロフェッショナル, 法人向けエンタープライズプラン)<br>
     *         segment_2_tag : セグメント2(法人向け エンタープライズプラン)<br>
     *         segment_3_tag : セグメント3(法人向け エンタープライズプラン)<br><br>
     *         <a href="https://support.freee.co.jp/hc/ja/articles/360020679611" target="_blank">セグメント（分析用タグ）の設定</a><br>
     *       </li>
     *       <li>all : 指定された場合は上記の設定をすべて有効として扱いますが、セグメント1、セグメント2、セグメント3は含みません。セグメントが必要な場合はallではなく、segment_1_tag, segment_2_tag, segment_3_tagを指定してください。</li>
     *     </ul>
     *   </li>
     *   <li>visible_ids : download_typeがgenericの場合のみ利用可能です
     *     <ul>
     *       <li>deal_id : 取引ID</li>
     *       <li>transfer_id : 取引(振替)ID</li>
     *       <li>manual_journal_id : 振替伝票ID</li>
     *     </ul>
     *   </li>
     *
     *   <li>id : 受け付けID</li>
     * </ul>
     * operationId: get_journals
     * Request URI: /api/1/journals
     */
    public async get_journals(params: Params$get_journals, option?: RequestOption): Promise<Response$get_journals$Status$202["application/json"]> {
        const url = this.baseUrl + `/api/1/journals`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            download_type: { value: params.parameter.download_type, explode: false },
            company_id: { value: params.parameter.company_id, explode: false },
            "visible_tags[]": { value: params.parameter["visible_tags[]"], style: "form", explode: true },
            "visible_ids[]": { value: params.parameter["visible_ids[]"], style: "form", explode: true },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ダウンロード実行
     *
     * <h2 id="">概要</h2>
     *
     * <p>ダウンロードを実行する</p>
     *
     * <p>＊このAPIは無料プランのアカウントではご利用になれません</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>id : 受け付けID</li>
     * </ul>
     * operationId: download_journal
     * Request URI: /api/1/journals/reports/{id}/download
     */
    public async download_journal<ResponseContentType extends ResponseContentType$download_journal>(params: Params$download_journal<ResponseContentType>, option?: RequestOption): Promise<Response$download_journal$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/api/1/journals/reports/${params.parameter.id}/download`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ステータス確認
     *
     * <h2 id="">概要</h2>
     *
     * <p>ダウンロードリクエストのステータスを確認する</p>
     *
     * <p>＊このAPIは無料プランのアカウントではご利用になれません</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>status</p>
     *
     * <ul>
     * <li>enqueued : 実行待ち</li>
     *
     * <li>working : 実行中</li>
     *
     * <li>uploaded : 準備完了</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>id : 受け付けID</p>
     * </li>
     * </ul>
     * operationId: get_journal_status
     * Request URI: /api/1/journals/reports/{id}/status
     */
    public async get_journal_status(params: Params$get_journal_status, option?: RequestOption): Promise<Response$get_journal_status$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/journals/reports/${params.parameter.id}/status`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 振替伝票一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の振替伝票一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     *
     * <li>
     * <p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p>
     * </li>
     *
     * <li>
     * <p>txn_number : 仕訳番号</p>
     * </li>
     *
     * <li>
     * <p>details : 振替伝票の貸借行</p>
     * </li>
     *
     * <li>
     * <p>entry_side : 貸借区分</p>
     *
     * <ul>
     * <li>credit : 貸方</li>
     *
     * <li>debit : 借方</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * </ul>
     *
     * <h2 id="_3">注意点</h2>
     *
     * <ul>
     * <li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
     * <li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
     * <li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     * <li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li></ul>
     * operationId: get_manual_journals
     * Request URI: /api/1/manual_journals
     */
    public async get_manual_journals(params: Params$get_manual_journals, option?: RequestOption): Promise<Response$get_manual_journals$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/manual_journals`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            start_issue_date: { value: params.parameter.start_issue_date, explode: false },
            end_issue_date: { value: params.parameter.end_issue_date, explode: false },
            entry_side: { value: params.parameter.entry_side, explode: false },
            account_item_id: { value: params.parameter.account_item_id, explode: false },
            min_amount: { value: params.parameter.min_amount, explode: false },
            max_amount: { value: params.parameter.max_amount, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            segment_1_tag_id: { value: params.parameter.segment_1_tag_id, explode: false },
            segment_2_tag_id: { value: params.parameter.segment_2_tag_id, explode: false },
            segment_3_tag_id: { value: params.parameter.segment_3_tag_id, explode: false },
            comment_status: { value: params.parameter.comment_status, explode: false },
            comment_important: { value: params.parameter.comment_important, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            txn_number: { value: params.parameter.txn_number, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 振替伝票の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の振替伝票を作成する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     *
     * <li>
     * <p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p>
     * </li>
     *
     * <li>
     * <p>txn_number : 仕訳番号</p>
     * </li>
     *
     * <li>
     * <p>details : 振替伝票の貸借行</p>
     * </li>
     *
     * <li>
     * <p>entry_side : 貸借区分</p>
     *
     * <ul>
     * <li>credit : 貸方</li>
     *
     * <li>debit : 借方</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * </ul>
     *
     * <h2 id="_3">注意点</h2>
     *
     * <ul>
     * <li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
     * <li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
     * <li>貸借合わせて100行まで仕訳行を登録できます。</li>
     * <li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     * <li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li></ul>
     *
     *
     * operationId: create_manual_journal
     * Request URI: /api/1/manual_journals
     */
    public async create_manual_journal<RequestContentType extends RequestContentType$create_manual_journal>(params: Params$create_manual_journal<RequestContentType>, option?: RequestOption): Promise<Response$create_manual_journal$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/manual_journals`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 振替伝票の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の振替伝票を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul> <li> <p>issue_date : 発生日</p> </li>
     * <li> <p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p> </li>
     * <li> <p>txn_number : 仕訳番号</p> </li>
     * <li> <p>details : 振替伝票の貸借行</p> </li>
     * <li> <p>entry_side : 貸借区分</p>
     * <ul> <li>credit : 貸方</li>
     * <li>debit : 借方</li> </ul> </li>
     * <li> <p>amount : 金額</p> </li> </ul>
     *
     * <h2 id="_3">注意点</h2>
     *
     * <ul>
     * <li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
     * <li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
     * <li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     * </ul>
     * operationId: get_manual_journal
     * Request URI: /api/1/manual_journals/{id}
     */
    public async get_manual_journal(params: Params$get_manual_journal, option?: RequestOption): Promise<Response$get_manual_journal$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/manual_journals/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 振替伝票の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の振替伝票を更新する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>issue_date : 発生日</p>
     * </li>
     *
     * <li>
     * <p>adjustment : 決算整理仕訳フラグ（true: 決算整理仕訳, false: 日常仕訳）</p>
     * </li>
     *
     * <li>
     * <p>txn_number : 仕訳番号</p>
     * </li>
     *
     * <li>
     * <p>details : 振替伝票の貸借行</p>
     * </li>
     *
     * <li>
     * <p>entry_side : 貸借区分</p>
     *
     * <ul>
     * <li>credit : 貸方</li>
     *
     * <li>debit : 借方</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>amount : 金額</p>
     * </li>
     * </ul>
     *
     * <h2 id="_3">注意点</h2>
     *
     * <ul>
     * <li>振替伝票は売掛・買掛レポートには反映されません。債権・債務データの登録は取引(Deals)をお使いください。</li>
     *
     * <li>事業所の仕訳番号形式が有効な場合のみ、レスポンスで仕訳番号(txn_number)を返します。</li>
     * <li>貸借合わせて100行まで仕訳行を登録できます。</li>
     *
     * <li>detailsに含まれない既存の貸借行は削除されます。更新後も残したい行は、必ず貸借行IDを指定してdetailsに含めてください。</li>
     *
     * <li>detailsに含まれる貸借行IDの指定がある行は、更新行として扱われ更新されます。</li>
     *
     * <li>detailsに含まれる貸借行IDの指定がない行は、新規行として扱われ追加されます。</li>
     * <li>セグメントタグ情報は法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     * <li>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。またpartner_codeとpartner_idは同時に指定することはできません。</li></ul>
     *
     *
     * operationId: update_manual_journal
     * Request URI: /api/1/manual_journals/{id}
     */
    public async update_manual_journal<RequestContentType extends RequestContentType$update_manual_journal>(params: Params$update_manual_journal<RequestContentType>, option?: RequestOption): Promise<Response$update_manual_journal$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/manual_journals/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 振替伝票の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の振替伝票を削除する</p>
     * operationId: destroy_manual_journal
     * Request URI: /api/1/manual_journals/{id}
     */
    public async destroy_manual_journal(params: Params$destroy_manual_journal, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/manual_journals/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引先一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引先一覧を取得する</p>
     * <ul>
     * <li>振込元口座ID（payer_walletable_id）, 振込手数料負担（transfer_fee_handling_side）は法人向けのプロフェッショナルプラン以上で利用可能です。</li></ul>
     * operationId: get_partners
     * Request URI: /api/1/partners
     */
    public async get_partners(params: Params$get_partners, option?: RequestOption): Promise<Response$get_partners$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/partners`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            start_update_date: { value: params.parameter.start_update_date, explode: false },
            end_update_date: { value: params.parameter.end_update_date, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            keyword: { value: params.parameter.keyword, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引先の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引先を作成する</p>
     * <ul>
     * <li>codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。</li>
     * <li>取引先コードの利用を有効にしている場合は、codeの指定は必須です。</li>
     * <li>振込元口座ID（payer_walletable_id）, 振込手数料負担（transfer_fee_handling_side）, 支払期日設定（payment_term_attributes, 請求の入金期日設定（invoice_payment_term_attributes）は法人向けのプロフェッショナルプラン以上で利用可能です。</li></ul>
     * operationId: create_partner
     * Request URI: /api/1/partners
     */
    public async create_partner<RequestContentType extends RequestContentType$create_partner>(params: Params$create_partner<RequestContentType>, option?: RequestOption): Promise<Response$create_partner$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/partners`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引先の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>取引先コードをキーに、指定した取引先の情報を更新する</p>
     * <ul>
     * <li>このAPIを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。</li>
     * <li>コードを日本語に設定している場合は、URLエンコードしてURLに含めるようにしてください。</li>
     * <li>振込元口座ID（payer_walletable_id）, 振込手数料負担（transfer_fee_handling_side）, 支払期日設定（payment_term_attributes, 請求の入金期日設定（invoice_payment_term_attributes）は法人向けのプロフェッショナルプラン以上で利用可能です。</li></ul>
     * operationId: update_partner_by_code
     * Request URI: /api/1/partners/code/{code}
     */
    public async update_partner_by_code<RequestContentType extends RequestContentType$update_partner_by_code>(params: Params$update_partner_by_code<RequestContentType>, option?: RequestOption): Promise<Response$update_partner_by_code$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/partners/code/${params.parameter.code}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引先の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引先を取得する</p>
     * <ul>
     * <li>振込元口座ID（payer_walletable_id）, 振込手数料負担（transfer_fee_handling_side）, 支払期日設定（payment_term_attributes, 請求の入金期日設定（invoice_payment_term_attributes）は法人向けのプロフェッショナルプラン以上で利用可能です。</li></ul>
     * operationId: get_partner
     * Request URI: /api/1/partners/{id}
     */
    public async get_partner(params: Params$get_partner, option?: RequestOption): Promise<Response$get_partner$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/partners/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引先の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した取引先の情報を更新する</p>
     * <ul>
     * <li>codeを指定、更新することはできません。</li>
     * <li>振込元口座ID（payer_walletable_id）, 振込手数料負担（transfer_fee_handling_side）, 支払期日設定（payment_term_attributes, 請求の入金期日設定（invoice_payment_term_attributes）は法人向けのプロフェッショナルプラン以上で利用可能です。</li></ul>
     * operationId: update_partner
     * Request URI: /api/1/partners/{id}
     */
    public async update_partner<RequestContentType extends RequestContentType$update_partner>(params: Params$update_partner<RequestContentType>, option?: RequestOption): Promise<Response$update_partner$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/partners/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引先の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引先を削除する</p>
     * operationId: destroy_partner
     * Request URI: /api/1/partners/{id}
     */
    public async destroy_partner(params: Params$destroy_partner, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/partners/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 支払依頼一覧の取得
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の支払依頼一覧を取得する</p>
     *
     * <p>支払依頼APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-payment-requests" target="_blank">freee会計の支払依頼APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、支払依頼の一覧を取得することができます。</li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している支払依頼と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、ご利用になれません。</li>
     *   <li>法人アカウントの場合は、プロフェッショナルプラン、エンタープライズプランでご利用いただけます。</li>
     * </ul>
     * operationId: get_payment_requests
     * Request URI: /api/1/payment_requests
     */
    public async get_payment_requests(params: Params$get_payment_requests, option?: RequestOption): Promise<Response$get_payment_requests$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/payment_requests`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            status: { value: params.parameter.status, explode: false },
            start_application_date: { value: params.parameter.start_application_date, explode: false },
            end_application_date: { value: params.parameter.end_application_date, explode: false },
            start_issue_date: { value: params.parameter.start_issue_date, explode: false },
            end_issue_date: { value: params.parameter.end_issue_date, explode: false },
            application_number: { value: params.parameter.application_number, explode: false },
            title: { value: params.parameter.title, explode: false },
            applicant_id: { value: params.parameter.applicant_id, explode: false },
            approver_id: { value: params.parameter.approver_id, explode: false },
            min_amount: { value: params.parameter.min_amount, explode: false },
            max_amount: { value: params.parameter.max_amount, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            payment_method: { value: params.parameter.payment_method, explode: false },
            start_payment_date: { value: params.parameter.start_payment_date, explode: false },
            end_payment_date: { value: params.parameter.end_payment_date, explode: false },
            document_code: { value: params.parameter.document_code, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 支払依頼の作成
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の支払依頼を作成する</p>
     *
     * <p>支払依頼APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-payment-requests" target="_blank">freee会計の支払依頼APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している支払依頼は本API経由で作成ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>本APIでは支払依頼の項目行一覧(payment_request_lines)は、最大100行までになります。</li>
     *   <li>個人アカウントの場合は、ご利用になれません。</li>
     *   <li>法人アカウントの場合は、プロフェッショナルプラン、エンタープライズプランでご利用できます。</li>
     * </ul>
     * operationId: create_payment_request
     * Request URI: /api/1/payment_requests
     */
    public async create_payment_request<RequestContentType extends RequestContentType$create_payment_request>(params: Params$create_payment_request<RequestContentType>, option?: RequestOption): Promise<Response$create_payment_request$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/payment_requests`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 支払依頼詳細の取得
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の支払依頼を取得する</p>
     *
     * <p>支払依頼APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-payment-requests" target="_blank">freee会計の支払依頼APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している支払依頼と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、ご利用になれません。</li>
     *   <li>法人アカウントの場合は、プロフェッショナルプラン、エンタープライズプランでご利用いただけます。</li>
     * </ul>
     * operationId: get_payment_request
     * Request URI: /api/1/payment_requests/{id}
     */
    public async get_payment_request(params: Params$get_payment_request, option?: RequestOption): Promise<Response$get_payment_request$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/payment_requests/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 支払依頼の更新
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の支払依頼を更新する</p>
     *
     * <p>支払依頼APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-payment-requests" target="_blank">freee会計の支払依頼APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、支払依頼を更新することができます。</li>
     *   <li>本APIでは、status(申請ステータス): draft:下書き, in_progress:申請中, feedback:差戻しのみ更新可能です。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     *   <li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している支払依頼は本API経由で更新ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>申請ステータスが申請中の場合には、申請タイトル(title)、申請日(application_date)、申請経路ID(approval_flow_route_id)、承認者のユーザーID(approver_id)は更新ができません。</li>
     *   <li>本APIでは支払依頼の項目行一覧(payment_request_lines)は、最大100行までになります。</li>
     *   <li>個人アカウントの場合は、ご利用になれません。</li>
     *   <li>法人アカウントの場合は、プロフェッショナルプラン、エンタープライズプランでご利用いただけます。</li>
     * </ul>
     * operationId: update_payment_request
     * Request URI: /api/1/payment_requests/{id}
     */
    public async update_payment_request<RequestContentType extends RequestContentType$update_payment_request>(params: Params$update_payment_request<RequestContentType>, option?: RequestOption): Promise<Response$update_payment_request$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/payment_requests/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 支払依頼の削除
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の支払依頼を削除する</p>
     *
     * <p>支払依頼APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-payment-requests" target="_blank">freee会計の支払依頼APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、支払依頼の承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）を行うことができます。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     * 　<li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している支払依頼はAPI経由で承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、ご利用になれません。</li>
     *   <li>法人アカウントの場合は、プロフェッショナルプラン、エンタープライズプランでご利用いただけます。</li>
     * </ul>
     * operationId: destroy_payment_request
     * Request URI: /api/1/payment_requests/{id}
     */
    public async destroy_payment_request(params: Params$destroy_payment_request, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/payment_requests/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 支払依頼の承認操作
     *
     * <h2 id="_1">概要</h2>
     *
     * <p>指定した事業所の支払依頼の承認操作を行う</p>
     *
     * <p>支払依頼APIの使い方については、<a href="https://developer.freee.co.jp/tips/accounting-payment-requests" target="_blank">freee会計の支払依頼APIの使い方</a>をご参照ください</p>
     *
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、支払依頼の承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）を行うことができます。</li>
     *   <li>
     *     申請ステータス(下書き、申請中)の指定と変更、及び承認操作（承認する、却下する、申請者へ差し戻す、代理承認する、承認済み・却下済みを取り消す）は以下を参考にして行ってください。
     *     <ul>
     *       <li>
     *         承認操作は申請ステータスが申請中、承認済み、却下のものだけが対象です。
     *         <ul>
     *           <li>
     *             初回申請の場合
     *             <ul><li>申請の作成（POST）</li></ul>
     *           </li>
     *           <li>
     *             作成済みの申請の申請ステータス変更・更新する場合
     *             <ul><li>申請の更新（PUT）</li></ul>
     *           </li>
     *           <li>
     *             申請中、承認済み、却下の申請の承認操作を行う場合
     *             <ul><li>承認操作の実行（POST）</li></ul>
     *           </li>
     *         </ul>
     *       </li>
     *       <li>申請の削除（DELETE）が可能なのは申請ステータスが下書き、差戻しの場合のみです</li>
     *     </ul>
     *   </li>
     * 　<li>
     *     申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している支払依頼はAPI経由で承認ステータスの変更ができません。
     *     <ul>
     *       <li>役職指定（申請者の所属部門）</li>
     *       <li>役職指定（申請時に部門指定）</li>
     *       <li>部門および役職指定</li>
     *     </ul>
     *   </li>
     *   <li>個人アカウントの場合は、ご利用になれません。</li>
     *   <li>法人アカウントの場合は、プロフェッショナルプラン、エンタープライズプランでご利用いただけます。</li>
     * </ul>
     * operationId: update_payment_request_action
     * Request URI: /api/1/payment_requests/{id}/actions
     */
    public async update_payment_request_action<RequestContentType extends RequestContentType$update_payment_request_action>(params: Params$update_payment_request_action<RequestContentType>, option?: RequestOption): Promise<Response$update_payment_request_action$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/payment_requests/${params.parameter.id}/actions`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 見積書一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の見積書一覧を取得する</p>
     *
     * operationId: get_quotations
     * Request URI: /api/1/quotations
     */
    public async get_quotations(params: Params$get_quotations, option?: RequestOption): Promise<Response$get_quotations$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/quotations`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            start_issue_date: { value: params.parameter.start_issue_date, explode: false },
            end_issue_date: { value: params.parameter.end_issue_date, explode: false },
            quotation_number: { value: params.parameter.quotation_number, explode: false },
            description: { value: params.parameter.description, explode: false },
            quotation_status: { value: params.parameter.quotation_status, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 見積書の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の見積書を作成する</p>
     *
     * <h2 id="_1">注意点</h2>
     * <ul>
     * <li> <p>partner_code, partner_idはどちらかの指定が必須です。ただし両方同時に指定することはできません。</p> </li>
     * <li> <p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。</p> </li>
     * <li> <p>本APIでは見積内容(quotation_contents)は、最大100行までになります。</p> </li>
     * </ul>
     * operationId: create_quotation
     * Request URI: /api/1/quotations
     */
    public async create_quotation<RequestContentType extends RequestContentType$create_quotation>(params: Params$create_quotation<RequestContentType>, option?: RequestOption): Promise<Response$create_quotation$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/quotations`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 見積書の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の見積書詳細を取得する</p>
     * operationId: get_quotation
     * Request URI: /api/1/quotations/{id}
     */
    public async get_quotation(params: Params$get_quotation, option?: RequestOption): Promise<Response$get_quotation$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/quotations/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 見積書の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の見積書を更新する</p>
     *
     * <h2 id="_1">注意点</h2>
     * <ul>
     * <li> <p>partner_code, partner_idを両方同時に指定することはできません。</p> </li>
     * <li> <p>partner_codeを利用するには、事業所の設定から取引先コードの利用を有効にする必要があります。</p> </li>
     * <li> <p>本APIでは見積内容(quotation_contents)は、最大100行までになります。</p> </li>
     * </ul>
     * operationId: update_quotation
     * Request URI: /api/1/quotations/{id}
     */
    public async update_quotation<RequestContentType extends RequestContentType$update_quotation>(params: Params$update_quotation<RequestContentType>, option?: RequestOption): Promise<Response$update_quotation$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/quotations/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 見積書の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の見積書を削除する</p>
     * operationId: destroy_quotation
     * Request URI: /api/1/quotations/{id}
     */
    public async destroy_quotation(params: Params$destroy_quotation, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/quotations/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * ファイルボックス 証憑ファイル一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のファイルボックス 証憑ファイル一覧を取得する</p>
     * operationId: get_receipts
     * Request URI: /api/1/receipts
     */
    public async get_receipts(params: Params$get_receipts, option?: RequestOption): Promise<Response$get_receipts$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/receipts`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            user_name: { value: params.parameter.user_name, explode: false },
            number: { value: params.parameter.number, explode: false },
            comment_type: { value: params.parameter.comment_type, explode: false },
            comment_important: { value: params.parameter.comment_important, explode: false },
            category: { value: params.parameter.category, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ファイルボックス 証憑ファイルアップロード
     *
     * <h2 id="">概要</h2>
     *
     * <p>ファイルボックスに証憑ファイルをアップロードする</p>
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>リクエストヘッダーの Content-Type は、multipart/form-dataにのみ対応しています。</li>
     * </ul>
     * operationId: create_receipt
     * Request URI: /api/1/receipts
     */
    public async create_receipt(params: Params$create_receipt, option?: RequestOption): Promise<Response$create_receipt$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/receipts`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * ファイルボックス 証憑ファイルの取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のファイルボックス 証憑ファイルを取得する</p>
     * operationId: get_receipt
     * Request URI: /api/1/receipts/{id}
     */
    public async get_receipt(params: Params$get_receipt, option?: RequestOption): Promise<Response$get_receipt$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/receipts/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ファイルボックス 証憑ファイル情報更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>ファイルボックスの証憑ファイル情報を更新する</p>
     * <h2 id="_2">注意点</h2>
     * <ul>
     *   <li>本APIでは、証憑ファイルの再アップロードはできません。</li>
     * </ul>
     * operationId: update_receipt
     * Request URI: /api/1/receipts/{id}
     */
    public async update_receipt<RequestContentType extends RequestContentType$update_receipt>(params: Params$update_receipt<RequestContentType>, option?: RequestOption): Promise<Response$update_receipt$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/receipts/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * ファイルボックス 証憑ファイルを削除する
     *
     * <h2 id="">概要</h2>
     *
     * <p>ファイルボックスの証憑ファイルを削除する</p>
     * operationId: destroy_receipt
     * Request URI: /api/1/receipts/{id}
     */
    public async destroy_receipt(params: Params$destroy_receipt, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/receipts/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * ファイルボックス 証憑ファイルのダウンロード
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のファイルボックス 証憑ファイルのダウンロードをする</p>
     * operationId: download_receipt
     * Request URI: /api/1/receipts/{id}/download
     */
    public async download_receipt<ResponseContentType extends ResponseContentType$download_receipt>(params: Params$download_receipt<ResponseContentType>, option?: RequestOption): Promise<Response$download_receipt$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/api/1/receipts/${params.parameter.id}/download`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 貸借対照表の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の貸借対照表を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>opening_balance : 期首残高 </p>
     * </li>
     *
     * <li>
     * <p>debit_amount : 借方金額 </p>
     * </li>
     * <li>
     * <p>credit_amount:  貸方金額 </p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <li>
     * <p>composition_ratio : 構成比</p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_bs?company_id=1&amp;fiscal_year=2019&amp;breakdown_display_type=partner</p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_bs&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;breakdown_display_type&quot; : &quot;partner&quot;,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1000,
     *         &quot;account_item_name&quot; : &quot;現金&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;流動資産&quot;,
     *         &quot;opening_balance&quot; : 100000,
     *         &quot;debit_amount&quot; : 50000,
     *         &quot;credit_amount&quot; : 20000,
     *         &quot;closing_balance&quot; : 130000,
     *         &quot;composition_ratio&quot; : 0.25
     *         &quot;partners&quot; : [{
     *           &quot;id&quot; : 123,
     *           &quot;name&quot; : &quot;freee&quot;,
     *           &quot;opening_balance&quot; : 100000,
     *           &quot;debit_amount&quot; : 50000,
     *           &quot;credit_amount&quot; : 20000,
     *           &quot;closing_balance&quot; : 130000,
     *           &quot;composition_ratio&quot; : 0.25
     *           },
     *         ...
     *         ]
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_bs
     * Request URI: /api/1/reports/trial_bs
     */
    public async get_trial_bs(params: Params$get_trial_bs, option?: RequestOption): Promise<Response$get_trial_bs$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_bs`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 貸借対照表(３期間比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の貸借対照表(３期間比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>two_years_before_closing_balance:  前々年度期末残高 </p>
     * </li>
     * <li>
     * <p>last_year_closing_balance:  前年度期末残高 </p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <li>
     * <p>year_on_year : 前年比</p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_bs_three_years?company_id=1&amp;fiscal_year=2019</p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_bs_three_years&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1000,
     *         &quot;account_item_name&quot; : &quot;現金&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;流動資産&quot;,
     *         &quot;two_year_before_closing_balance&quot; : 50000,
     *         &quot;last_year_closing_balance&quot; : 25000,
     *         &quot;closing_balance&quot; : 100000,
     *         &quot;year_on_year&quot; : 0.85
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_bs_three_years
     * Request URI: /api/1/reports/trial_bs_three_years
     */
    public async get_trial_bs_three_years(params: Params$get_trial_bs_three_years, option?: RequestOption): Promise<Response$get_trial_bs_three_years$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_bs_three_years`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 貸借対照表(前年比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の貸借対照表(前年比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>last_year_closing_balance:  前年度期末残高 </p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     *
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_bs_two_years?company_id=1&amp;fiscal_year=2019</p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_bs_two_years&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1000,
     *         &quot;account_item_name&quot; : &quot;現金&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;流動資産&quot;,
     *         &quot;last_year_closing_balance&quot; : 25000,
     *         &quot;closing_balance&quot; : 100000,
     *         &quot;year_on_year&quot; : 0.85
     *
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_bs_two_years
     * Request URI: /api/1/reports/trial_bs_two_years
     */
    public async get_trial_bs_two_years(params: Params$get_trial_bs_two_years, option?: RequestOption): Promise<Response$get_trial_bs_two_years$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_bs_two_years`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>opening_balance : 期首残高 </p>
     * </li>
     *
     * <li>
     * <p>debit_amount : 借方金額 </p>
     * </li>
     * <li>
     * <p>credit_amount:  貸方金額 </p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <li>
     * <p>composition_ratio : 構成比</p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl?company_id=1&amp;fiscal_year=2019&amp;breakdown_display_type=partner</p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;breakdown_display_type&quot; : &quot;partner&quot;,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;opening_balance&quot; : 100000,
     *         &quot;debit_amount&quot; : 50000,
     *         &quot;credit_amount&quot; : 20000,
     *         &quot;closing_balance&quot; : 130000,
     *         &quot;composition_ratio&quot; : 0.25
     *         &quot;partners&quot; : [{
     *           &quot;id&quot; : 123,
     *           &quot;name&quot; : &quot;freee&quot;,
     *           &quot;opening_balance&quot; : 100000,
     *           &quot;debit_amount&quot; : 50000,
     *           &quot;credit_amount&quot; : 20000,
     *           &quot;closing_balance&quot; : 130000,
     *           &quot;composition_ratio&quot; : 0.25
     *           },
     *         ...
     *         ]
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl
     * Request URI: /api/1/reports/trial_pl
     */
    public async get_trial_pl(params: Params$get_trial_pl, option?: RequestOption): Promise<Response$get_trial_pl$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書(部門比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書(部門比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>個人向けのプレミアムプラン、法人向けのベーシックプラン以上で利用可能なAPIです。対象外のプランでは401エラーを返却します。</li>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl_sections?company_id=1&amp;section_ids=1,2,3&amp;fiscal_year=2019</p></p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl_sections&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;section_ids&quot; : &quot;1,2,3&quot;,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;closing_balance&quot; : 1000000,
     *         &quot;sections&quot; : [{
     *           &quot;id&quot;: 1
     *           &quot;name&quot;: &quot;営業部&quot;,
     *           &quot;closing_balance&quot; : 100000
     *         },
     *         {
     *           &quot;id&quot;: 2
     *           &quot;name&quot;: &quot;広報部&quot;,
     *           &quot;closing_balance&quot; : 200000
     *         },
     *         {
     *           &quot;id&quot;: 3
     *           &quot;name&quot;: &quot;人事部&quot;,
     *           &quot;closing_balance&quot; : 300000
     *         },
     *         ...
     *         ]
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl_sections
     * Request URI: /api/1/reports/trial_pl_sections
     */
    public async get_trial_pl_sections(params: Params$get_trial_pl_sections, option?: RequestOption): Promise<Response$get_trial_pl_sections$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl_sections`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            section_ids: { value: params.parameter.section_ids, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書(セグメント1比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書(セグメント1比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>法人向けのプロフェッショナルプラン以上で利用可能なAPIです。対象外のプランでは401エラーを返却します。</li>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl_segment_1_tags?company_id=1&amp;segment_1_tag_ids=1,2,3&amp;fiscal_year=2019</p></p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl_segment_1_tags&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;segment_1_tag_ids&quot; : &quot;1,2,3&quot;,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;closing_balance&quot; : 1000000,
     *         &quot;segment_1_tags&quot; : [{
     *           &quot;id&quot;: 1
     *           &quot;name&quot;: &quot;プロジェクトA&quot;,
     *           &quot;closing_balance&quot; : 100000
     *         },
     *         {
     *           &quot;id&quot;: 2
     *           &quot;name&quot;: &quot;プロジェクトB&quot;,
     *           &quot;closing_balance&quot; : 200000
     *         },
     *         {
     *           &quot;id&quot;: 3
     *           &quot;name&quot;: &quot;プロジェクトC&quot;,
     *           &quot;closing_balance&quot; : 300000
     *         },
     *         ...
     *         ]
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl_segment_1_tags
     * Request URI: /api/1/reports/trial_pl_segment_1_tags
     */
    public async get_trial_pl_segment_1_tags(params: Params$get_trial_pl_segment_1_tags, option?: RequestOption): Promise<Response$get_trial_pl_segment_1_tags$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl_segment_1_tags`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            segment_1_tag_ids: { value: params.parameter.segment_1_tag_ids, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書(セグメント2比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書(セグメント2比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>法人向けのエンタープライズプランで利用可能なAPIです。対象外のプランでは401エラーを返却します。</li>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl_segment_2_tags?company_id=1&amp;segment_2_tag_ids=1,2,3&amp;fiscal_year=2019</p></p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl_segment_2_tags&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;segment_2_tag_ids&quot; : &quot;1,2,3&quot;,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;closing_balance&quot; : 1000000,
     *         &quot;segment_2_tags&quot; : [{
     *           &quot;id&quot;: 1
     *           &quot;name&quot;: &quot;プロジェクトA&quot;,
     *           &quot;closing_balance&quot; : 100000
     *         },
     *         {
     *           &quot;id&quot;: 2
     *           &quot;name&quot;: &quot;プロジェクトB&quot;,
     *           &quot;closing_balance&quot; : 200000
     *         },
     *         {
     *           &quot;id&quot;: 3
     *           &quot;name&quot;: &quot;プロジェクトC&quot;,
     *           &quot;closing_balance&quot; : 300000
     *         },
     *         ...
     *         ]
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl_segment_2_tags
     * Request URI: /api/1/reports/trial_pl_segment_2_tags
     */
    public async get_trial_pl_segment_2_tags(params: Params$get_trial_pl_segment_2_tags, option?: RequestOption): Promise<Response$get_trial_pl_segment_2_tags$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl_segment_2_tags`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            segment_2_tag_ids: { value: params.parameter.segment_2_tag_ids, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書(セグメント3比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書(セグメント3比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>法人向けのエンタープライズプランで利用可能なAPIです。対象外のプランでは401エラーを返却します。</li>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl_segment_3_tags?company_id=1&amp;segment_3_tag_ids=1,2,3&amp;fiscal_year=2019</p></p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl_segment_3_tags&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;segment_3_tag_ids&quot; : &quot;1,2,3&quot;,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;closing_balance&quot; : 1000000,
     *         &quot;segment_3_tags&quot; : [{
     *           &quot;id&quot;: 1
     *           &quot;name&quot;: &quot;プロジェクトA&quot;,
     *           &quot;closing_balance&quot; : 100000
     *         },
     *         {
     *           &quot;id&quot;: 2
     *           &quot;name&quot;: &quot;プロジェクトB&quot;,
     *           &quot;closing_balance&quot; : 200000
     *         },
     *         {
     *           &quot;id&quot;: 3
     *           &quot;name&quot;: &quot;プロジェクトC&quot;,
     *           &quot;closing_balance&quot; : 300000
     *         },
     *         ...
     *         ]
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl_segment_3_tags
     * Request URI: /api/1/reports/trial_pl_segment_3_tags
     */
    public async get_trial_pl_segment_3_tags(params: Params$get_trial_pl_segment_3_tags, option?: RequestOption): Promise<Response$get_trial_pl_segment_3_tags$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl_segment_3_tags`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            segment_3_tag_ids: { value: params.parameter.segment_3_tag_ids, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書(３期間比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書(３期間比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>two_years_before_closing_balance:  前々年度期末残高 </p>
     * </li>
     * <li>
     * <p>last_year_closing_balance:  前年度期末残高 </p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <li>
     * <p>year_on_year : 前年比</p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl_three_years?company_id=1&fiscal_year=2019</p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl_three_years&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;two_year_before_closing_balance&quot; : 50000,
     *         &quot;last_year_closing_balance&quot; : 25000,
     *         &quot;closing_balance&quot; : 100000,
     *         &quot;year_on_year&quot; : 0.85
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl_three_years
     * Request URI: /api/1/reports/trial_pl_three_years
     */
    public async get_trial_pl_three_years(params: Params$get_trial_pl_three_years, option?: RequestOption): Promise<Response$get_trial_pl_three_years$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl_three_years`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 損益計算書(前年比較)の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の損益計算書(前年比較)を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     *
     * <li>
     * <p>created_at : 作成日時</p>
     * </li>
     *
     * <li>
     * <p>account_item_name : 勘定科目名</p>
     * </li>
     *
     * <li>
     * <p>hierarchy_level: 階層レベル</p>
     * </li>
     *
     * <li>
     * <p>parent_account_category_name: 上位勘定科目カテゴリー名</p>
     * </li>
     * <li>
     * <p>last_year_closing_balance:  前年度期末残高 </p>
     * </li>
     * <li>
     * <p>closing_balance : 期末残高 </p>
     * </li>
     * <li>
     * <p>year_on_year : 前年比</p>
     * </li>
     * <h2 id="_3">注意点</h2>
     * <ul>
     * <li>会計年度が指定されない場合、現在の会計年度がデフォルトとなります。</li>
     * <li>絞り込み条件の日付と、月または年度は同時に指定することはできません。</li>
     * <li>up_to_dateがfalseの場合、残高の集計が完了していません。最新の集計結果を確認したい場合は、時間を空けて再度取得する必要があります。</li>
     * <li>配賦仕訳の絞り込み（cost_allocation）は法人向けのベーシックプラン以上で利用可能です。</li>
     * <li>取引先、品目、部門、セグメントはそれぞれの合計値が1000を超えるとレスポンスを得ることができません。</li>
     * </ul>
     *
     * <h2 id="_4">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/reports/trial_pl_two_years?company_id=1&amp;fiscal_year=2019</p>
     * </blockquote>
     *
     * <pre><code>{
     *   &quot;trial_pl_two_years&quot; :
     *     {
     *       &quot;company_id&quot; : 1,
     *       &quot;fiscal_year&quot; : 2019,
     *       &quot;created_at&quot; : &quot;2019-12-17 12:00:50&quot
     *       &quot;balances&quot; : [{
     *         &quot;account_item_id&quot; : 1500,
     *         &quot;account_item_name&quot; : &quot;売上高&quot;,
     *         &quot;hierarchy_level&quot; : 2,
     *         &quot;account_category_name&quot; : &quot;営業収益&quot;,
     *         &quot;last_year_closing_balance&quot; : 25000,
     *         &quot;closing_balance&quot; : 100000,
     *         &quot;year_on_year&quot; : 0.85
     *
     *       },
     *       ...
     *       ]
     *     }
     * }</code></pre>
     *
     * operationId: get_trial_pl_two_years
     * Request URI: /api/1/reports/trial_pl_two_years
     */
    public async get_trial_pl_two_years(params: Params$get_trial_pl_two_years, option?: RequestOption): Promise<Response$get_trial_pl_two_years$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/reports/trial_pl_two_years`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            fiscal_year: { value: params.parameter.fiscal_year, explode: false },
            start_month: { value: params.parameter.start_month, explode: false },
            end_month: { value: params.parameter.end_month, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            account_item_display_type: { value: params.parameter.account_item_display_type, explode: false },
            breakdown_display_type: { value: params.parameter.breakdown_display_type, explode: false },
            partner_id: { value: params.parameter.partner_id, explode: false },
            partner_code: { value: params.parameter.partner_code, explode: false },
            item_id: { value: params.parameter.item_id, explode: false },
            section_id: { value: params.parameter.section_id, explode: false },
            adjustment: { value: params.parameter.adjustment, explode: false },
            cost_allocation: { value: params.parameter.cost_allocation, explode: false },
            approval_flow_status: { value: params.parameter.approval_flow_status, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 部門一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の部門一覧を取得する</p>
     *
     * <h2 id="_2">レスポンスの例</h2>
     *
     * <blockquote>
     * <p>GET https://api.freee.co.jp/api/1/sections?company_id=1</p>
     * </blockquote>
     *
     * <pre><code>// プレミアムプラン（個人）、ベーシックプラン以上（法人）
     * {
     *   &quot;sections&quot; : [
     *     {
     *       &quot;id&quot; : 101,
     *       &quot;company_id&quot; : 1,
     *       &quot;name&quot; : &quot;開発部門&quot;,
     *       &quot;long_name&quot;: &quot;開発部門&quot;,
     *       &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *       &quot;shortcut2&quot; : &quot;123&quot;,
     *       &quot;indent_count&quot;: 1,
     *       &quot;parent_id&quot;: 11
     *     },
     *     ...
     *   ]
     * }
     * // それ以外のプラン
     * {
     *   &quot;sections&quot; : [
     *     {
     *       &quot;id&quot; : 101,
     *       &quot;company_id&quot; : 1,
     *       &quot;name&quot; : &quot;開発部門&quot;,
     *       &quot;long_name&quot;: &quot;開発部門&quot;,
     *       &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *       &quot;shortcut2&quot; : &quot;123&quot;
     *     },
     *     ...
     *   ]
     * }</code></pre>
     *
     * operationId: get_sections
     * Request URI: /api/1/sections
     */
    public async get_sections(params: Params$get_sections, option?: RequestOption): Promise<Response$get_sections$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/sections`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 部門の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の部門を作成する</p>
     *
     * <h2 id="_2">レスポンスの例</h2>
     *
     * <pre><code>// プレミアムプラン（個人）、ベーシックプラン以上（法人）
     * {
     *   &quot;section&quot; : {
     *     &quot;id&quot; : 102,
     *     &quot;company_id&quot; : 1,
     *     &quot;name&quot; : &quot;開発部門&quot;,
     *     &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *     &quot;shortcut2&quot; : &quot;123&quot;,
     *     &quot;indent_count&quot;: 1,
     *     &quot;parent_id&quot;: 101
     *   }
     * }
     * // それ以外のプラン
     * {
     *   &quot;section&quot; : {
     *     &quot;id&quot; : 102,
     *     &quot;company_id&quot; : 1,
     *     &quot;name&quot; : &quot;開発部門&quot;,
     *     &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *     &quot;shortcut2&quot; : &quot;123&quot;
     *   }
     * }</code></pre>
     *
     * operationId: create_section
     * Request URI: /api/1/sections
     */
    public async create_section<RequestContentType extends RequestContentType$create_section>(params: Params$create_section<RequestContentType>, option?: RequestOption): Promise<Response$create_section$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/sections`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の部門を参照する</p><h2 id="_2">レスポンスの例</h2>
     *
     * <pre><code>// プレミアムプラン（個人）、ベーシックプラン以上（法人）
     * {
     *   &quot;section&quot; : {
     *     &quot;id&quot; : 102,
     *     &quot;company_id&quot; : 1,
     *     &quot;name&quot; : &quot;開発部門&quot;,
     *     &quot;long_name&quot;: &quot;開発部門&quot;,
     *     &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *     &quot;shortcut2&quot; : &quot;123&quot;,
     *     &quot;indent_count&quot;: 1,
     *     &quot;parent_id&quot;: 101
     *   }
     * }
     * // それ以外のプラン
     * {
     *   &quot;section&quot; : {
     *     &quot;id&quot; : 102,
     *     &quot;company_id&quot; : 1,
     *     &quot;name&quot; : &quot;開発部門&quot;,
     *     &quot;long_name&quot;: &quot;開発部門&quot;,
     *     &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *     &quot;shortcut2&quot; : &quot;123&quot;
     *   }
     * }</code></pre>
     *
     * operationId: get_section
     * Request URI: /api/1/sections/{id}
     */
    public async get_section(params: Params$get_section, option?: RequestOption): Promise<Response$get_section$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/sections/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 部門の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の部門を更新する</p><h2 id="_2">レスポンスの例</h2>
     *
     * <pre><code>// プレミアムプラン（個人）、ベーシックプラン以上（法人）
     * {
     *   &quot;section&quot; : {
     *     &quot;id&quot; : 102,
     *     &quot;company_id&quot; : 1,
     *     &quot;name&quot; : &quot;開発部門&quot;,
     *     &quot;long_name&quot;: &quot;開発部門&quot;,
     *     &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *     &quot;shortcut2&quot; : &quot;123&quot;,
     *     &quot;indent_count&quot;: 1,
     *     &quot;parent_id&quot;: 101
     *   }
     * }
     * // それ以外のプラン
     * {
     *   &quot;section&quot; : {
     *     &quot;id&quot; : 102,
     *     &quot;company_id&quot; : 1,
     *     &quot;name&quot; : &quot;開発部門&quot;,
     *     &quot;long_name&quot;: &quot;開発部門&quot;,
     *     &quot;shortcut1&quot; : &quot;DEVELOPER&quot;,
     *     &quot;shortcut2&quot; : &quot;123&quot;
     *   }
     * }</code></pre>
     *
     * operationId: update_section
     * Request URI: /api/1/sections/{id}
     */
    public async update_section<RequestContentType extends RequestContentType$update_section>(params: Params$update_section<RequestContentType>, option?: RequestOption): Promise<Response$update_section$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/sections/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 部門の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の部門を削除する</p>
     * operationId: destroy_section
     * Request URI: /api/1/sections/{id}
     */
    public async destroy_section(params: Params$destroy_section, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/sections/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * セグメントタグ一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のセグメントタグ一覧を取得する</p>
     *
     * <h2 id="">注意点</h2>
     *
     * <ul>
     *
     * <li>本APIは法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     *
     * </ul>
     * operationId: get_segment_tags
     * Request URI: /api/1/segments/{segment_id}/tags
     */
    public async get_segment_tags(params: Params$get_segment_tags, option?: RequestOption): Promise<Response$get_segment_tags$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/segments/${params.parameter.segment_id}/tags`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * セグメントの作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のセグメントタグを作成する</p>
     *
     * <h2 id="">注意点</h2>
     *
     * <ul>
     *
     * <li>本APIは法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     *
     * </ul>
     * operationId: create_segment_tag
     * Request URI: /api/1/segments/{segment_id}/tags
     */
    public async create_segment_tag<RequestContentType extends RequestContentType$create_segment_tag>(params: Params$create_segment_tag<RequestContentType>, option?: RequestOption): Promise<Response$create_segment_tag$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/segments/${params.parameter.segment_id}/tags`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * セグメントタグの更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のセグメントタグを更新する</p>
     *
     * <h2 id="">注意点</h2>
     *
     * <ul>
     *
     * <li>本APIは法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     *
     * </ul>
     * operationId: update_segment_tag
     * Request URI: /api/1/segments/{segment_id}/tags/{id}
     */
    public async update_segment_tag<RequestContentType extends RequestContentType$update_segment_tag>(params: Params$update_segment_tag<RequestContentType>, option?: RequestOption): Promise<Response$update_segment_tag$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/segments/${params.parameter.segment_id}/tags/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * セグメントタグの削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のセグメントタグを削除する</p>
     *
     * <h2 id="">注意点</h2>
     *
     * <ul>
     *
     * <li>本APIは法人向けのプロフェッショナルプラン以上で利用可能です。利用可能なセグメントの数は、法人向けのプロフェッショナルプランの場合は1つ、エンタープライズプランの場合は3つです。</li>
     *
     * </ul>
     * operationId: destroy_segments_tag
     * Request URI: /api/1/segments/{segment_id}/tags/{id}
     */
    public async destroy_segments_tag(params: Params$destroy_segments_tag, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/segments/${params.parameter.segment_id}/tags/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * メモタグ一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のメモタグ一覧を取得する</p>
     * operationId: get_tags
     * Request URI: /api/1/tags
     */
    public async get_tags(params: Params$get_tags, option?: RequestOption): Promise<Response$get_tags$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/tags`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            start_update_date: { value: params.parameter.start_update_date, explode: false },
            end_update_date: { value: params.parameter.end_update_date, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * メモタグの作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のメモタグを作成する</p>
     * operationId: create_tag
     * Request URI: /api/1/tags
     */
    public async create_tag<RequestContentType extends RequestContentType$create_tag>(params: Params$create_tag<RequestContentType>, option?: RequestOption): Promise<Response$create_tag$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/tags`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * メモタグの詳細情報の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のメモタグを取得する</p>
     * operationId: get_tag
     * Request URI: /api/1/tags/{id}
     */
    public async get_tag(params: Params$get_tag, option?: RequestOption): Promise<Response$get_tag$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/tags/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * メモタグの更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のメモタグを更新する</p>
     * operationId: update_tag
     * Request URI: /api/1/tags/{id}
     */
    public async update_tag<RequestContentType extends RequestContentType$update_tag>(params: Params$update_tag<RequestContentType>, option?: RequestOption): Promise<Response$update_tag$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/tags/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * メモタグの削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所のメモタグを削除する</p>
     * operationId: destroy_tag
     * Request URI: /api/1/tags/{id}
     */
    public async destroy_tag(params: Params$destroy_tag, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/tags/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 税区分コード一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>税区分コード一覧を取得する</p>
     * operationId: get_tax_codes
     * Request URI: /api/1/taxes/codes
     */
    public async get_tax_codes(option?: RequestOption): Promise<Response$get_tax_codes$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/taxes/codes`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * 税区分コードの取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>税区分コードを取得する</p>
     * operationId: get_tax_code
     * Request URI: /api/1/taxes/codes/{code}
     */
    public async get_tax_code(params: Params$get_tax_code, option?: RequestOption): Promise<Response$get_tax_code$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/taxes/codes/${params.parameter.code}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * 税区分コード詳細一覧の取得
     * operationId: get_taxes_companies
     * Request URI: /api/1/taxes/companies/{company_id}
     */
    public async get_taxes_companies(params: Params$get_taxes_companies, option?: RequestOption): Promise<Response$get_taxes_companies$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/taxes/companies/${params.parameter.company_id}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * 取引（振替）一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引（振替）一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 振替金額</p>
     * </li>
     *
     * <li>
     * <p>from_walletable_type, to_walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_transfers
     * Request URI: /api/1/transfers
     */
    public async get_transfers(params: Params$get_transfers, option?: RequestOption): Promise<Response$get_transfers$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/transfers`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（振替）の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引（振替）を作成する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 振替金額</p>
     * </li>
     *
     * <li>
     * <p>from_walletable_type, to_walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: create_transfer
     * Request URI: /api/1/transfers
     */
    public async create_transfer<RequestContentType extends RequestContentType$create_transfer>(params: Params$create_transfer<RequestContentType>, option?: RequestOption): Promise<Response$create_transfer$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/transfers`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（振替）の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引（振替）を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 振替金額</p>
     * </li>
     *
     * <li>
     * <p>from_walletable_type, to_walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_transfer
     * Request URI: /api/1/transfers/{id}
     */
    public async get_transfer(params: Params$get_transfer, option?: RequestOption): Promise<Response$get_transfer$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/transfers/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 取引（振替）の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引（振替）を更新する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 振替金額</p>
     * </li>
     *
     * <li>
     * <p>from_walletable_type, to_walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: update_transfer
     * Request URI: /api/1/transfers/{id}
     */
    public async update_transfer<RequestContentType extends RequestContentType$update_transfer>(params: Params$update_transfer<RequestContentType>, option?: RequestOption): Promise<Response$update_transfer$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/transfers/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 取引（振替）の削除する
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の取引（振替）を削除する</p>
     * operationId: destroy_transfer
     * Request URI: /api/1/transfers/{id}
     */
    public async destroy_transfer(params: Params$destroy_transfer, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/transfers/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 事業所に所属するユーザー一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>事業所に所属するユーザーの一覧を取得する</p>
     * operationId: get_users
     * Request URI: /api/1/users
     */
    public async get_users(params: Params$get_users, option?: RequestOption): Promise<Response$get_users$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/users`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ログインユーザーの権限の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>ユーザーの権限情報を取得する</p>
     * operationId: get_users_capabilities
     * Request URI: /api/1/users/capabilities
     */
    public async get_users_capabilities(params: Params$get_users_capabilities, option?: RequestOption): Promise<Response$get_users_capabilities$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/users/capabilities`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ログインユーザー情報の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>ユーザーの情報を取得する</p>
     * operationId: get_users_me
     * Request URI: /api/1/users/me
     */
    public async get_users_me(params: Params$get_users_me, option?: RequestOption): Promise<Response$get_users_me$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/users/me`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            companies: { value: params.parameter.companies, explode: false },
            advisor: { value: params.parameter.advisor, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * ユーザー情報の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>ユーザー情報を更新する</p>
     * operationId: update_user
     * Request URI: /api/1/users/me
     */
    public async update_user<RequestContentType extends RequestContentType$update_user>(params: Params$update_user<RequestContentType>, option?: RequestOption): Promise<Response$update_user$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/users/me`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 明細一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の明細一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 明細金額</p>
     * </li>
     *
     * <li>
     * <p>due_amount : 取引登録待ち金額</p>
     * </li>
     *
     * <li>
     * <p>balance : 残高</p>
     * </li>
     *
     * <li>
     * <p>entry_side</p>
     *
     * <ul>
     * <li>income : 入金</li>
     *
     * <li>expense : 出金</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_wallet_txns
     * Request URI: /api/1/wallet_txns
     */
    public async get_wallet_txns(params: Params$get_wallet_txns, option?: RequestOption): Promise<Response$get_wallet_txns$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/wallet_txns`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            walletable_type: { value: params.parameter.walletable_type, explode: false },
            walletable_id: { value: params.parameter.walletable_id, explode: false },
            start_date: { value: params.parameter.start_date, explode: false },
            end_date: { value: params.parameter.end_date, explode: false },
            entry_side: { value: params.parameter.entry_side, explode: false },
            offset: { value: params.parameter.offset, explode: false },
            limit: { value: params.parameter.limit, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 明細の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の明細を作成する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 明細金額</p>
     * </li>
     *
     * <li>
     * <p>due_amount : 取引登録待ち金額</p>
     * </li>
     *
     * <li>
     * <p>balance : 残高</p>
     * </li>
     *
     * <li>
     * <p>entry_side</p>
     *
     * <ul>
     * <li>income : 入金</li>
     *
     * <li>expense : 出金</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: create_wallet_txn
     * Request URI: /api/1/wallet_txns
     */
    public async create_wallet_txn<RequestContentType extends RequestContentType$create_wallet_txn>(params: Params$create_wallet_txn<RequestContentType>, option?: RequestOption): Promise<Response$create_wallet_txn$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/wallet_txns`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 明細の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の明細を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>amount : 明細金額</p>
     * </li>
     *
     * <li>
     * <p>due_amount : 取引登録待ち金額</p>
     * </li>
     *
     * <li>
     * <p>balance : 残高</p>
     * </li>
     *
     * <li>
     * <p>entry_side</p>
     *
     * <ul>
     * <li>income : 入金</li>
     *
     * <li>expense : 出金</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>walletable_type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     * </ul>
     * operationId: get_wallet_txn
     * Request URI: /api/1/wallet_txns/{id}
     */
    public async get_wallet_txn(params: Params$get_wallet_txn, option?: RequestOption): Promise<Response$get_wallet_txn$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/wallet_txns/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 明細の削除
     *
     * <h2 id="">概要</h2>
     * <p>指定した事業所の明細を削除する</p>
     *
     * <h2 id="">注意点</h2>
     * <ul>
     *   <li>同期をして取得したデータが「明細」の場合は、削除および再取得はできません。</li>
     *   <li>詳細は<a target="_blank" href="https://support.freee.co.jp/hc/ja/articles/360015892332">freeeヘルプセンター</a>をご確認ください。</li>
     * </ul>
     * operationId: destroy_wallet_txn
     * Request URI: /api/1/wallet_txns/{id}
     */
    public async destroy_wallet_txn(params: Params$destroy_wallet_txn, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/wallet_txns/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /**
     * 口座一覧の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の口座一覧を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>type
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     *
     * <li>walletable_balance : 登録残高</li>
     *
     * <li>last_balance : 同期残高</li>
     * </ul>
     * operationId: get_walletables
     * Request URI: /api/1/walletables
     */
    public async get_walletables(params: Params$get_walletables, option?: RequestOption): Promise<Response$get_walletables$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/walletables`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false },
            with_balance: { value: params.parameter.with_balance, explode: false },
            type: { value: params.parameter.type, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 口座の作成
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所に口座を作成する</p>
     *
     * <h2 id="">注意点</h2>
     * <ul><li>同期に対応した口座はこのAPIでは作成できません</li></ul>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>
     * <p>type</p>
     *
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     *
     * <li>
     * <p>name : 口座名</p>
     * </li>
     *
     * <li>
     * <p>bank_id : サービスID</p>
     * </li>
     *
     * <li>
     * <p>group_name : 決算書表示名（小カテゴリー）　例：売掛金, 受取手形, 未収入金（法人のみ）, 買掛金, 支払手形, 未払金, 預り金, 前受金</p>
     * </li>
     * </ul>
     * operationId: create_walletable
     * Request URI: /api/1/walletables
     */
    public async create_walletable<RequestContentType extends RequestContentType$create_walletable>(params: Params$create_walletable<RequestContentType>, option?: RequestOption): Promise<Response$create_walletable$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/1/walletables`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 口座情報の取得
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の口座情報を取得する</p>
     *
     * <h2 id="_2">定義</h2>
     *
     * <ul>
     * <li>type
     * <ul>
     * <li>bank_account : 銀行口座</li>
     *
     * <li>credit_card : クレジットカード</li>
     *
     * <li>wallet : その他の決済口座</li>
     * </ul>
     * </li>
     *
     * <li>walletable_balance : 登録残高</li>
     *
     * <li>last_balance : 同期残高</li>
     * </ul>
     * operationId: get_walletable
     * Request URI: /api/1/walletables/{type}/{id}
     */
    public async get_walletable(params: Params$get_walletable, option?: RequestOption): Promise<Response$get_walletable$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/walletables/${params.parameter.type}/${params.parameter.id}`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * 口座の更新
     *
     * <h2 id="">概要</h2>
     *
     * <p>口座を更新する</p>
     * operationId: update_walletable
     * Request URI: /api/1/walletables/{type}/{id}
     */
    public async update_walletable<RequestContentType extends RequestContentType$update_walletable>(params: Params$update_walletable<RequestContentType>, option?: RequestOption): Promise<Response$update_walletable$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/1/walletables/${params.parameter.type}/${params.parameter.id}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * 口座の削除
     *
     * <h2 id="">概要</h2>
     *
     * <p>指定した事業所の口座を削除する</p>
     *
     * <h2 id="">注意点</h2>
     * <ul>
     * <li>削除を実行するには、当該口座に関連する仕訳データを事前に削除する必要があります。</li>
     * <li>当該口座に仕訳が残っていないか確認するには、レポートの「仕訳帳」等を参照し、必要に応じて、「取引」や「口座振替」も削除します。</li>
     *
     * </ul>
     * operationId: destroy_walletable
     * Request URI: /api/1/walletables/{type}/{id}
     */
    public async destroy_walletable(params: Params$destroy_walletable, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/1/walletables/${params.parameter.type}/${params.parameter.id}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            company_id: { value: params.parameter.company_id, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
}
